{"meta":{"title":"ini's Blog","subtitle":null,"description":"不要听一个人说什么，而看他怎么做。","author":"ini","url":"http://inicb.com"},"pages":[{"title":"关于","date":"2018-03-15T04:12:08.000Z","updated":"2018-04-18T03:15:48.266Z","comments":false,"path":"about/index.html","permalink":"http://inicb.com/about/index.html","excerpt":"","text":"记录自己学习的地方～目前供职于吉林省达仁科技有限公司，是一枚Android和Ios开发工程师，并且负责\bLinux系统运维，目前正在学习大数据。"},{"title":"Categories","date":"2018-04-16T13:11:17.757Z","updated":"2018-04-16T13:11:17.757Z","comments":true,"path":"categories/index.html","permalink":"http://inicb.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"使用Burp和sqlmap进行自动化sql注入","slug":"使用Burp和sqlmap进行自动化sql注入","date":"2018-05-16T07:01:53.000Z","updated":"2018-05-18T07:26:50.885Z","comments":true,"path":"archives/f38a06d2.html","link":"","permalink":"http://inicb.com/archives/f38a06d2.html","excerpt":"Tips：本文主要用于sql注入攻击自查，请不要做犯法的事情。 \b\b之前已经讲过如何用Burp和Sqlmap配合进行sql注入攻击，但是使用起来特别麻烦，对有大量接口调用的项目如何自动化的进行检测便变得重要，本篇注重介绍如何使用Burp以及sqlmap的批量注入来完成自动化注入攻击。 整体流程为： 使用BurpSuite保存request记录log 因为BurpSuite的日志记录了所有走代理的流量，包括静态资源啊，重复的提交啊，这些都会影响SqlMap的分析效率，所以\b对Request日志进行过滤。 对过滤后的日志文件进行批量注入攻击。","text":"Tips：本文主要用于sql注入攻击自查，请不要做犯法的事情。 \b\b之前已经讲过如何用Burp和Sqlmap配合进行sql注入攻击，但是使用起来特别麻烦，对有大量接口调用的项目如何自动化的进行检测便变得重要，本篇注重介绍如何使用Burp以及sqlmap的批量注入来完成自动化注入攻击。 整体流程为： 使用BurpSuite保存request记录log 因为BurpSuite的日志记录了所有走代理的流量，包括静态资源啊，重复的提交啊，这些都会影响SqlMap的分析效率，所以\b对Request日志进行过滤。 对过滤后的日志文件进行批量注入攻击。 使用BurpSuite保存request记录log使用的BurpSuite版本为1.7.26进行的操作，各个版本有可能不一样，请注意。 勾选BurpSuite输出日志输入要保存为的文件名称 对日志进行过滤强大的SqlMap支持使用BurpSuite的日志进行批量分析，但是BurpSuite的日志记录了所有走代理的流量，包括静态资源啊，重复的提交啊，这些都会影响SqlMap的分析效率，所以需要对访问日志进行过滤，\b只筛选出我们需要的。 \b使用burplogfilter.py过滤日志，点击下载介绍：12345678910Usage: python3 burplogfilter.py [options]Options: -h Show this showHelp -f filepath The BurpSuite log to analyze --host keyword, --host=keyword Host name filter -v Show debug messageExamples: python3 burplogfilter.py -f /tmp/burp.log --host=&apos;google.com&apos; &gt; burp-proxy.log 参考本文BurpSuite日志分析过滤工具，加快SqlMap进行批量扫描的速度git地址使用：12python3 burplogfilter.py -f ~/temp/burp/sql_map_log --host=xxxx &gt; ~/temp/burp/sql_map_log_proxy# 保存过滤日志到新的文件 在使用burplogfilter过程中，发现报以下错误“TypeError: cannot use a string pattern on a bytes-like object”修改burplogfilter.py以下位置即可1234567891011121314151617def scrapBlocks(filename): global DEBUG if DEBUG: print(&quot;Try to anayze file %s&quot;%filename) blocks=None with open(filename, &apos;rb&apos;) as f: content=f.read() content = content.decode(&apos;ISO-8859-1&apos;) #添加这句话 blocks = re.findall(r&apos;======================================================&apos; r&apos;.*?======================================================&apos; r&apos;.*?======================================================&apos;, content, re.S) if DEBUG: print(&quot;The file contains %s block(s)&quot;%len(blocks)) return blocks 对过滤后的日志文件进行批量注入攻击进入sqlmap.py所在目录，1234python sqlmap.py -l /Users/daren/temp/burp/sql_map_log_1_filter --batch -smart --dbms=oracle# -l 访问日志文件# batch：自动选yes。# smart：启发式快速判断，节约时间。 到此完成自动化批量注入攻击。 参考资料 BurpSuite日志分析过滤工具，加快SqlMap进行批量扫描的速度 python 编码问题 UnicodeDecodeError: ‘utf8’ codec can’t decode byte 0xb4 in position 0: invalid start byt BurpSuite导出log配合SQLMAP批量扫描注入点 如何使用Burp Suite代理","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"SQLMAP","slug":"技术开发/SQLMAP","permalink":"http://inicb.com/categories/技术开发/SQLMAP/"}],"tags":[{"name":"SQLMAP","slug":"SQLMAP","permalink":"http://inicb.com/tags/SQLMAP/"},{"name":"BURP","slug":"BURP","permalink":"http://inicb.com/tags/BURP/"},{"name":"自动化","slug":"自动化","permalink":"http://inicb.com/tags/自动化/"}]},{"title":"微信公众号-网页开发 开发入门","slug":"微信公众号开发入门","date":"2018-05-11T08:26:11.000Z","updated":"2018-05-14T08:34:18.839Z","comments":true,"path":"archives/75c2257b.html","link":"","permalink":"http://inicb.com/archives/75c2257b.html","excerpt":"Tips：本文章主要基于微信JS-SDK和jQuery WeUI 进行的微信公众号网页开发。前提需要1.微信公众号已经完成开发者认证。2.在“基本配置”中设置IP白名单。3.\b提供一个能支持80或者443的服务。 微信官方文档 https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115 绑定域名先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 引入JS文件在需要调用JS接口的页面引入如下JS文件，（支持https）：http://res.wx.qq.com/open/js/jweixin-1.2.0.js 获取access_tokenaccess_token 用户获取jsapi_ticket，有效期7200秒，开发者必须在自己的服务全局缓存access_token。建议开发者建立自己的\b\baccess_token中控服务器统一获取和刷新，其他业务逻辑服务器所使用的access_token均来自于该中控服务器。 微信获取access_token接口文档 接口调用说明前提调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。 12https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET 我这里使用了shell脚本获取access_token。123a_url=`curl https://api.weixin.qq.com/cgi-bin/token\\?grant_type\\=client_credential\\&amp;appid\\=xxx\\&amp;secret\\=xxxx`access_token=`echo $a_url|jq -r &apos;.access_token&apos;`echo $access_token tips: jq 是linux下shell进行json处理的工具，很强大。","text":"Tips：本文章主要基于微信JS-SDK和jQuery WeUI 进行的微信公众号网页开发。前提需要1.微信公众号已经完成开发者认证。2.在“基本配置”中设置IP白名单。3.\b提供一个能支持80或者443的服务。 微信官方文档 https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115 绑定域名先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 引入JS文件在需要调用JS接口的页面引入如下JS文件，（支持https）：http://res.wx.qq.com/open/js/jweixin-1.2.0.js 获取access_tokenaccess_token 用户获取jsapi_ticket，有效期7200秒，开发者必须在自己的服务全局缓存access_token。建议开发者建立自己的\b\baccess_token中控服务器统一获取和刷新，其他业务逻辑服务器所使用的access_token均来自于该中控服务器。 微信获取access_token接口文档 接口调用说明前提调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。 12https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET 我这里使用了shell脚本获取access_token。123a_url=`curl https://api.weixin.qq.com/cgi-bin/token\\?grant_type\\=client_credential\\&amp;appid\\=xxx\\&amp;secret\\=xxxx`access_token=`echo $a_url|jq -r &apos;.access_token&apos;`echo $access_token tips: jq 是linux下shell进行json处理的工具，很强大。 可以使用这个地址测试该接口 使用网页调试工具调试该接口 获取jsapi_ticket获取jsapi_ticket需要用到上一步的access_token，轻重jsapi_ticket有效期7200秒，开发者必须在自己的服务全局缓存jsapi_ticket。123456789https请求方式: GET# https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;,&quot;ticket&quot;:&quot;bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA&quot;,&quot;expires_in&quot;:7200&#125; 我这里使用了shell脚本来获取，并且保存到文件。123t_url=`curl https://api.weixin.qq.com/cgi-bin/ticket/getticket\\?access_token\\=$access_token\\&amp;type\\=jsapi`ticket=`echo $t_url | jq -r &apos;.ticket&apos;`echo $ticket &gt; /opt/tomcat/darenweb_8087/webapps/wx/ticket.txt \b我这里\b为了方便使用了crontab定时器每两个小时同步一次access_token和ticket，在生产环境中最好根据expires_in过期时间进行同步。定时脚本如下：100 */2 * * * /bin/bash /server/scripts/get_wx_ticket.sh 至此完成了access_token和ticket的获取。 网页开发 通过js config接口注入权限验证配置12345678wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: &apos;&apos;, // 必填，公众号的唯一标识 timestamp: , // 必填，生成签名的时间戳 nonceStr: &apos;&apos;, // 必填，生成签名的随机串 signature: &apos;&apos;,// 必填，签名 jsApiList: [] // 必填，需要使用的JS接口列表&#125;); 所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用。在config之前需要对\bconfig所需参数进行签名，获取config方法网页端如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495function getWxTicket()&#123; $.ajax(&#123; // url: &quot;http://localhost:8080/aa/sign?originUrl=http://localhost:8080/login.html&quot;, url: &quot;http://xxxx/sign?originUrl=&quot;+window.location.href, type: &quot;GET&quot;, dataType: &apos;json&apos;,// crossDomain: true,// jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)// jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据 success: function (response) &#123; // alert(&quot;11111111&quot;); wxConfig = response; if (isDebug)&#123; // window.access_token = response.access_token; alert(wxConfig.timestamp); alert(wxConfig.nonce); alert(wxConfig.jsapi_ticket); &#125; Wx_config(); &#125; &#125;); &#125; function Wx_config() &#123; wx.ready(function () &#123; // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。 if (isDebug) &#123; alert(&quot;ready&quot;); &#125; //在微信网页端 隐藏不需要的功能按钮 wx.hideMenuItems(&#123; menuList: [&apos;menuItem:share:appMessage&apos;, &apos;menuItem:share:timeline&apos;, &apos;menuItem:share:qq&apos;, &apos;menuItem:share:weiboApp&apos;, &apos;menuItem:share:facebook&apos;, &apos;menuItem:share:QZone&apos;, &apos;menuItem:editTag&apos;, &apos;menuItem:delete&apos;, &apos;menuItem:copyUrl&apos;, &apos;menuItem:originPage&apos;, &apos;menuItem:openWithQQBrowser&apos;, &apos;menuItem:openWithSafari&apos;, &apos;menuItem:share:email&apos;, &apos;menuItem:favorite&apos;], // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3 success: function (res) &#123; &#125; &#125;); &#125;); /* * 注意： * 1. 所有的JS接口只能在公众号绑定的域名下调用，公众号开发者需要先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 * 2. 如果发现在 Android 不能分享自定义内容，请到官网下载最新的包覆盖安装，Android 自定义分享接口需升级至 6.0.2.58 版本及以上。 * 3. 完整 JS-SDK 文档地址：http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html */ wx.error(function (res) &#123; if (isDebug) &#123; alert(&quot;error&quot;); alert(res); &#125; &#125;); wx.config(&#123; debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: &apos;wx040138c462be4cb0&apos;, // 必填，公众号的唯一标识 timestamp: wxConfig.timestamp, // 必填，生成签名的时间戳 nonceStr: wxConfig.nonce, // 必填，生成签名的随机串 signature: wxConfig.signature,// 必填，签名 jsApiList: [ &apos;hideMenuItems&apos;, &apos;showMenuItems&apos;, &apos;hideAllNonBaseMenuItem&apos;, &apos;showAllNonBaseMenuItem&apos;, &apos;chooseImage&apos;, &apos;previewImage&apos;, &apos;uploadImage&apos;, &apos;downloadImage&apos;, &apos;getNetworkType&apos;, &apos;openLocation&apos;, &apos;getLocation&apos;, &apos;hideOptionMenu&apos;, &apos;showOptionMenu&apos;, &apos;closeWindow&apos;, &apos;scanQRCode&apos;, &apos;chooseWXPay&apos;, &apos;openProductSpecificView&apos;, &apos;addCard&apos;, &apos;chooseCard&apos;, &apos;openCard&apos;] // 必填，需要使用的JS接口列表 &#125;); &#125; 后台进行签名，签名算法如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * * @param originUrl 需要加密的URL * @param request * @param response * @return */ @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot;, &quot;null&quot; &#125;) @RequestMapping(value = &quot;/sign&quot;, method = RequestMethod.GET) @ResponseBody public HashMap getSignature(String originUrl , HttpServletRequest request, HttpServletResponse response) &#123; File file = new File(&quot;/opt/tomcat/darenweb_8087/webapps/wx/ticket.txt&quot;); StringBuilder ticket = new StringBuilder(); BufferedReader reader = null; try &#123; reader = new BufferedReader(new FileReader(file)); String tempString = null; int line = 1; // 一次读入一行，直到读入null为文件结束 while ((tempString = reader.readLine()) != null) &#123; // 显示行号 ticket.append(tempString); &#125; reader.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //2、获取Ticket String jsapi_ticket = ticket.toString(); //3、时间戳和随机字符串 String noncestr = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;).substring(0, 16);//随机字符串 String timestamp = String.valueOf(System.currentTimeMillis() / 1000);//时间戳 //4、获取url String url= originUrl; String string1 = &quot;jsapi_ticket=&quot; + jsapi_ticket + &quot;&amp;noncestr=&quot; + noncestr + &quot;&amp;timestamp=&quot; + timestamp + &quot;&amp;url=&quot; + url; MessageDigest crypt = null; try &#123; crypt = MessageDigest.getInstance(&quot;SHA-1&quot;); crypt.reset(); crypt.update(string1.getBytes(&quot;UTF-8&quot;)); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; String signature = byteToHex(crypt.digest()); HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;signature&quot;,signature); map.put(&quot;timestamp&quot;,timestamp); map.put(&quot;jsapi_ticket&quot;,jsapi_ticket); map.put(&quot;nonce&quot;,noncestr); return map; &#125; 至此完成了微信号网页开发的配置和授权。 参考资料 jQuery WeUI 官方 微信公众号官方","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"WeChat","slug":"技术开发/WeChat","permalink":"http://inicb.com/categories/技术开发/WeChat/"}],"tags":[{"name":"微信公众号","slug":"微信公众号","permalink":"http://inicb.com/tags/微信公众号/"}]},{"title":"Mac 使用Burp Suite进行手机端代理抓包","slug":"使用Burp-Suite进行手机端代理抓包","date":"2018-05-09T06:31:00.000Z","updated":"2018-05-10T02:00:27.724Z","comments":true,"path":"archives/c4bd228f.html","link":"","permalink":"http://inicb.com/archives/c4bd228f.html","excerpt":"在做开发的工程中经常会遇到需要进行抓包的情况，自己经常使用的有Fiddler和Charles，其中Fiddler用在Windows平台，在Mac电脑上因为没有Fiddler，只能用Charles，但是\bCharles还是收费的，\b没有找到破解版本。今天在使用sqlmap进行自动化注入的时候，发现一款在mac电脑上不错的工具，Burp Suite。 介绍\bBurp Suite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。在渗透测试中，我们使用Burp Suite将使得测试工作变得更加容易和方便，即使在不需要娴熟的技巧的情况下，只有我们熟悉Burp Suite的使用，也使得渗透测试工作变得轻松和高效。Burp Suite是由Java语言编写而成，而Java自身的跨平台性，使得软件的学习和使用更加方便。Burp Suite不像其他的自动化测试工具，它需要你手工的去配置一些参数，触发一些自动化流程，然后它才会开始工作。\b我这目前只用了代理抓取手机端接口功能。可以直接从官方网站下载免费版本使用：https://portswigger.net/ \b\b也可以直接下载破解版本，功能更多，可以保存工程，不用每次都配置。下载地址 链接: https://pan.baidu.com/s/1ohVEExupkhnBvs3Yo08krA 密码: 3svt在此感谢 https://github.com/Hehe-Zhc/BurpUnlimited 作者\b，让我们可以用上免费的\bBurp，原价$349.00啊 吓人。","text":"在做开发的工程中经常会遇到需要进行抓包的情况，自己经常使用的有Fiddler和Charles，其中Fiddler用在Windows平台，在Mac电脑上因为没有Fiddler，只能用Charles，但是\bCharles还是收费的，\b没有找到破解版本。今天在使用sqlmap进行自动化注入的时候，发现一款在mac电脑上不错的工具，Burp Suite。 介绍\bBurp Suite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。在渗透测试中，我们使用Burp Suite将使得测试工作变得更加容易和方便，即使在不需要娴熟的技巧的情况下，只有我们熟悉Burp Suite的使用，也使得渗透测试工作变得轻松和高效。Burp Suite是由Java语言编写而成，而Java自身的跨平台性，使得软件的学习和使用更加方便。Burp Suite不像其他的自动化测试工具，它需要你手工的去配置一些参数，触发一些自动化流程，然后它才会开始工作。\b我这目前只用了代理抓取手机端接口功能。可以直接从官方网站下载免费版本使用：https://portswigger.net/ \b\b也可以直接下载破解版本，功能更多，可以保存工程，不用每次都配置。下载地址 链接: https://pan.baidu.com/s/1ohVEExupkhnBvs3Yo08krA 密码: 3svt在此感谢 https://github.com/Hehe-Zhc/BurpUnlimited 作者\b，让我们可以用上免费的\bBurp，原价$349.00啊 吓人。 配置1.下载完成之后，直接解压缩\b下载文件，然后打开“BurpUnlimited.jar”即可。 Temporary project 创建一个临时工程。不会保存此工程的任何配置。 New project on disk 创建的工程保存到本地，会保存\b对此工程的配置。（免费版本没有此功能，破解版本包含） Open existing project 打开之前\b创建好的工程 2.选择相应的配置 Use Burp defaults 使用burp自带的默认配置 Use options saved with project 使用工程所包含的配置 load from configuration file点击“Start Burp”开始使用\bBurp 3.配置Burp监听手机端 最后在手机端设置wifi代理即可。\b 参考资料 Burp Suite 实战指南","categories":[],"tags":[]},{"title":"从《万历十五年》看企业文化和制度","slug":"从《万历十五年》看企业文化和制度","date":"2018-05-04T00:46:57.000Z","updated":"2018-05-09T07:45:05.722Z","comments":true,"path":"archives/f74614ff.html","link":"","permalink":"http://inicb.com/archives/f74614ff.html","excerpt":"","text":"之前看明朝那些事的时候，就耳闻过万历十五年这本书，最近有机会拜读黄仁宇的这本“大失败的总记录”，深感本书的深奥，自己知识和能力着实有限，尽自己最大努力从公司管理运营角度揣摩一下。 明朝官僚体系中的道德和法制的问题与企业文化和制度。 中国两千年来是以道德代替法制，至明代而极。以礼法约束从皇上到臣子再到底层平民，皇帝作为一国之君，是礼法的引导和表率，是不能逾越礼法的，所以9岁就登基的皇上在礼法面前也深感无力。 礼法从上到下约束着每一层的人。整个国家的运行是依靠“礼”来进行行为规范和约束，通过道德来管理国家，让整个文官精英团队有效的工作，来管理和控制国家。这就像是公司文化对每个人的影响一样，如果文化一旦形成，即使老板也要在这个庞然大物之下按照礼法行事，充当表率，员工认同文化，然后增强文化，通过归属感和统一战线来增加公司凝聚力。 那为什么明明是把道德发展到极致的明，道德治国发展到极致的时候反而问题更严重了呢？物极必反，忽视了体制上技术上的发展。而这就对英语公司制度的制定和遵守，例如薪酬制度，奖惩制度，加班制度，项目开发制度等一系列科学的管理方式。这就是西方的管理方式，私有制以及资本主义的管理方式。 因为明礼法根深蒂固，制度改革难以行之有效。官僚集团互相麻木，自我催眠，都是在既有思维和体系下行事。也许崇祯皇帝所说的“诸臣误我”是由其历史原因的。 在公司内不仅要通过公司文化、道德来教育员工，还要通过相关的制度来激励员工，文化是产生雷锋的土壤，而制度是能够激励更多雷锋的养分。 就像华为“不让雷锋吃亏”一样，完善制度，所有人都追求高效，把文化和制度结合起来，拧成一股绳，公司产生的效益才能更进一步。而不是让文化阻挡了我们改革的脚步。 最后，平淡的“万历十五年”如何造成几十年后明朝的覆灭的，又给我们怎样的教训。也许这一周是平淡的，和以前一样，太阳照常升起，但公司未来三到五年的发展也许就决定在这一周，这一天。","categories":[{"name":"生活","slug":"生活","permalink":"http://inicb.com/categories/生活/"}],"tags":[]},{"title":"为Hexo icarus添加版权说明","slug":"为hexo-icarus添加版权说明","date":"2018-05-03T07:55:48.000Z","updated":"2018-05-09T08:20:52.574Z","comments":true,"path":"archives/ead2b478.html","link":"","permalink":"http://inicb.com/archives/ead2b478.html","excerpt":"","text":"\b网上很多为hexo next主题添加版权说明的文章，但是几乎没找到怎么为icarus主题设置版权说明的文章，可见\b还是Next主题多啊。 下面介绍如何为icarus主题添加版权说明。 Icarus添加版权说明 修改blog目录下”/themes/icarus/_config.yml” 这个文件，在文件最后添加版权说明配置，如下: 1234567#版权信息copyright: enable: true # img: http://ostu98x74.bkt.clouddn.com/copyright/copyright.png #版权信息图片 site: http://www.inicb.com #版权信息所属网址 siteName: Ini&apos;s Blog #版权信息网站名字 siteAuthor: &apos;王建磊&apos; #版权归属人 修改icarus主题\b下的layout/common/article.ejs文件，修改如下部分 12345678910111213141516171819202122232425262728&lt;% if (!index) &#123; %&gt; &lt;%- partial(&apos;post/nav&apos;) %&gt;&lt;% &#125; %&gt;\b# 改为如下&lt;% if (!index) &#123; %&gt; &lt;div&gt; &lt;ul class=&quot;post-copyright&quot;&gt; &lt;li class=&quot;post-copyright-author&quot;&gt; &lt;strong&gt;本文作者：&lt;/strong&gt;&lt;%= theme.copyright.siteAuthor%&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;本文链接：&lt;/strong&gt; &lt;a href=&quot;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;发布时间：&lt;/strong&gt; &lt;a href=&quot;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&lt;%= post.date.format(&quot;YYYY年M月D日 - HH时MM分&quot;) %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-license&quot;&gt; &lt;strong&gt;版权声明： &lt;/strong&gt; 本博客所有文章除特别声明外，均采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！ &lt;/li&gt; &lt;/ul&gt; &lt;div&gt; &lt;%- partial(&apos;post/nav&apos;) %&gt;&lt;% &#125; %&gt; 为版权说明添加样式修改themes/icarus/source/css/_partial/article.styl 文件，在文件末尾添加如下样式。 1234567891011121314// Custom styles.//版权声明.post-copyright &#123; margin: 2em 0 0; padding: 0.5em 1em; border-left: 3px solid #FF1700; background-color: #F9F9F9; list-style: none;&#125;.post-copyright li &#123; //设置行高 line-height: 30px;&#125; 至此，完成了为icarus添加版权声明的功能。 参考资料 Hexo持续优化-在文章尾部添加版权声明信息 hexo进阶之自定义material主题添加赞赏功能，版权信息，Gitment评论模块","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"HEXO","slug":"技术开发/HEXO","permalink":"http://inicb.com/categories/技术开发/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://inicb.com/tags/HEXO/"},{"name":"ICARUS","slug":"ICARUS","permalink":"http://inicb.com/tags/ICARUS/"}]},{"title":"从一个代码服务器同步代码到另一个代码服务器","slug":"从一个代码服务器同步代码到另一个代码服务器","date":"2018-05-02T07:51:38.000Z","updated":"2018-05-04T02:44:05.188Z","comments":true,"path":"archives/a4db9902.html","link":"","permalink":"http://inicb.com/archives/a4db9902.html","excerpt":"","text":"\b最近因为工作需要，需要把源代码提交到甲方\bgit服务器上，因为没必要把每次的更新日志也提交到甲方服务器上，并且考虑每次提交\b都很琐碎麻烦，所以自己写了个自动化脚本来自动完成提交工作。如下1234567891011121314151617181920212223#!/bin/bash# 记录同步时间BAK_TIME=`date +%Y%m%d%H%M`echo &quot;开始同步android=================================start&quot;cd /Users/daren/source/cbsxf/dbuild_provincegit pullecho &quot;下载代码完成&quot;echo &quot;拷贝到甲方代码目录，忽略隐藏目录&quot;cp -R /Users/daren/source/cbsxf/dbuild_province/* /Users/daren/source/cbsxf/dbuild_province_unicom/echo &quot;拷贝代码完成&quot;cd /Users/daren/source/cbsxf/dbuild_province_unicomecho &quot;切换到甲方代码目录&quot;git add .git commit -m &quot;提交代码$BAK_TIME&quot;echo &quot;commit代码成功&quot;#git push origin mastergit push -u origin masterecho &quot;推送代码到服务器&quot;echo &quot;同步android结束=================================end&quot;","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"工具箱","slug":"技术开发/工具箱","permalink":"http://inicb.com/categories/技术开发/工具箱/"}],"tags":[]},{"title":"新时代e支部后台创作的故事 ","slug":"新时代e支部后台创作的故事","date":"2018-04-23T02:38:42.000Z","updated":"2018-05-09T07:44:56.354Z","comments":true,"path":"archives/fdfa2529.html","link":"","permalink":"http://inicb.com/archives/fdfa2529.html","excerpt":"新时代e支部大事记对于\b吉林省的广大党员来说，对“新时代e支部”App肯定不陌生，不过使用了这么长时间的新时代e支部，您知道e支部背后的故事吗？下面由小编为大家整理一下新时代e支部\b诞生记。 “新时代e支部”的诞生主要经历了两个阶段，从2017年1月1日到2018年3月11日为第一阶段，那时候叫“长白山先锋e支部”，2018年3月11日到现在是第二阶段，经吉林省委领导决定，正式上线“新时代e支部”。 2017年1月-2017年2月。“长白山先锋e支部”项目由吉林省委组织部发起，由吉林联通公司，吉林省达仁科技有限公司负责承建。在这段时间是主要是确认需求，\b规划建设内容，设计效果图，初步规划“长白山先锋e支部”建设方案。 2017年3月10日经过一个多月的研发和需求确认\b，完成了第一个安卓版本的上线，并且交付梅河口试用。 2017年4月20日苹果第一个版本研发完成，发布到苹果市场。 2017年4月28日苹果第一个企业版本研发完成，发布到梅河口试用。版本号码为1.0。 2017年5月15日在经过了历时三个月的驻地和封闭开发，经过了中间30余次的迭代发布，终于在5月15日完成了第一个正式全省版本的发布，版本号码为2.1.5。","text":"新时代e支部大事记对于\b吉林省的广大党员来说，对“新时代e支部”App肯定不陌生，不过使用了这么长时间的新时代e支部，您知道e支部背后的故事吗？下面由小编为大家整理一下新时代e支部\b诞生记。 “新时代e支部”的诞生主要经历了两个阶段，从2017年1月1日到2018年3月11日为第一阶段，那时候叫“长白山先锋e支部”，2018年3月11日到现在是第二阶段，经吉林省委领导决定，正式上线“新时代e支部”。 2017年1月-2017年2月。“长白山先锋e支部”项目由吉林省委组织部发起，由吉林联通公司，吉林省达仁科技有限公司负责承建。在这段时间是主要是确认需求，\b规划建设内容，设计效果图，初步规划“长白山先锋e支部”建设方案。 2017年3月10日经过一个多月的研发和需求确认\b，完成了第一个安卓版本的上线，并且交付梅河口试用。 2017年4月20日苹果第一个版本研发完成，发布到苹果市场。 2017年4月28日苹果第一个企业版本研发完成，发布到梅河口试用。版本号码为1.0。 2017年5月15日在经过了历时三个月的驻地和封闭开发，经过了中间30余次的迭代发布，终于在5月15日完成了第一个正式全省版本的发布，版本号码为2.1.5。 2017年5月24日正式修改W支部7大领域为12大领域，添加了行政村，社区，非公有制企业，社会组织，国有企业，高等院校(含大中专)，机关单位，中小学校(含幼儿园)，医疗卫生机构，科研院所，乡镇街道，其他领域。此时版本号码为2.2.0。 2017年6月6日添加\bW支部中视频监控功能。此时版本号码为2.2.0。此时版本号码为2.2.4。 2017年6月27日在发布厅中增加干部任免和干部公示功能。此时版本号码为2.3.1。 2017年8月7日添加两学一做考试模块，提供给全省党员检验学习的地方。此时版本号码为2.3.6。 2017年8月31日添加手机端维护支部信息\b模块，方便了广大农村党员没有电脑\b，无法编辑支部信息的问题。此时版本号码为2.3.7。 2017年9月从9月份开始正式开始了e支部积分系统的需求调研，系统设计。 2017年10月25日在梅河口版本和全省版本添加红色影视功能。此时版本为2.4.4。 2017年11月15日积分制系统经过了2月的反复迭代，最终于11月15日在梅河口进行积分制系统的试运行。此时梅河口版本号码为3.0.1。 2018年1月19日新版W支部\b\b领域主页面上线。全省版本号码为2.5.1。 2018年3月11日2018\b年3月11日 全省积分制管理系统正式上线\b。版本号码为2.5.3 2018年3月11日“新时代e支部”正式上线。版本号码为2.5.3。 2018年3月11日“新时代e支部” 党员会议室 正式上线。版本号码为2.5.3。 2018年3月19日新时代传习所上线，并且融合新时代传习所和新时代e支部。版本号码为2.5.5。 2018年3月21日新增通知公告功能，增加市州通知模块。 2018年4月2日新增“新时代传习所”宣讲员之家模块，版本号码为2.5.9。 “e支部”从创立之初到目前位置，总共跌打发布版本达百余次，支撑了全省9万个党支部、160万党员的日常使用，为全省9万多基层党组织和160万党员提供了掌上红色精神家园。 对于我们的技术团队您也一定很感兴趣吧，感谢他们所作出的努力和奉献。 创作团队 项目团队我们可爱的团队 可爱的支撑小姐姐主力研发工程师，与党结缘，\b进入了红色浪漫的世界 开发现场 自力更生，艰苦奋斗的精神 发布会现场2017/05/15 发布会现场","categories":[],"tags":[{"name":"新时代e支部","slug":"新时代e支部","permalink":"http://inicb.com/tags/新时代e支部/"}]},{"title":"使用FreeSSL生成免费SSL证书，并为Nginx配置Https访问","slug":"使用FreeSSL生成免费SSL证书，并为Nginx配置Https访问","date":"2018-04-20T02:50:14.000Z","updated":"2018-05-04T02:44:05.185Z","comments":true,"path":"archives/f19cae66.html","link":"","permalink":"http://inicb.com/archives/f19cae66.html","excerpt":"本文主要介绍了如何创建一个免费的并且被各大浏览器默认认可的ssl证书，并且介绍了如何用Nginx配置证书，以及重定向Http到Https。","text":"本文主要介绍了如何创建一个免费的并且被各大浏览器默认认可的ssl证书，并且介绍了如何用Nginx配置证书，以及重定向Http到Https。 FreeSSL免费SSL证书FreeSSL.org 是一个提供免费HTTPS证书申请的网站 ，目前支持通过这两家CA机构TrustAsia，Let’s Encrypt\b生成SSL证书。我们这里选择TrustAsia，创建一个一年期限的ssl证书。 输入对应的域名，选择Ca机构，点击“创建免费的SSL证书”输入邮箱地址1在证书快到期的时候，Freessl会发邮件提醒你。 选择证书类型，验证类型为“File”，CSR生成为“浏览器生成”（为了安全，最好是选择我有CSR），点击生成，会弹出如下界面在服务器项目根目录下新建.well-known/pki-validation/fileauth.txt文件，复制“201804190313215v2qzo2quee1emf9z180awofxk4ju12koqxbaw1d531n0jv030”到fileauth文件中，点击“点击验证”如果\bCA生成证书成功，直接下载下来就行。至此 完成ssl证书的创建。 配置Nginx支持Https把上一步生成的证书以及私钥上传到服务器上，然后配置Nginx支持https访问，如下：12345678910111213141516171819202122232425262728293031# vim /etc/nginx/nginx.conf添加支持https的serverserver &#123; listen 443 ssl; server_name localhost; root /data/blog; # root /usr/share/nginx/html; ssl_certificate &quot;/data/chain/full_chain.pem&quot;; ssl_certificate_key &quot;/data/chain/private.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; Http请求重定向到Https修改Nginx配置文件如下,在Http server中添加重定向语句：123456server&#123; listen 80 default_server; listen [::]:80 default_server; server_name _; rewrite ^(.*)$ https://$host$1 permanent; &#125; Freessl 相关 关于CSR生成的说明1、浏览器生成在浏览器支持 Web Cryptography 的情况下，我们默认使用浏览器根据用户的信息生成CSR文件（关于 Web Cryptography 的浏览器支持情况可点击 这里 了解详情）。 2、后端服务器生成在浏览器不支持CSR文件生成的时候，我们会根据用户所填的信息，在后端服务器生成一个CSR文件。 3、上传自己的CSR文件如果你有自己的CSR文件，并且想使用自己的CSR文件，那么可以点击上方表单中点击生成下方的文字，通过粘贴，使用自己的CSR文件。 关于域名验证的说明CA 需要对您是否拥有该域名进行验证，这样才能给您颁发证书。这里有多种验证方式，您可以采用对您较为方便的方式进行。在进行下一步的同时，你将同意 Lets Encrypt service agreement 或 TrustAsia。如果您的网站有防火墙，请对 66.133.109.36 开放。如果您收到 504 网关超时，无法连接等其它错误， 请刷新页面重试；如果您有自己的CSR文件，可上传CSR文件之后进行手动验证。1、手动验证（文件）CA 将通过访问特定 URL 地址来验证您是否有改域名的所有权。因此，您需要下载给顶的验证文件，并上传到您的服务器 2、手动验证（DNS）CA 将通过查询 DNS 的 TXT 记录来确定您对该域名的所有权。您只需要在域名管理平台将生成的 TXT 记录名与记录值添加到该域名下，等待大约 1 分钟即可验证成功 3、如果你有自己的CSR文件，可手动上传验证文件到您的域以验证所有权CA 将通过查询 DNS 的 TXT 记录来确定您对该域名的所有权。您只需要在域名管理平台将生成的 TXT 记录名与记录值添加到该域名下，等待大约 1 分钟即可验证成功 参考资料 https://freessl.org/ nginx配置http强制跳转https Nginx 配置 HTTPS 服务器","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"NGINX","slug":"技术开发/NGINX","permalink":"http://inicb.com/categories/技术开发/NGINX/"}],"tags":[{"name":"SSL","slug":"SSL","permalink":"http://inicb.com/tags/SSL/"},{"name":"HTTPS","slug":"HTTPS","permalink":"http://inicb.com/tags/HTTPS/"},{"name":"NGINX","slug":"NGINX","permalink":"http://inicb.com/tags/NGINX/"}]},{"title":"FastDFS Tracker及Storage节点添加及删除","slug":"FastDFS-Tracker及Storage节点添加及删除","date":"2018-04-19T00:10:26.000Z","updated":"2018-05-04T02:44:05.172Z","comments":true,"path":"archives/31b33e7a.html","link":"","permalink":"http://inicb.com/archives/31b33e7a.html","excerpt":"","text":"fastdfs七种状态1234567# FDFS_STORAGE_STATUS：INIT :初始化，尚未得到同步已有数据的源服务器# FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器# FDFS_STORAGE_STATUS：SYNCING :同步中# FDFS_STORAGE_STATUS：DELETED :已删除，该服务器从本组中摘除# FDFS_STORAGE_STATUS：OFFLINE :离线# FDFS_STORAGE_STATUS：ONLINE :在线，尚不能提供服务# FDFS_STORAGE_STATUS：ACTIVE :在线，可以提供服务 正常状态必须是ACTIVE12345fdfs_monitor /etc/fdfs/client.conf | grep ip_addr ip_addr = 192.168.1.120 ACTIVE ip_addr = 192.168.1.121 ACTIVE ip_addr = 192.168.1.122 ACTIVE 增加Storage节点（通过配置，自动加入）123456789# 安装Storage并配置mod_fastdfs.conf及storage.conf，设置fdfs_storaged及nginx自启动# vim /etc/fdfs/storage.conftracker_server=192.168.1:22122# 启动新加的storage节点（会自动同步相同group的内容）fdfs_storaged /etc/fdfs/storage.conf#vim /etc/fdfs/mod_fastdfs.conf# 在track机器上执行执行fdfs_monitor /etc/fdfs/client.conf查看集群同步情况（会看到新增的storage节点） 删除Storage节点及删除后重新加入（通过fdfs_monitor删除）1234567# 停止某个storage节点/etc/init.d/fdfs_storage stopfdfs_monitor /etc/fdfs/client.conf delete group1 192.168.1.121# 查看集群情况 fdfs_monitor /etc/fdfs/client.conf 可以到对应的storage节点状态为DELETEDfdfs_monitor /etc/fdfs/client.conf 重新加入storage节点12345# 启动被删除的storage节点，查看集群状态，一开始会是 OFFILINE状态fdfs_monitor /etc/fdfs/client.conf# 过一会儿再查看集群状态，显示为ACTIVE状态fdfs_monitor /etc/fdfs/client.conf 增加Tracker节点1234567# 在所有storage节点的storage.conf, mod_fastdfs.conf 中配置多条tracker_server记录tracker_server=192.168.1.120:22122tracker_server=192.168.1.125:22122# 在client.conf中也配置多条tracker_server记录执行 fdfs_monitor /etc/fdfs/client.conf 查看集群情况，可以看到tracker_serve_count变为2另外可以指定tracker，进行集群监控 fdfs_monitor /etc/fdfs/client.conf -h 192.168.1.120 list 删除Tracker节点1去掉配置文件中不需要的tracker_server的记录，停止对应服务器上的tracker进程 参考资料 http://www.cnblogs.com/sunmmi/articles/7209308.html","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"分布式","slug":"技术开发/分布式","permalink":"http://inicb.com/categories/技术开发/分布式/"}],"tags":[{"name":"FastDFS","slug":"FastDFS","permalink":"http://inicb.com/tags/FastDFS/"}]},{"title":"Hexo由next主题切换为Icarus主题","slug":"Hexo由next主题切换为Icarus主题","date":"2018-04-18T07:27:27.000Z","updated":"2018-05-04T02:44:05.167Z","comments":true,"path":"archives/f056a4d4.html","link":"","permalink":"http://inicb.com/archives/f056a4d4.html","excerpt":"","text":"见如下链接： \bhttps://blog.peiyingchi.com/2017/03/10/hexo-icarus-settings/","categories":[],"tags":[]},{"title":"孩子-纪伯伦","slug":"孩子-纪伯伦","date":"2018-04-18T02:18:02.000Z","updated":"2018-05-04T02:44:05.170Z","comments":true,"path":"archives/71762251.html","link":"","permalink":"http://inicb.com/archives/71762251.html","excerpt":"","text":"你的儿女，其实并不是你的儿女他们的诞生源自于你的情欲以及自身对于生命的渴望他们借助你来到这个世界，却非为了你而来他们在你身旁，然而并不是你的私人物品你可以给予他们的是你的爱，不是你的想法你可以庇护的是他们的身体，不是他们的灵魂因为他们的灵魂属于明天属于你做梦也无法到达的明天你可以拼尽全力，变得像他们一样你不能绞尽脑汁，让他们变得和你一样因为生命不会后退，时间也不在过去停留你是弓，儿女是箭弓箭手望着未来之路上的箭靶他用尽力气将你拉开，使他的箭射得又快又远所以怀着快乐的心情，在弓箭手的手中弯曲吧因为他爱一路飞翔的箭，也爱无比稳定的弓 ——————《孩子》 纪伯伦","categories":[{"name":"生活","slug":"生活","permalink":"http://inicb.com/categories/生活/"}],"tags":[]},{"title":"Nginx配置proxy_pass转发的/路径问题","slug":"Nginx配置proxy-pass转发的-路径问题","date":"2018-04-18T00:52:40.000Z","updated":"2018-05-04T02:44:05.169Z","comments":true,"path":"archives/82fd99c.html","link":"","permalink":"http://inicb.com/archives/82fd99c.html","excerpt":"","text":"在日常使用Nginx过程中，经常会遇到对路径进行映射的问题，有时候会为路径添加前缀，例如访问 http://localhost:80/file/group1/M00/00/00/zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO.png,\b\b \b通过Nginx映射之后，其实访问的是 http://localhost:80/group1/M00/00/00/zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO.png, \b对file路径进行了重定向。 实现方法如下： 在Nginx中配置proxy_pass时，如果是按照^~匹配路径时,要注意proxy_pass后的url最后的/,当加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;如果没有/，则会把匹配的路径部分也给代理走。 location ^~ /static_js/{proxy_cache js_cache;proxy_set_header Host js.test.com;proxy_pass http://js.test.com/;} 如上面的配置，如果请求的url是http://servername/static_js/test.html会被代理成http://js.test.com/test.html 而如果这么配置 location ^~ /static_js/{proxy_cache js_cache;proxy_set_header Host js.test.com;proxy_pass http://js.test.com;} 则会被代理到http://js.test.com/static_js/test.htm 参考资料：http://blog.51cto.com/wangwei007/1103734","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"NGINX","slug":"技术开发/NGINX","permalink":"http://inicb.com/categories/技术开发/NGINX/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://inicb.com/tags/Nginx/"}]},{"title":"分布式文件系统FastDFS部署搭建","slug":"分布式文件系统FastDFS部署使用","date":"2018-04-11T08:27:20.000Z","updated":"2018-05-04T02:44:05.166Z","comments":true,"path":"archives/b182ce5c.html","link":"","permalink":"http://inicb.com/archives/b182ce5c.html","excerpt":"简介 FastDFS是一款类Google FS的开源分布式文件系统，它用纯C语言实现，支持Linux、FreeBSD、AIX等UNIX系统。它只能通过专有API对文件进行存取访问，不支持POSIX接口方式，不能mount使用。准确地讲，Google FS以及FastDFS、mogileFS、HDFS、TFS等类Google FS都不是系统级的分布式文件系统，而是应用级的分布式文件存储服务。 FastDFS的架构 下图显示的是FastDFS的系统架构。 图1 FastDFS的系统架构","text":"简介 FastDFS是一款类Google FS的开源分布式文件系统，它用纯C语言实现，支持Linux、FreeBSD、AIX等UNIX系统。它只能通过专有API对文件进行存取访问，不支持POSIX接口方式，不能mount使用。准确地讲，Google FS以及FastDFS、mogileFS、HDFS、TFS等类Google FS都不是系统级的分布式文件系统，而是应用级的分布式文件存储服务。 FastDFS的架构 下图显示的是FastDFS的系统架构。 图1 FastDFS的系统架构 从图1可以看出，Tracker server之间相互独立，不存在直接联系。客户端和Storage server 主动 连接Tracker server。包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。Storage server会连接集群中所有的Tracker server，向他们报告自己的状态。Storage server启动一个单独的线程来完成对一台Tracker server的连接和定时报告。需要说明的是，一个组包含的Storage server不是通过配置文件设定的，而是通过Tracker server获取到的。不同组的Storage server之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步。 Storage server采用binlog文件记录文件上传、删除等更新操作。binlog中只记录文件名，不记录文件内容。 文件同步只在同组内的Storage server之间进行，采用push方式，即源头服务器同步给目标服务器。只有源头数据才需要同步，备份数据并不需要再次同步，否则就构成环路了。有个例外，就是新增加一台Storage server时，由已有的一台Storage server将已有的所有数据（包括源头数据和备份数据）同步给该新增服务器。 Storage server中由专门的线程根据binlog进行文件同步。为了最大程度地避免相互影响以及出于系统简洁性考虑，Storage server对组内除自己以外的每台服务器都会启动一个线程来进行文件同步。 文件同步采用增量同步方式，系统记录已同步的位置（binlog文件偏移量）到标识文件中。标识文件名格式：{dest storage IP}_{port}.mark，例如：192.168.1.14_23000.mark。 文件上传和下载的交互过程接下来我们一起看一下文件上传和下载的交互过程。文件上传和下载流程分别如图2、图3所示。文件上传流程的步骤如下： 使用fastdfs上传文件 Client询问Tracker server上传到的Storage server； Tracker server返回一台可用的Storage server，返回的数据为该Storage server的IP地址和端口； Client直接和该Storage server建立连接，进行文件上传，Storage server返回新生成的文件ID，文件上传结束。 使用Fastdfs下载文件 Client询问Tracker server可以下载指定文件的Storage server，参数为文件ID（包含组名和文件名）； Tracker server返回一台可用的Storage server； Client直接和该Storage server建立连接，完成文件下载。 搭建Fastdfs环境这里默认关闭了防火墙，并且开启了tracker和storage所需要的端口。tracker默认端口为22122，Storage默认端口为23000 这里我用了两台机器进行搭建192.168.1.120和192.168.1.121，用与搭建1个tracker和2个storage。其中tracker在120上，Storage搭建在120和121上，并且为同一分组。 192.168.1.120 nginx + Tracker + Storage1 192.168.1.121 Nginx + Storage2 下面开始搭建： 首先在120机器上进行安装（Tracker Server） 安装libfastcommongit下载地址：https://github.com/happyfish100/fastdfs.git解压缩到/data/libfastcommon-master，进入libfastcommon-master，执行12./make.sh./make.sh install 确认make没有错误后，执行安装，64位系统默认会复制到/usr/lib64下。这时候检查/usr/lib/libfastcommon.so是否存在，如果不存在需要设置环境变量或者创建软链接1ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so 安装Fastdfs下载 FastDFS 源程序，git下载地址：https://github.com/happyfish100/fastdfs.git下载之后解压缩到/data/fastdfs-master，然后进入此目录，执行123./make.sh./make.sh install 确认make没有错误后，执行安装，默认会安装到/usr/bin中，并在/etc/fdfs中添加三个配置文件。 修改配置文件默认的配置文件安装到/etc/fdfs目录中，如下： storage.conf.sample Storage的配置文件样例 tracker.conf.sample Tracker的配置文件样例 client.conf.sample Fastdfs客户端的配置文件样例。 tracker.conf修改首先重命名tracker.conf.sample为tracker.conf，修改其中如下：1base_path=/data/fastdfs/tracker #用于存放日志。 注意：确保/data/fastdfs/tracker目录存在 storage.conf修改首先重命名storage.conf.sample为storage.conf，修改其中如下：123base_path=/data/fastdfs/storage #用于存放日志。store_path0=/data/fastdfs/storage #存放数据，若不设置默认为前面那个。tracker_server=192.168.1.120:22122 #指定tracker服务器地址。不能是127.0.0.1 注意：确保/data/fastdfs/storage目录存在 client.conf修改首先重命名storage.conf.sample为storage.conf，修改其中如下：12base_path=/data/fastdfs/client #用于存放日志。tracker_server=192.168.1.120:22122 #指定tracker服务器地址。 启动Tracker和Storage12/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf/usr/bin/fdfs_storaged /etc/fdfs/storage.conf 检查进程,确认是否启动1234# ps -ef | grep fdfsroot 5980 1 0 19:24 ? 00:00:00 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.confroot 6011 1 12 19:24 ? 00:00:00 /usr/bin/fdfs_storaged /etc/fdfs/storage.confroot 6021 5958 0 19:24 pts/0 00:00:00 grep --color=auto fdfs 表示启动ok了，若有错误，可以在/usr/fastdfs/tracker/logs 目录下检查日志。 上传、删除测试 上传文件使用自带的fdfs_test来测试，使用格式如下：12345678910111213# fdfs_testThis is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.Usage: fdfs_test &lt;config_file&gt; &lt;operation&gt; operation: upload, download, getmeta, setmeta, delete and query_servers 使用以下命令上传文件1fdfs_test /etc/fdfs/client.conf upload /data/test.jpeg 输入结果如下：1234567891011121314151617181920212223242526272829This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-13 22:07:03] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: server 1. group_name=, ip_addr=192.168.1.120, port=23000group_name=group1, ip_addr=192.168.1.120, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpegsource ip address: 192.168.1.120file timestamp=2018-04-13 22:07:03file size=165085file crc32=909197101example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpegstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085_big.jpegsource ip address: 192.168.1.120file timestamp=2018-04-13 22:07:03file size=165085file crc32=909197101example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085_big.jpeg 可以看到，上传ok了，这里会生成两个文件，这是fastdfs的主/从文件特性，以后再介绍。example file url是不能在浏览器中直接打开的，除非配合nginx使用，以后再介绍。 删除文件1fdfs_delete_file /etc/fdfs/client.conf group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpeg 至此，我们就已经配置好了120上的 Tracker 和 Storage。 在121上部署 Storage同样的在121服务器上，按照以上步骤进行fastdfs安装，配置，启动。在121上只需要配置和启动 Storage 就行。其中121上的 Storage 配置文件 /etc/fastdfs/storage.conf 中的 group_name设为group1，于120上的 Storage 相同。 在启动之后使用一下命令查看两个 Storage 是否启动成功，显示以下表示同一个group的两个 Storage 都已经启动成功，并且注册到了 Tracker 服务器上。。1234# fdfs_monitor /etc/fdfs/client.conf | grep ip_addr ip_addr = 192.168.1.120 ACTIVE ip_addr = 192.168.1.121 ACTIVE 这时候我们再使用以下命令上传一个文件，会发现有两个 Storage 可用。1fdfs_test /etc/fdfs/client.conf upload /data/1.png 显示如下：123456789101112131415161718192021222324252627282930This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-16 17:04:59] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: &lt;font color=&apos;red&apos;&gt;server 1. group_name=, ip_addr=192.168.1.120, port=23000&lt;/font&gt; server 2. group_name=, ip_addr=192.168.1.121, port=23000group_name=group1, ip_addr=192.168.1.121, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014.pngsource ip address: 192.168.1.121file timestamp=2018-04-16 17:04:58file size=2118file crc32=2538485301example file url: http://192.168.1.121/group1/M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014.pngstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014_big.pngsource ip address: 192.168.1.121file timestamp=2018-04-16 17:04:58file size=2118file crc32=2538485301example file url: http://192.168.1.121/group1/M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014_big.png 默认fastdfs会选择一台机器作为存储，文件上传完毕后，会自动同步到别的 Storage. 到此位置，我们部署了两台位于同一 group的 Storage。 部署Nginx+fastDFS上面我们已经完成了 Tracker 和 Storage 的部署和配置，但是上传到 Storage 的文件还没办法访问，并且文件在同步的过程中，也会出现未同步完成的情况，所以需要配置Nginx。 Nginx安装fastDFS模块，主要是安装在fastDFS，storage存储服务器上，而不是tracker和client上。 这里主要是安装到120，121上。 目的实际是为了，当输入类似http://192.168.1.120/group1/M00/00/00/wKgCbFem0l2ALSbFAAEYXfRAMkc536.pngURL地址，其中192.168.1.120 是一个storage服务器。能够通过nginx的web服务功能，直接返回图片。 注意：全部安装条件在确保之前的fastDFS 的Tracker和storage和client可以正常使用 下载fastdfs-nginx-module下载地址：https://github.com/happyfish100/fastdfs-nginx-module12unzip fastdfs-nginx-module-master.zipcd fastdfs-nginx-module-master 会发现里面有个INSTALL 和 src目录。这个不需要make而是需要重新编译一下storage的Nginx模块 安装和编译Nginx 并添加fastDFS模块1234cd nginx-1.10.1/./configure --prefix=/usr/local/nginx --add-module=/data/fastdfs-nginx-module-master/src/makemake install 其中fastdfs-nginx-module-master是刚才解压的fastdfs模块的绝对路径，就是在编译nginx时候，连同这个模块一起编译。如果在编译安装的时候报一下\b错误，说明需要安装\b相应的library1234./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option. 执行以下命令进行安装：1yum -y install pcre-devel openssl openssl-devel 然后\b重新编译安装。 fastdfs-nginx-module 配置文件将fastdfs-nginx-module/src/mod_fastdfs.conf 拷贝到/etc/fdfs/下1cp /data/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs/ 修改mod_fastdfs.conf，为如下：123456789101112131415161718# 保存日志目录,跟storage.conf一致即可base_path=/data/fastdfs/storage/tracker_server=192.168.1.120:22122 #tracker服务器的IP地址以及端口号,确保跟storage.conf一致即可storage_server_port=23000 #storage服务器的端口号，确保跟storage.conf一致即可group_name=group1 #当前服务器的group名，确保跟storage.conf一致即可url_have_group_name = true #文件url中是否有group名，这个最好设置为true，这样方便nginx服务器解析store_path_count=1 #存储路径个数，需要和store_path个数匹配store_path0=/usr/fastdfs/fastdfs0 #存储路径,跟storage.conf一致即可group_count = 1 #设置组的个数[group1]group_name=group1storage_server_port=23000store_path_count=1store_path0=/usr/fastdfs/fastdfs0#如果group_count =2 ，那就再配置一个 在121上配置nginx这里把120作为负载均衡点，所有的文件访问都是访问120上，然后通过nginx 转发。1vim /usr/local/nginx/conf/nginx.conf 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location ~ /group1/M00 &#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 120 上配置nginx1vim /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; upstream fdfs_group1 &#123; server 192.168.1.120:8080 weight=1 max_fails=2 fail_timeout=30s; #server 192.168.1.121 weight=1 max_fails=2 fail_timeout=30s; &#125; server &#123; listen 80; server_name localhost; location /group1/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; &#125; #其他配置 location / &#123; root html; index index.html index.htm; &#125; &#125; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location /group1/M00&#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 启动Nginx1# /usr/local/nginx/bin/nginx 观察/usr/local/nginx/logs/errors.log 是否有ERROR存在,如果有类似如下错误:1234ERROR - file: ini_file_reader.c, line: 315, include file &quot;http.conf&quot; not exists, line: &quot;#include http.conf&quot;ERROR - file: /root/Open_Package/fastdfs-nginx-module/src/common.c, line: 155, load conf file &quot;/etc/fdfs/mod_fastdfs.conf&quot; fail, ret code: 22016/08/06 23:51:13 [alert] 12734#0: worker process 12735 exited with fatal code 2 and cannot be respawned 类似这种错误会导致nginx-worker启动失败，致使nginx无法提供web服务。表示/etc/fdfs/下缺少http.conf 和mime.types文件从fastdfs-master/conf/http.conf 拷贝到/etc/fdfs/下 从nginx-1.12.2/conf/mime.types 拷贝到/etc/fdfs/下。12cp /data/fastdfs-master/conf/http.conf /etc/fdfs/cp /data/nginx-1.12.2/conf/mime.types /etc/fdfs/ 测试最后通过上传文件完成测试，如下：1fdfs_test /etc/fdfs/client.conf upload /data/test.jpeg 123456789101112131415161718192021222324252627282930This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-16 18:30:45] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: server 1. group_name=, ip_addr=192.168.1.120, port=23000 server 2. group_name=, ip_addr=192.168.1.121, port=23000group_name=group1, ip_addr=192.168.1.120, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpegsource ip address: 192.168.1.120file timestamp=2018-04-16 18:30:45file size=78394file crc32=2720840143example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpegstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852_big.jpegsource ip address: 192.168.1.120file timestamp=2018-04-16 18:30:45file size=78394file crc32=2720840143example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852_big.jpeg 表示文件上传成功，通过浏览器访问http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpeg看到图片显示出来，表示storage已经成功配置nginx服务。如图所示： 完成搭建。 配置第二个group新增一台机器，ip为192.168.1.122，按照以上步骤在122机器上安装 libfastcommon, Storage,fastdfs-nginx-module-master,Nginx。 配置Storage按照第一台Storage配置文件配置/etc/fdfs/storage.conf1vim /etc/fdfs/storage.conf 修改group_name为group21group_name=group2 然后启动Storage。在120上查看\b是否已经连接到tracker上。12345# fdfs_monitor /etc/fdfs/client.conf | grep ip_addrip_addr = 192.168.1.120 ACTIVEip_addr = 192.168.1.121 ACTIVEip_addr = 192.168.1.122 ACTIVE 配置Nginx\b参照121机器的nginx配置 配置访问120上的Nginx如下，添加group2的访问123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; upstream fdfs_group2 &#123; server 192.168.1.122 weight=1 max_fails=2 fail_timeout=30s; &#125; upstream fdfs_group1 &#123; server 192.168.1.120:8080 weight=1 max_fails=2 fail_timeout=30s; server 192.168.1.121 weight=1 max_fails=2 fail_timeout=30s; &#125; server &#123; listen 80; server_name localhost; location /group2/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group2; expires 30d; &#125; location /group1/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; &#125; #其他配置 location / &#123; root html; index index.html index.htm; &#125; &#125; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location /group1/M00&#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 通过上传文件测试以及通过nginx访问进行测试。 完成多group配置。 后记后来发现有篇博文写的也是很仔细，推荐大家也看一下： 分布式文件系统FastDFS实践 https://t.hao0.me/storage/2016/05/10/fastdfs-practice.html 常见问题Storage WAIT_SYNC 问题正常状态的 Storage 为ACTIVE状态，但有时 Storage 会变为WAIT_SYNC，状态，并且一直不再变化。网上一般是这样处理的，123456#从集群中删除fdfs_monitor /etc/fdfs/client.conf delete group1 10.120.151.114#在114服务器中，删除数据文件夹rm -rf /home/storage1/fastdfs/data#重启114节点fdfs_storaged /etc/fdfs/storage.conf 但是如果同步的文件很多，这样会耗时，一般只需要从集群中删除，然后在重启被删除的 Storage 即可。 参考资料https://aceld.gitbooks.io/project-d-storage/content/12_fastdfsan_zhuang.htmlhttps://blog.csdn.net/pzw_0612/article/details/52610328https://t.hao0.me/storage/2016/05/10/fastdfs-practice.html","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"分布式","slug":"技术开发/分布式","permalink":"http://inicb.com/categories/技术开发/分布式/"}],"tags":[]},{"title":"CentOs7 修改网卡名字为eth0以及修改静态ip","slug":"CentOs7-修改网卡名字为eth0以及修改静态ip","date":"2018-04-04T06:13:06.000Z","updated":"2018-05-04T02:44:05.164Z","comments":true,"path":"archives/a7be2108.html","link":"","permalink":"http://inicb.com/archives/a7be2108.html","excerpt":"修改网卡名称为eth0 在centos7之后，系统网卡的默认名称由以往的Ethx改成了Enox，下面介绍如何将code Centos7 的网卡名称改为Ethx的方法。 首先修改“/etc/sysconfig/grub”文件 1vim /etc/sysconfig/grub 内容大概是这样 12345678GRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=savedGRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;#GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 其中有一行是GRUB_CMDLINE_LINUX，在这行结尾的引号前面加上这句 1net.ifnames=0 biosdevname=0 修改完成后这行内容为 1GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;","text":"修改网卡名称为eth0 在centos7之后，系统网卡的默认名称由以往的Ethx改成了Enox，下面介绍如何将code Centos7 的网卡名称改为Ethx的方法。 首先修改“/etc/sysconfig/grub”文件 1vim /etc/sysconfig/grub 内容大概是这样 12345678GRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=savedGRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;#GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 其中有一行是GRUB_CMDLINE_LINUX，在这行结尾的引号前面加上这句 1net.ifnames=0 biosdevname=0 修改完成后这行内容为 1GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot; 然后用 grub2-mkconfig 命令重新建立 GRUB 的设定值 1grub2-mkconfig -o /boot/grub2/grub.cfg 接着把Eno网卡的名称改为Eth0，如下： 1mv /etc/sysconfig/network-scripts/ifcfg-eno16777736 /etc/sysconfig/network-scripts/ifcfg-eth0 修改网卡名称，并且设置为静态IP 接着编辑/etc/sysconfig/network-scripts/ifcfg-eth0 文件，修改为如下，同时设置为静态ip： 1234567891011121314TYPE=EthernetBOOTPROTO=static //设置为静态IPDEFROUTE=yesPEERDNS=yesPEERROUTES=yesIPV4_FAILURE_FATAL=noIPADDR=192.168.1.120 //ip 地址GATEWAY=192.168.1.1 //网关NETMASK=255.255.255.0 //子网掩码DNS1=8.8.8.8 //DNSNAME=eth0 //网卡名称UUID=bef554bc-0bc9-4234-a896-2c46da01a923DEVICE=eth0 //设备名称ONBOOT=yes //开机自动启动 最后记得重启系统，使配置生效。 参考资料https://www.phpini.com/linux/centos-7-network-interface-name https://blog.csdn.net/johnnycode/article/details/40624403 http://blog.51cto.com/mannerwang/1852712 http://blog.51cto.com/bguncle/957315","categories":[],"tags":[]},{"title":"xshell端口转发，plsql连接远程oracle","slug":"xshell端口转发，plsql连接远程oracle","date":"2018-04-03T01:25:19.000Z","updated":"2018-05-04T02:44:05.163Z","comments":true,"path":"archives/1712872b.html","link":"","permalink":"http://inicb.com/archives/1712872b.html","excerpt":"","text":"","categories":[],"tags":[]},{"title":"IntelliJ IDEA 2017 注册码","slug":"IntelliJ-IDEA-2017-注册码","date":"2018-03-22T01:12:12.000Z","updated":"2018-05-04T02:44:05.162Z","comments":true,"path":"archives/95920696.html","link":"","permalink":"http://inicb.com/archives/95920696.html","excerpt":"","text":"Intellij Idea 2017注册码 Mac电脑修改idea 2017注册码方式如下： 修改host文件1sudo vim /private/etc/hosts 在host文件最下面添加如下配置 10.0.0.0 account.jetbrains.com 修改idea 2017注册码为如下1EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"开发工具","slug":"技术开发/开发工具","permalink":"http://inicb.com/categories/技术开发/开发工具/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://inicb.com/tags/idea/"}]},{"title":"华为手机打开log日志的方法","slug":"华为手机打开log日志的方法","date":"2018-03-21T01:07:02.000Z","updated":"2018-05-04T02:44:05.160Z","comments":true,"path":"archives/63b4e8a0.html","link":"","permalink":"http://inicb.com/archives/63b4e8a0.html","excerpt":"","text":"华为 sd 手机默认关闭了ap日志，在开发过程中很不方便。所以需要我们打开app日志，方便调试。 进入拨号界面输入：1*#*#2846579#*#* 依次选择1工程菜单---后台设置----LOG设置---LOG开关 点击打开，完事。","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"ANDROID","slug":"技术开发/ANDROID","permalink":"http://inicb.com/categories/技术开发/ANDROID/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://inicb.com/tags/Android/"},{"name":"Log","slug":"Log","permalink":"http://inicb.com/tags/Log/"}]},{"title":"使用SSH隧道建立与堡垒机内部机器的连接","slug":"使用SSH隧道建立与堡垒机内部机器的连接","date":"2018-03-20T06:10:55.000Z","updated":"2018-05-04T02:44:05.158Z","comments":true,"path":"archives/769b139d.html","link":"","permalink":"http://inicb.com/archives/769b139d.html","excerpt":"在实际项目运维过程中，一般的服务器为了保证安全，都需要通过前置机或者堡垒机的方式才能访问到堡垒机后面的机器，而这给我们的开发部署工作带来很多不便，使用ssh隧道可以帮我们减少很多麻烦。 SSH/plink命令的基本资料：首先，认识下这三个非常强大的命令：1231、ssh -C -f -N -g -L listen_port:DST_Host:DST_port user@Tunnel_Host2、ssh -C -f -N -g -R listen_port:DST_Host:DST_port user@Tunnel_Host3、ssh -C -f -N -g -D listen_port user@Tunnel_Host","text":"在实际项目运维过程中，一般的服务器为了保证安全，都需要通过前置机或者堡垒机的方式才能访问到堡垒机后面的机器，而这给我们的开发部署工作带来很多不便，使用ssh隧道可以帮我们减少很多麻烦。 SSH/plink命令的基本资料：首先，认识下这三个非常强大的命令：1231、ssh -C -f -N -g -L listen_port:DST_Host:DST_port user@Tunnel_Host2、ssh -C -f -N -g -R listen_port:DST_Host:DST_port user@Tunnel_Host3、ssh -C -f -N -g -D listen_port user@Tunnel_Host 相关参数的解释：-f Fork into background after authentication.后台认证用户/密码，通常和-N连用，不用登录到远程主机。 -L port:host:hostport将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport -R port:host:hostport将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport -D port指定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发. -C Enable compression.压缩数据传输。 -N Do not execute a shell or command.不执行脚本或命令，通常与-f连用。 -g Allow remote hosts to connect to forwarded ports.在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。注：这个参数我在实践中似乎始终不起作用。 以上摘录自：http://chenweiguang.blogspot.com/2009/03/ssh.html 使用场景-建立本地SSH隧道例子这里我们主要使用的是第一个场景。在我们计划建立一个本地SSH隧道之前，我们必须清楚下面这些数据：123中间服务器d的IP地址（220.122.122.122）要访问服务器c的IP地址 （内网服务地址10.1.8.1）要访问服务器c的端口 （ssh服务对应端口 22） 以前我们要访问10.1.8.1，必须先通过ssh 连接到220.122.122.122，通过220.122.122.122这台服务器 使用ssh去连接10.1.8.1这台服务器。现在，有了隧道我们可以直接通过ssh 连接10.1.8.1这台服务器。 1231.ssh -C -f -N -g -L 10016:10.1.8.1:22 root@220.122.122.122 -p 210002.ssh root@localhost -p 10016 # 现在通过ssh访问本地10016端口，就能连接10.1.8.1的22端口了 1中 10016是本地监听端口，10.1.8.1是目标服务器，22是目标服务器对应的ssh端口，root@220.122.122.122 -p 21000是中间服务器对应的用户和访问端口。 这里我们用到了SSH客户端的三个参数，下面我们一一做出解释： -N 告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发-f 告诉SSH客户端在后台运行-L 做本地映射端口，被冒号分割的三个部分含义分别是需要使用的本地端口号需要访问的目标机器IP地址（IP: 10.1.8.1）需要访问的目标机器端口（端口: 22)最后一个参数是我们用来建立隧道的中间机器的IP地址以及访问用户和端口(IP: 123.123.123.123)我们再重复一下-L参数的行为。-L X:Y:Z的含义是，将IP为Y的机器的Z端口通过中间服务器映射到本地机器的X端口。 参考资料 http://blog.51cto.com/chenxy/1676772 http://www.zsythink.net/archives/2450 http://blog.creke.net/722.html https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/ http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"LINUX","slug":"技术开发/LINUX","permalink":"http://inicb.com/categories/技术开发/LINUX/"}],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://inicb.com/tags/SSH/"},{"name":"隧道","slug":"隧道","permalink":"http://inicb.com/tags/隧道/"}]},{"title":"常用网站工具箱集合","slug":"常用网站工具箱集合","date":"2018-03-15T08:23:50.000Z","updated":"2018-05-11T08:31:31.726Z","comments":true,"path":"archives/62b50406.html","link":"","permalink":"http://inicb.com/archives/62b50406.html","excerpt":"","text":"图片 pexels https://www.pexels.com/ https://unsplash.com/ https://foter.com/ http://www.iconfont.cn/ 生成favicon图片的网站 https://realfavicongenerator.net 存储图片平台 https://cloudinary.com/ Nginx nginx配置location总结及rewrite规则写法 http://seanlook.com/2015/05/17/nginx-location-rewrite/ 重疾： 失能收入补偿，不要指望能把终生重疾险能把一辈子医疗费用报销了，他是为了失能收入补偿，优先考虑退休前，如果预算比较宽松，可以考虑终身。保额比时间更重要。一年一买的保险只能作为补充受益人 一部分父母，一部分孩子双支柱做5倍保额重疾是一次性\b赔付。重疾险\b保额年收入的三倍货币有时间价值医疗险 先花钱后报销 倒入表 imp ccstyj/ccstyj@orcl file=/data/wjl/tbl_mobile.dmp full=y","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"工具箱","slug":"技术开发/工具箱","permalink":"http://inicb.com/categories/技术开发/工具箱/"}],"tags":[]},{"title":"部署Hexo博客到VPS","slug":"部署Hexo博客到VPS","date":"2018-03-15T02:29:59.000Z","updated":"2018-05-04T02:44:05.211Z","comments":true,"path":"archives/efbdc9cb.html","link":"","permalink":"http://inicb.com/archives/efbdc9cb.html","excerpt":"前言在本地搭建好Hexo博客后，接下来就是部署到自己的服务器上去了。 运行环境：CentOs 7Nginx 从本地部署到服务器有两种方式一种是通过git hook方式在服务器搭建git环境,通过本地git同步到服务器上,详情见我之前写的一篇文章. git hook 本次要说的是另一种部署方式，通过rsync部署到vps上，这种方式比较简单，比较适合新手和对git不熟悉的同学。","text":"前言在本地搭建好Hexo博客后，接下来就是部署到自己的服务器上去了。 运行环境：CentOs 7Nginx 从本地部署到服务器有两种方式一种是通过git hook方式在服务器搭建git环境,通过本地git同步到服务器上,详情见我之前写的一篇文章. git hook 本次要说的是另一种部署方式，通过rsync部署到vps上，这种方式比较简单，比较适合新手和对git不熟悉的同学。 安装rsyncrsync的安装分为两部分：服务器端和本地 服务器端安装1yum install rsync 对于 VPS，大多数的Linux系统已经默认装有 rsync 了，可以运行 rsync 测试下是否已经安装。 本地安装通过npm安装hexo自带的deployer sync 工具1npm install hexo-deployer-rsync --save rsync配置编辑博客文件夹目录下的 _config.yml，找到deploy端添加如下代码：123456deploy: type: rsync host: x.x.x.x user: root root: /data/blog port: 22 配置完毕！在 blog 目录下执行下面一段代码,完成部署。1hexo generate &amp;&amp; hexo deploy 参考资料部署Hexo博客到VPS","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"博客","slug":"技术开发/博客","permalink":"http://inicb.com/categories/技术开发/博客/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://inicb.com/tags/Hexo/"},{"name":"VPS","slug":"VPS","permalink":"http://inicb.com/tags/VPS/"}]},{"title":"Nginx报错403 forbidden (13: Permission denied)的解决办法","slug":"Nginx报错403-forbidden-13-Permission-denied-的解决办法","date":"2018-03-12T01:36:02.000Z","updated":"2018-05-04T02:44:05.199Z","comments":true,"path":"archives/aa0e64e5.html","link":"","permalink":"http://inicb.com/archives/aa0e64e5.html","excerpt":"引起nginx 403 forbidden通常是三种情况：一是缺少索引文件，二是权限问题，三是SELinux状态. 一、缺少index.html或者默认访问页面，就是配置文件中location下没有默认的index.html。也可以通过index指定 index.htm文件位置。","text":"引起nginx 403 forbidden通常是三种情况：一是缺少索引文件，二是权限问题，三是SELinux状态. 一、缺少index.html或者默认访问页面，就是配置文件中location下没有默认的index.html。也可以通过index指定 index.htm文件位置。 12345678910111213141516171819202122server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /data/blog; #root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 二、权限问题，如果nginx没有web目录的操作权限，也会出现403错误。 解决办法：1. 修改web目录的读写权限，或者是把nginx的启动用户改成目录的所属用户，重启Nginx即可解决 把文件目录的访问权限分配给nginx用户 使用chown命令可以修改文件或目录所属的用户： chown 用户 目录或文件名 例如：chown qq /home/qq (把home目录下的qq目录的拥有者改为qq用户) 使用chgrp命令可以修改文件或目录所属的组： chgrp 组 目录或文件名 例如：chgrp qq /home/qq (把home目录下的qq目录的所属组改为qq组) 三、SELinux设置为开启状态（enabled）的原因 首先查看本机SELinux的开启状态，如果SELinux status参数为enabled即为开启状态1/usr/sbin/sestatus -v 如果显示disabled 表示SELinux已经关闭了。如果状态为enabled，则需要关闭。1、临时关闭（不用重启）1setenforce 0 2、修改配置文件 /etcselinux/config，将SELINUX=enforcing改为SELINUX=disabled1234vi /etc/selinux/config#SELINUX=enforcingSELINUX=disabled 我这次遇到的就是第三个问题 SELinux(Security-Enhanced Linux): 强制访问控制的实现，是 Linux历史上最杰出的新安全子系统 问题解决资料学习来自：cleey","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"Nginx","slug":"技术开发/Nginx","permalink":"http://inicb.com/categories/技术开发/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://inicb.com/tags/Nginx/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-09T00:24:07.931Z","updated":"2018-05-04T02:44:05.204Z","comments":true,"path":"archives/4a17b156.html","link":"","permalink":"http://inicb.com/archives/4a17b156.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Android 多个源码目录和资源目录","slug":"Android-多个源码目录和资源目录","date":"2016-06-14T02:54:46.000Z","updated":"2018-05-04T02:44:05.191Z","comments":true,"path":"archives/e0c2a9d8.html","link":"","permalink":"http://inicb.com/archives/e0c2a9d8.html","excerpt":"","text":"1.首先你得使用gradle 去构建项目。原理如下： 引用源码目录和资源目录，以及Manifest文件 1234567891011121314sourceSets &#123; main &#123; manifest.srcFile &apos;AndroidManifest.xml&apos; java.srcDirs = [&apos;src&apos;] resources.srcDirs = [&apos;src&apos;] aidl.srcDirs = [&apos;src&apos;] renderscript.srcDirs = [&apos;src&apos;] res.srcDirs = [&apos;res&apos;] assets.srcDirs = [&apos;assets&apos;] &#125; debug.setRoot(&apos;build-types/debug&apos;) release.setRoot(&apos;build-types/release&apos;) &#125; 多个目录配置 12345678910111213sourceSets&#123; main&#123; res.srcDirs = [ &apos;src/main/res/sub_res/base&apos;, &apos;src/main/res/sub_res/notice&apos;, &apos;src/main/res/sub_res/study&apos;, &apos;src/main/res/sub_res/rckq&apos;, &apos;src/main/res/sub_res/associates&apos;, &apos;src/main/res/sub_res&apos;, &apos;src/main/res&apos; ]; &#125; &#125; 如上所示。","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"Android","slug":"技术开发/Android","permalink":"http://inicb.com/categories/技术开发/Android/"}],"tags":[]},{"title":"Android从布局中快速高效地提取Style","slug":"Android从布局中快速高效地提取Style","date":"2016-05-30T06:28:38.000Z","updated":"2018-05-04T02:44:05.195Z","comments":true,"path":"archives/f11662fe.html","link":"","permalink":"http://inicb.com/archives/f11662fe.html","excerpt":"","text":"为了使用所见即所得的界面布局效果，我们一般都会在Layout xml中边写边调试界面，当写完之后，一般也会把一些重复的，相同的属性写到布局文件中，有时候通过手动去移植，费时费力，下面提供一个简单的方法： 如下图所示布局中的ImageView,需要把其中的属性提取到Style中， 如图所示： 首先，光标放到ImageView属性上，然后使用Android Studio的Refactor功能！首先在Layout中正常编写View的属性，然后点击右键打开菜单，依次选择Refactor -&gt; Extract -&gt; Style。然后在弹出的Style提取对话框中，选择需要的属性。.完事。","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"Android","slug":"技术开发/Android","permalink":"http://inicb.com/categories/技术开发/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://inicb.com/tags/Android/"}]},{"title":"在VPS上配置hexo博客","slug":"在VPS上配置hexo博客","date":"2016-05-26T06:23:17.000Z","updated":"2018-05-04T02:44:05.206Z","comments":true,"path":"archives/d887bff1.html","link":"","permalink":"http://inicb.com/archives/d887bff1.html","excerpt":"","text":"0.写在前面从网上看到SpringWon写的关于 在VPS上配置hexo博客，结合自己在Vps上搭建的经历，整理步骤如下。 需要的准备： 一个VPS服务器，这里我使用Vultr提供的服务，VPS服务器为Centos 一台可以上网的Ubuntu电脑或者Mac笔记本，我这里使用的是Ubuntu16.04LTS 基本的命令行操作和基础的计算机网络知识 域名如果没有的话使用ip也行。 其实静态网页完全可以放到Github Page上，大家可以看我的github page主页，效果和个人vps效果是一样的。 1.开始搭建 总体步骤是，在客户机上安装hexo，git。在Vps上安装git，nginx，创建新用户git，以及配置Git Hooks。 1） 在客户机上安装hexo，git。 2） 为vps配置ssh访问。 3） 在服务器上装nginx。 4） 在vps 创建git账户， 5) 在服务器上创建blog.git 路径，并创建/var/www/blog目录，为把此目录赋予git用户相应的操作权限. 1sudo chown git:git /var/www/blog 5） 为Hexo配置deploy路径，修改hexo配置文件_config.yml中的deploy选项， hexo 支持配置多个repo地址。 123456deploy: type: git message: update repo: s1: git@YOURDOMAIN:blog.git,master s2: git@YOURDOMAIN:blog.git,master 5 配置Git Hooks 本地deploy只是把静态文件push到了VPS的git仓库里。使用git hooks在每次push完成后，执行一段脚本，把blog.git里的内容clone出来，再复制到/var/www/blog目录。就可以实现博客的更新了。 123$ cd ~/blog.git/hooks$ touch post-receive$ vi post-receive 使用下面的脚本 12345678 #!/bin/bash -lGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 更改脚本权限 1chmod +x post-receive 参考资料 Springwon http://www.jianshu.com/p/605c3d32cab9 https://eliyar.biz/code/Hexo/Hexo-on-VPS/","categories":[{"name":"技术开发","slug":"技术开发","permalink":"http://inicb.com/categories/技术开发/"},{"name":"博客","slug":"技术开发/博客","permalink":"http://inicb.com/categories/技术开发/博客/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://inicb.com/tags/Hexo/"},{"name":"VPS","slug":"VPS","permalink":"http://inicb.com/tags/VPS/"}]},{"title":"在ubuntu上安装Atom","slug":"在ubuntu上安装Atom","date":"2016-05-25T03:08:35.000Z","updated":"2018-05-04T02:44:05.209Z","comments":true,"path":"archives/ccdab178.html","link":"","permalink":"http://inicb.com/archives/ccdab178.html","excerpt":"","text":"首先去官网上下载Atom。 执行以下语句安装Atom1sudo dpkg -i &apos;/home/wjl/下载/atom-amd64.deb&apos; 安装之后，通过如下语句启动1$ atom 如果启动之后，无法切换为中文输入法，执行以下语句： 1$ sudo chown wjl:wjl ~/.atom/ 为atom中的ibus分配权限。其中wjl为您的用户名和用户所在的组。 为Atom切换字体：1.首先查看当前系统支持的字体有哪些：1$ fc-list :lang=zh 然后在设置中，设置“Font Family”为你想要的字体。","categories":[],"tags":[{"name":"ubntu","slug":"ubntu","permalink":"http://inicb.com/tags/ubntu/"},{"name":"Atom","slug":"Atom","permalink":"http://inicb.com/tags/Atom/"}]},{"title":"Install Nginx on Centos","slug":"Install-Nginx-on-Centos","date":"2016-05-25T01:38:33.000Z","updated":"2018-05-04T02:44:05.198Z","comments":true,"path":"archives/7ef035b3.html","link":"","permalink":"http://inicb.com/archives/7ef035b3.html","excerpt":"","text":"The One : Add NGINX yum repository, create a file named /etc/yum.repos.d/nginx.repo. Paste one of the configurations below: CentOS:12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 The Two :第一步，在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo： 123cd /etc/yum.repos.d/vim nginx.repo 填写如下内容：12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 保存，则会产生一个/etc/yum.repos.d/nginx.repo文件。 下面直接执行如下指令即可自动安装好Nginx：1yum install nginx -y 安装完成，下面直接就可以启动Nginx了： Operator1/etc/init.d/nginx start 现在Nginx已经启动了，直接访问服务器就能看到Nginx欢迎页面了的。 如果还无法访问，则需配置一下Linux防火墙。12345iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPTservice iptables saveservice iptables restart Nginx的命令以及配置文件位置： /etc/init.d/nginx start # 启动Nginx服务 /etc/init.d/nginx stop # 停止Nginx服务 /etc/nginx/nginx.conf # Nginx配置文件位置 chkconfig nginx on #设为开机启动 至此，Nginx已经全部配置安装完成。 一台主机上适应多个服务器：在你的nginx通过代理的方式转发请求：配置如下vi /etc/nginx/nginx.conf在http加入下面的内容，参考：http://wiki.nginx.org/FullExamplehttp {…. server { listen 80; server_name www.a.com; charset utf-8; access_log /home/a.com.access.log main; location / { proxy_pass http://127.0.0.1:80; } } server { listen 80; server_name www.b.com; charset utf-8; access_log /home/b.com.access.log main; location / { proxy_pass http://127.0.0.1:81; } }…","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://inicb.com/tags/Nginx/"},{"name":"Centos","slug":"Centos","permalink":"http://inicb.com/tags/Centos/"}]}]}