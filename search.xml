<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Python批量在图片上显示图片创建日期]]></title>
    <url>%2Farchives%2F972f8a4b.html</url>
    <content type="text"><![CDATA[一般手机拍照图片都有图片创建时间，有时候时间久了忘记是什么时候拍的啦，后来想是否是可以通过python批量处理图片，把拍照时间显示到照片上。 下面是我写的一个脚本，可以批量处理图片，显示图片时间。1234567891011121314151617181920212223242526272829303132333435363738394041from PIL import Image, ImageDraw, ImageFontfrom datetime import datetimeimport osimport exifreadfont = ImageFont.truetype( &apos;/Users/daren/PycharmProjects/MyFirstScrapyProject/MyFirstScrapyProject/spiders/DMFT1553353872846-2.ttf&apos;, 90)def add_time(img, text): draw = ImageDraw.Draw(img) fillcolor = &quot;#ffffff&quot; text_size_x, text_size_y = draw.textsize(text, font=font) text_xy = (img.size[0] - text_size_x - 50, img.size[1] - text_size_y * 3) draw.text(text_xy, text, font=font, fill=fillcolor) img.save(new_path + &apos;&#123;&#125;.jpg&apos;.format(text + str(datetime.now().timestamp())), &apos;jpeg&apos;)def list_file(): for file in os.listdir(origin_path): file_path = origin_path + file image = Image.open(file_path) f = open(file_path, &apos;rb&apos;) tags = exifread.process_file(f) time = tags[&apos;EXIF DateTimeOriginal&apos;].printable; add_time(image, datetime.strftime(datetime.strptime(time, &apos;%Y:%m:%d %H:%M:%S&apos;), &apos;%Y-%m-%d %H:%M:%S&apos;))origin_path = &apos;/Users/daren/temp/aa/origin/&apos;new_path = &apos;/Users/daren/temp/aa/new/&apos;if __name__ == &apos;__main__&apos;: list_file()# f = open(&apos;/Users/daren/temp/aa/origin/IMG_20180317_162705.jpg&apos;, &apos;rb&apos;)# tags = exifread.process_file(f)# print(type(tags[&apos;EXIF DateTimeOriginal&apos;].printable))# print(tags) 其中用到了以下工具和知识。 ExifReadEasy to use Python module to extract Exif metadata from tiff and jpeg files.读取图片信息 Image Make，Image Model，EXIF DateTimeOriginal等相关信息 PillowPython 图像处理标准库，支持python3.6 另一种思路是对图片进行分类，按照时间创建相应的文件夹，并把图片按照时间文件夹进行整理,功能参照下面脚本。classify_picture.py 相关资料 Python教程–廖雪峰 python获取照片EXIF经纬度、拍摄时间 按拍摄日期归类照片 一键搞定 Python]]></content>
      <categories>
        <category>技术开发</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[科学上网技巧]]></title>
    <url>%2Farchives%2F8552e77a.html</url>
    <content type="text"><![CDATA[尽管也称互联网，但在国内，如若有以下一个或多个需求，你就不得不学习一下科学上网了： 访问的网站或服务被（GFW）墙；网络提供商（ISP）劫持了网络流量；需要匿名（隐藏真实 IP）的情况，如渗透测试；躲避网络监控；其他情况。这里分享一下我的科学上网技巧，使用到的工具软件可能有 Shadowsocks、Lantern、Privoxy、Tor。根据不同的目的选择不同的工具。 一、绕过 GFW 和 ISP 劫持最简单和不折腾的方法是购买 VPN，次之是购买一台海外 VPS，自己安装 VPN 或 Shadowsocks 服务端。VPN 的优点是可以全局翻墙，Shadowsocks 虽然可以设置全局模式，但是对于不支持代理的本地应用是没有办法的，当然这种情况下可以试试 ProxifierPE 强制所有连接通过代理上网。 建议自己购买vps 优惠链接 使用 Shadowsocks 可能遇到的另一个问题是，因为 Shadowsocks 使用的是 SOCKS5 类型的代理，当本地应用只支持 HTTP/HTTPS 类型代理时，就需要自己解决 HTTP 转换为 SOCKS5 的问题。当然，这个问题使用 Privoxy 就能很好地解决。 本节主要介绍如何组合使用 Shadowsocks 和 Privoxy，并假设你已经安装并配置好了 Shadowsocks（Linux 中可以安装 shadowsocks-qt5 或 命令行版本的 Shadowsocks）。 Shadowsocks 与 Privoxy 组合使用的示意图如下所示：假设你已经配置好了 Shadowsocks，接下来配置 Privoxy。 Windows右键点击 Privoxy 托盘图标，依次点击 Edit - Main Configuration 打开配置文件；Linux 系统中 Privoxy 的配置文件位于/etc/privoxy/config。配置文件修改为：123456# 把 HTTP 流量转发到本机 127.0.0.1:1080 的 Shadowsocksforward-socks5 / 127.0.0.1:1080 .# 可选，默认只监听本地连接 127.0.0.1:8118# 可以允许局域网中的连接listen-address 0.0.0.0:1081 启动 Shadowsocks 和 Privoxy 后，把本地应用的代理设置为 HTTP/HTTPS 类型的 127.0.0.1:8118，就可以绕过 GFW 和 ISP 了。如果局域网中的其他 PC 或手机也希望使用该电脑上网（假设该电脑 IP 地址为 192.168.1.10），把它们的代理设置为 19.168.1.10:8118 即可。 MAC安装Privoxy1brew install privoxy 配置Privoxy1234vim /usr/local/etc/privoxy/configlisten-address 0.0.0.0:1081forward-socks5 / 127.0.0.1:1080 . 1080是Shadowsocks代理的端口，8118是开启http代理的端口。使用0.0.0.0即可在局域网内使用此代理，如只想本机使用，使用127.0.0.1。 启动Privoxy 1/usr/local/sbin/privoxy /usr/local/etc/privoxy/config 检查服务是否启动1netstat -an | grep 8118 参考资料 MacOS Sierra 使用 Shadowsocks + Privoxy 中转代理为终端命令行 Terminal 提供出墙服务 Mac上配置Privoxy 我的科学上网技巧]]></content>
      <categories>
        <category>技术开发</category>
        <category>GFW</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CORS on Nginx]]></title>
    <url>%2Farchives%2Fcbbeaee8.html</url>
    <content type="text"><![CDATA[在项目开发过程中对于文件访问，特别是m3u8文件的访问经常涉及到跨域问题，在不同域名无法访问文件。所以需要配置nginx，让服务器文件支持跨域请求。 为什么要用m3u8格式的视频文件。随着客户的增加，mp4文件播放的弊端也日益凸显，主要集中在两个方面，一是当视频时长比较长的时候，mp4的关键帧元素往往很大，需要加载很长时间才能开始播放，网速不好的情况缓冲加载就要20多秒的时间，客户早已急不可耐。二是当用户打开一个视频播放的时候，浏览器会持续请求下载mp4文件直到下载完成，就算是用户暂停视频播放浏览器也会持续这种下载状态，如果这个视频文件是500M则会请求服务器下载500M文件，是1G则会不停下载1G，给服务器硬盘和宽带造成很大浪费和压力。 于是我们参考优酷土豆等大型视频网站系统的播放文件，发现他们的视频文件都是分段播放的，即把一个大的视频文件按照一定大小或时长把一个视频分为N段播放，这样的优势是打开视频加载速度快，可以达到秒播，另外一个优势是当视频播放第N段的时候，浏览器会下载N+1段，N+2则不会下载，大大缓解了服务器硬盘和宽带压力，可知道高昂的宽带成本才是视频网站的最大压力。 什么是m3u8？m3u8是苹果公司开发的一项新型播放格式，这种播放格式支持目前市面的windows、androis、ios设备主流的浏览器，同样的视频文件既可以在flash环境播放，又能在无flash的html5环境播放，它的优势还不止于此，它可以实现多种码率在不同网速下的自动切换，网速好自动切换高清晰度视频，网速慢自动播放低清晰度文件，还可以实现流加密（视频文件本身加密）、分段下载播放、任意时间点拖拽播放、随机视频文件广告插入等等优势，所以最新版的云转码视频系统仅把m3u8作为唯一的播放格式而放弃了其他格式的输出。 视频文件跨域问题处理The following Nginx configuration enables CORS, with support for preflight requests.1234567891011121314151617181920212223242526272829303132## Wide-open CORS config for nginx#location / &#123; if ($request_method = &apos;OPTIONS&apos;) &#123; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; # # Custom headers and headers various browsers *should* be OK with but aren&apos;t # add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&apos;; # # Tell client that this pre-flight info is valid for 20 days # add_header &apos;Access-Control-Max-Age&apos; 1728000; add_header &apos;Content-Type&apos; &apos;text/plain; charset=utf-8&apos;; add_header &apos;Content-Length&apos; 0; return 204; &#125; if ($request_method = &apos;POST&apos;) &#123; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&apos;; add_header &apos;Access-Control-Expose-Headers&apos; &apos;Content-Length,Content-Range&apos;; &#125; if ($request_method = &apos;GET&apos;) &#123; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&apos;; add_header &apos;Access-Control-Expose-Headers&apos; &apos;Content-Length,Content-Range&apos;; &#125;&#125; 支持m3u8 格式 服务端返回的 Access-Control-Allow-Origin: * 表明，该资源可以被任意外域访问。如果服务端仅允许来自 http://foo.example 的访问，该首部字段的内容如下： Access-Control-Allow-Origin: http://foo.example 现在，除了 http://foo.example，其它外域均不能访问该资源（该策略由请求首部中的 ORIGIN 字段定义，见第10行）。Access-Control-Allow-Origin 应当为 * 或者包含由 Origin 首部字段所指明的域名。 ps：转换mp4为m3u8格式1ffmpeg -i big.mp4 -b:v 1M -g 60 -hls_time 2 -hls_list_size 0 -hls_segment_size 500000 output.m3u8 来源：https://stackoverflow.com/questions/42026691/ffmpeg-creating-m3u8-from-mp4-video-file-size https://blog.csdn.net/u012539700/article/details/79640458 使用ffmpeg将mp4切成ts片段的时候会碰到一个问题，就是生成的m3u8文件里只有最后的五个片段的信息。 这是因为ffmpeg 默认的list size 为5，所以只获得最后的5个片段。为了解决这个问题，需要指定参数-hls_list_size 0，这样就能包含所有的片段 参考资料 https://enable-cors.org/server_nginx.html HTTP访问控制（CORS） Windows下 FFMPEG mp4批量转码m3u8，视频批量加水印]]></content>
      <categories>
        <category>技术开发</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Cros</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生安卓(AOSP)WiFi信号去叹号去叉教程5.0-Android P及以上]]></title>
    <url>%2Farchives%2F9b4c95f.html</url>
    <content type="text"><![CDATA[最近翻出2013年海淘买回来的Google Nexus 4手机，重新进行了刷机，因为打算作为备用不想安装太多无用的应用，所以刷的是AOSP原生安卓系统，结果刷完之后发现无法上网，状态栏上Wifi图标上有x号。因为是系统链接网络之后默认会访问google服务器检查是否有网络，如果访问不了就显示“x”号。因为众所周知的原因，在中国大陆是访问不了GOOGLE的，所以就需要我们手动修改。 检查在拨号器界面输入“##4636##”，查看“手机信息”，显示PING TEST访问的都是www.google.com 说明Captive Portal是安卓5引入的一种检测网络是否正常连接的机制，制作的非常有创意，通过HTTP返回的状态码是否是204来判断是否成功，如果访问得到了200带网页数据，那你就可能处在一个需要登录验证才能上网的环境里，比如说校园网，再比如说一些酒店提供的客户才能免费使用的WiFi（其实是通过DNS劫持实现的），如果连接超时（根本就连接不上）就在WiFi图标和信号图标上加一个标志，安卓5和6是叹号，安卓7改成一个叉了。只不过默认访问的是谷歌自家的验证服务器，然而由于你懂的原因，就算你连接上了网络也连不上这个服务器… 嗯…那其实还是没有连接上网络嘛… 噫…. 谷歌设计了一个开关来控制是否启用这个特性，同时也提供了一个变量来控制待验证的服务器地址，国内的修改版ROM通常都改成了高通中国的地址，还有一些ROM设计了代码在重启的时候恢复这个设置，不知道是出于什么目的。 没更新7.0的时候，一直用小狐狸的叹号杀手，很不错的应用，可惜当时他已经很久不更新了，当时安卓N不能用，后来自己做了个小工具，想了想就干脆上架酷安吧，也能帮助大家，这样有了CaptiveMgr工具，这分明就是个没有名字的名字嘛…根本就是foo, bar一样…好像也没什么好叫的了？现在代码还比较乱，要是哪天有空把这堆代码整理出来就开源了算了，毕竟纯粹体力活。 具体的原理不在这里写了，这里主要写如何去掉叹号或者叉标志。 如果有root权限直接用我这个工具算了，比较方便，毕竟用命令也就是检测一下系统然后代替执行命令而已嘛。(PS: 如果使用SS/SSR可以通过NAT模式让系统直接连接，其内部是通过iptables实现的) 如果没有root权限就得按下面操作了，做好配置以后重启WiFi和数据流量（打开再关闭飞行模式即可）就可以看到效果了。 修改以下需要ADB调试，配置不赘述 5.0 - 6.x教程5和6还不支持HTTPS，直接修改即可 检测开关相关：先处理开关状态，这个变量删除就是默认开启的，删除操作随意执行，反正没影响，删除状态下获取这个变量会返回null。注意：如果关闭，则无法判断当前网络是否需要登录，无法自动弹出登录页面 123456删除adb shell settings delete global captive_portal_server禁用adb shell settings put global captive_portal_server 0查询状态adb shell settings get global captive_portal_server 服务器地址相关： 123456删除地址就可以恢复默认的谷歌服务器adb shell settings delete global captive_portal_server设置一个可用地址（高通/V2EX都推荐）adb shell settings put global captive_portal_server captive.v2ex.co查询当前地址adb shell settings get global captive_portal_server 7.0 - 7.1教程这两个版本相比5和6没有大的更改，只是默认连接服务器的时候使用HTTPS，但是提供了一个开关用以指定是否使用HTTPS 检测开关相关： 1同5.0 - 6.x HTTPS开关相关： 123456删除（直接删除则默认使用HTTPS）adb shell settings delete global captive_portal_use_https禁用HTTPS（写1启用 写0禁用）adb shell settings put global captive_portal_use_https 0查询HTTPS开关状态adb shell settings get global captive_portal_use_https 服务器地址相关：（如果启用了HTTPS需要先确定地址是否支持HTTPS） 1同5.0 - 6.x 7.1.1教程这个版本把HTTPS和HTTP两个地址分开保存，并通过7.0加入的HTTPS开关来控制使用哪一个地址。 检测开关相关： 1同5.0 - 6.x HTTPS开关相关： 1同7.0 - 7.1 服务器地址相关： 123456删除（删除默认用HTTPS）adb shell settings delete global captive_portal_https_urladb shell settings delete global captive_portal_http_url分别修改两个地址adb shell settings put global captive_portal_http_url http://captive.v2ex.co/generate_204adb shell settings put global captive_portal_https_url https://captive.v2ex.co/generate_204 7.1.2教程此版本服务器地址判断逻辑相比7.1.1没有更改，但是检测的开关却变了。 检测开关： 123456删除变量：（删除以后默认启用）adb shell settings delete global captive_portal_mode关闭检测：adb shell settings put global captive_portal_mode 0查看当前状态：adb shell settings get global captive_portal_mode 服务器地址相关（同7.1.1）： 123456删除（删除默认用HTTPS）adb shell settings delete global captive_portal_https_urladb shell settings delete global captive_portal_http_url分别修改两个地址adb shell settings put global captive_portal_http_url http://captive.v2ex.co/generate_204adb shell settings put global captive_portal_https_url https://captive.v2ex.co/generate_204 8.0.0和8.1.0和9.0(Android P)同上7.1.2，未做修改参考资料 EVIL42 原生安卓WiFi信号去叹号去叉教程5.0-Android P WiFi showing “Connected, no Internet” with exclamation mark WiFi in China - “Connected, no Internet”]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我是如何一步步改善儿子便秘情况的]]></title>
    <url>%2Farchives%2F3f223d67.html</url>
    <content type="text"><![CDATA[长春的冬天给人的印象除了冷就是干燥，在东北生活过的朋友都会遇到这样的情况，特别是到冬天的供暖期（10月底到次年4月中旬），整个身体会很不舒服，严重缺水。对于从关内过来居住的朋友对这种情况会严重不适。轻点的皮肤干燥、嘴唇开裂，严重点的大便干燥、引发痔疮。就我见过的还有晚上睡觉不知不觉流鼻血的，眼睛发炎的等等都是因为空气干燥。 我儿子在这期间也遇到了这个问题，之前大便状态都挺好的，给暖气之后就开始大便干燥、发硬，经常2-3天才大便一次，并且有时候会有便血。大便难受造成儿子不愿意拉，不愿意拉更加剧了便秘的情况，形成了一个恶性循环。 在此期间也用了益生菌、清火饮、低聚果糖等治疗婴幼儿便秘的保健产品，但是效果不是很理想，经常反复。 因为自己平时上班没有大片的时候调理儿子便秘的情况，周末两天也来不及，所以在春节放假期间决定对儿子肠道进行一次集中调理，解决便秘的情况。让儿子能痛快的拉臭臭。 经过7天的努力，终于在2月8号、9号、10号看到效果了，现在基本每天都能拉一次，并且大便也不再干、硬（除了大便最外面的地方还有点干），对大便也不再排斥，感觉持续了3个月的便秘情况终于看到希望了。 总结一下这次改善便秘的方法，最重要的是如下： 一定要多给孩子吃纤维类的果蔬，比如火龙果、菠菜、紫薯、地瓜、西兰花泥等， 并且吃东西不能太精细（这是重点，例如吃橘子不能只吃里面的肉而不吃外面的肉皮）， 在吃这些的基础上配合益生菌等婴儿保健品， 加大孩子运动量。 下面是儿子这段时间的吃饭和作息规律： 早上起来喝低聚果糖（空腹） 吃早饭（粥带青菜） 半小时后吃益生菌 吃水果（芒果、红龙果） 中午吃饭（带菜叶，紫薯，西兰花泥等） 运动 吃水果（橘子，瓜，柚子等） 吃AD 吃晚饭（带蔬菜） 吃乳钙 吃奶粉 睡觉]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[任正非接受媒体联合采访：做最好的5G网络供应商]]></title>
    <url>%2Farchives%2Fc91cfa62.html</url>
    <content type="text"><![CDATA[1月17日，华为创始人、总裁任正非就各方关注的焦点问题，接受国内媒体采访。 1、记者：华为最近遇到了一些困难，请问华为内部是否系统地评估过，这么多年的研发创新投入是不是可以抵抗这些困难？任正非：应该说，我们今天可能要碰到的问题，在十多年前就有预计，我们已经准备了十几年，我们不是完全仓促、没有准备的来应对这个局面。这些困难对我们会有影响，但影响不会很大，不会出现重大问题。 记者：那么在现在的环境下，您怎么理解自主创新对中国公司的意义？ 任正非：我从来不支持“自主创新”这个词，我认为，科学技术是人类共同财富，我们一定要踏在前人的肩膀上前进，这样才能缩短我们进入世界领先的进程。什么都要自己做，除了农民，其他人不应该有这种想法。自主创新若是精神层面我是支持的。也就是说，别人已经创新，我们要尊重别人的知识产权，得到别人的许可，付钱就行。如果我们重做一遍，做完一遍，也要得到许可，还是要付钱，这是法律。当然科学家都是自主创新的，我指的是我们这种公司的工程创新。 2、记者：我想接着问一下，华为对这次反全球化浪潮所做的最坏的预案是什么？任正非：外面的变化对我们没有这么大的影响。因为我们有信心，我们的产品做得比别人都好，让别人不想买都不行。我举一个例子:全世界能做5G的厂家很少，华为做得最好；全世界能做微波的厂家也不多，华为做到最先进。能够把5G基站和最先进的微波技术结合起来成为一个基站的，世界上只有一家公司能做到，就是华为。将来我们5G基站和微波是融为一体的，基站不需要光纤就可以用微波超宽带回传。有人说过去这只适用于广大农村，但5G是超宽带，微波也是超宽带，这也适合广大西方国家。因为广大西方国家遍地都是分散的别墅，是要看8K电视、高速的信息消费，那就需要买我们的设备。当然，它可以不买，那就要付出非常昂贵的成本来建设另外的网络。我们在技术上的突破，也为我们的市场创造了更多机会，带来更多生存支点。所以，我们没有像外界想像中的那么担忧。 3、记者：长期以来，西方对包括华为在内的中国企业最常见的指责就是盗窃知识产权，请问您怎么看待这个话题？任正非：我不能代表中国企业，只能代表华为。华为在美国经历了几场大官司，都获得良好的结果。华为现在87,805项专利中，其中有11,152项核心专利是在美国授权的，我们的技术专利对美国的信息社会是有价值的。我们已经和很多西方公司达成了专利交叉许可。华为不能代表别的企业，但是我们自己是绝对尊重他人知识产权的。 4、记者：为什么中国没有产生像高通那样通过知识产权授权模式进行发展的企业？深圳有一些企业，他们有自己的知识产权，由于遭遇知识产权官司和国外公司的围堵，他们没有办法，只好向产业链的下游下沉。想问您，中国知识产权体系应该要怎么调整？任正非：如果我们把知识产权当成物权，可能国家的科技创新发展会更加好一点。就是知识产权法若是物权法的一部分，侵犯知识产权就是侵犯物权，这样的环境有利于原创发明。没有原创发明，哪有未来的“高通”呢？我们应该认识到，知识产权保护是有利于国家长远发展的，而不是西方拿来卡我们的借口。因此，我们国家首先要不支持假货、不支持山寨，而是要支持原创、保护原创。有可能今天经济发展速度会慢一些，但质量就会更好一些，就会出现越来越有竞争力的公司。 5、记者：现在外界有一种感觉，好像又重新回到麦卡锡时代，以共产主义为帽子，加到一些企业或者个人身上进行打击。您有没有感觉到，中国《情报法》尤其是第七条颁布之后，会对华为国际市场造成一些障碍？您觉得有没有必要通过一些渠道对它进行合理的诠释？任正非：首先，对于释法的事情，我们说了不算。但是政府已经表态，外交部做了明确澄清，中国没有任何法律强制要求任何企业安装后门。 第二，中国还要强调，企业在任何国家都必须要遵守业务所在国所有适用的法律法规，包括联合国、美国和欧盟适用的出口管制和制裁法律法规。 6、记者：任总您好，我在深圳做新闻工作很多年了，在我印象当中，华为在过去30年当中，像这么密集，您亲自出面，连续几天与媒体会面，以前是很少见的。包括外媒都在说，今年任总会见记者是一个比较罕见的安排，是为了应对当前华为所面临的罕见的特别困难，不知道您对这个评价是否认同？这个安排，主要是想传递什么信息？另外一个问题，西方一些国家政府对华为网络安全的指责，您认为这是出于历史的偏见，还是华为确实有需要加强的地方？华为如何消除西方国家的担忧？任正非：第一，见媒体是公共关系部逼的。他们说，这段时间我们要给18万员工和广大客户都要传递信心，让他们多了解我们、信任我们，也同时给社会释怀，其实我们没有遭遇多大困难。你可能没参加过我们的内部会议，开会都是群情激昂的，没有感觉到有多大困难。但是外界不知情，我们需要传递一些信心，需要我说说话来起一些作用。所以，见媒体就是给社会传递一种信心。当然我们今年的收入增长速度可能会放慢，估计增长不会超过20%。 第二，关于网络安全问题，要把信息安全和网络安全区分开来，现在混淆在一起了。华为30年来在170多个国家、为30多亿人提供了网络服务，有良好的安全记录。但是我们还需要不断进步。我们现在要重构软件架构体系，朝着“网络架构极简、网络交易模式极简、网络极安全、隐私保护遵从GDPR”这四个目标的要求。我们在未来五年大量投入研发费用，做全世界最好的网络。五年以后，年销售收入可能比今年多一倍多。 7、记者：我记得2014年第一次采访您的时候，您说“华为有什么神秘的？揭开面纱就是皱纹”，印象特别深刻，现在五年过去了，您觉得华为的面纱真正揭开了吗？现在国际上质疑的声音好像更多了。任正非：那就是皱纹更多了。因为半径越大，问题越多。如果我们缩到小小的一点，像农民种地一样，只有土豆这么大，外界都看清了，那谁也不会质疑。半径越大，越看不清，未来10-20年之后的探索我们更加看不清，所以大家的质疑会多一些，但是质疑并不等于有多大问题。另外，质疑也是有价值的，科学家天生就喜欢怀疑，要不他们怎么会发现新东西呢？他不相信，就会有新发现，所以质疑本身也是前进过程中必然伴随的副产品。 未来信息社会的发展是不可想象的。未来二三十年，人类社会一定会有一场巨大革命，在生产方式上要发生天翻地覆的变化。比如，工业生产中使用了人工智能，大大地提高生产效率。大家参观了我们的生产线，那还不能叫人工智能，只是一部分人工智能，但是生产线上已经看不到太多的人。五年以后，这条生产线上可能只需要五、六人，甚至两、三人，主要是做维修。当然，我们的生产线上很多人都是博士，不是普通操作工人，特别是光芯片生产中，会动手的博士还特别少。 这个时代对一个国家来说，重心是要发展教育，而且主要是基础教育，特别是农村的基础教育。没有良好的基础教育，就难有有作为的基础研究。给农村教师多发一点钱，让优秀人才愿意去当教师，优秀的孩子愿意进入师范学校，就如我们老一代革命家毛泽东、粟裕、黄克诚、许光达、恽代英…都出身于师范学校一样，我们就可以实现“用最优秀的人培养更优秀的人”。但现在不是这样，教师待遇低，孩子们看见知识多也挣不到多少钱，所以也不怎么想读书。这样就适应不了未来二、三十年以后的社会，社会就可能分化。完全使用人工智能生产的可能就会重回西方，因为没有了工会问题、社会福利问题、罢工问题……；完全不能人工智能的生产可能会搬到东南亚、拉丁美洲、南欧等人力成本低的国家去了。我们国家面临着这种分化，就应该要把基础教育提到国家的最高纲领，才能迎接未来的革命。提高全民族的文化素质，这应是党和国家的主要责任，每个公民的义务。今天满街高楼大厦，过二、三十年就变旧了。如果我们投资教育，二、三十年后这些穷孩子就是博士，开始冲锋，国家就会走向更加繁荣。 在这个重要的历史转折时期，华为只能把自己管好，不能去管别人，所以我们就大量投入资金往前冲。刚才央视记者问我“你们赚的钱很少，为什么科研投入会有那么多”，比如今年我们利润是90多亿，但是科研投入150-200亿美金。其实这150亿哪里是我们投的，都是成本，实际上还是客户投的。客户给我们的钱，不是产生利润，而是产生投入。 我们为什么要走在前面？新技术进入时代的周期变短了。过去是等到科学家做方程，经过五、六十年，终于发现这些方程有用。从电磁理论，又经过五、六十年，发现电磁理论可以用于无线电；又经过了几十年……。今天已经不可能了，这个过程缩短非常厉害，即使不能叫毫秒级，也是极短级。如果我们还是等着产业分工，不进入基础研究，就有可能落后于时代。 中国是一个人口大国，如果变成人才大国，我们与别人的竞争才更加有信心，因此，小学教师应该要得到更多的尊重。当然，今天教师待遇已经比过去好很多了，但还要让教师成为最光荣的职业，国家未来才有希望，才能在世界竞技中获得成功。 今天大家看到华为有很多成功，其实成功很重要的一点是外国科学家，因为华为工资高于西方公司，所以很多科学家都在华为工作。我们至少有700名数学家、800多名物理学家、120多名化学家、六七千名基础研究的专家、六万多名各种高级工程师、工程师……，形成这种组合在前进。因此，我们国家要和西方竞技，唯有踏踏实实用五、六十年或者百年时间振兴教育。 振兴教育不在房子，在于老师。黄埔军校就是两条绑腿，抗大就是一条小板凳。你们看关于抗大的电影，搬个小板凳，坐在黄土飞扬的土地上，听到毛泽东没有麦克风的讲话，就建设了新中国。黄埔和抗大怎么不是世界上两所伟大的名校呢？所以，物质不是最主要的，人才是最主要的，人类灵魂的工程师应该得到尊重，这个国家才有希望。 记者：您提出基础教育这个议题，是希望能够给社会一个警示吗？ 任正非：我认为，社会就是应该有口号“用最优秀的人去培养更优秀的人”，“我们再穷也不能穷老师”。 记者：您打算为这个事情做点什么？ 任正非：我们把华为公司做好，就给大家做了一个榜样。华为有什么？一无所有！华为既没有背景，也没有资源，除了人的脑袋之外，一无所有。我们就是把一批中国人和一些外国人的脑袋集合起来，达到了今天的成就，就证明教育是伟大的。 8、记者：在4G时代，我们感觉华为也是从众多的竞争对手中领跑进入一个新的境界。原本以为在5G时代，迎接华为的是世界广阔的天地。但是目前为止，外界设置的障碍是比较多的，刚才您也讲华为对遇到的状况是评估过的。我想问一下，接下来华为打算采取哪些措施去突破目前的困局？另外第二个问题，我们早上也去参观了华为的两个实验室，还是觉得华为在基础研究这方面也是投入了很多心力的，那国家大的环境也是提倡企业或者是高校做基础研究，我想听任总关于基础研究这块的想法。任正非：有个老师辞职说世界很大，她想去看看。我想说这个世界很大，还有好多地方我们可做5G的，我们暂时还做不了那么多。少数地方的拒绝不能代表我们在大多数地方被拒绝。而且5G实际上被夸大了它的作用，也被更多人夸大了华为公司的成就。因为我们跑得太快了，我们的年青人按捺不住自己的兴奋，一直讲啊讲，就把事情夸大了。实际上现在人类社会对5G还没有这么迫切的需要。人们现在的需要就是宽带，而5G的主要内容不是宽带。5G有非常非常多的内涵，这些内涵的发生还需要更多需求的到来，还需要漫长的时期。不要把5G想象成海浪一样，浪潮来了，财富来了，赶快捞，捞不到就错过了。5G的发展一定是缓慢的。日本和韩国还是4G，日本、韩国把4G运用到非常好，就足够满足使用。我们的4G没有用好，打开我的手机只有20~30兆，实际上我们提供的4G是可以到300~400兆，足够看8K电视。但是我们的网络，白天打开就只有二三十兆，只能看4K，没法看8K电视。为什么？网络结构不好。网络结构不好是啥？还是没有数学家在研究运营商的网络结构。所以网络结构性的问题没有解决，5G用上来和4G差不多。就好比我嘴巴很大，但是喉咙很小，我吃一大块肉还是一口吞不进去。因此，不是5G的基站是万能的，大家别那么着急。5G接下来估计还要进入毫米波，毫米波就是只要你多加一倍的钱，带宽可以加一百倍，就是一秒钟你可以下载几十部高清视频，这个我们已经在实验室里面都能完全做出来。5G现在暂时还没有充分发挥出用处，太快了。这次中央台用来在深圳（5G）直播春节联欢晚会，也只是个演示性作用，这种演示还不足以变成大规模的商业行为。 在技术研究上，我们有一个说法叫做“一杯咖啡吸收宇宙能量”。干啥？就是我们向谷歌学习，谷歌的母公司赚了钱就去研究很难实现的东西，还研究长生不老药，它也是为人类社会贡献，把财富转移到探索人类社会的未来去，我们也是一样的。所以我们讲一杯咖啡吸收宇宙能量，就是向谷歌学来的。就是把钱投出去，探索人类未来。我们支持给大学教授做基础研究，他就像一个灯塔一样，既可以照亮我们，也照亮别人。但是我们理解比别人快，所以做出的东西比别人快，仅此而已。 我们自己在编的15000多基础研究的科学家和专家是把金钱变成知识，我们还有60000多应用型人才是开发产品，把知识变成金钱。我们对外面科学家的探索，就是给予适当的支持。 记者：如果是这样的话，那基础研究就不适合由公司去做。 任正非：但是如果公司不做，我们就不能领导或领先这个时代，那我们就不能赚超额的钱，我们就不可能有超额的投资，那我们就变成一个代工厂了。我们为什么能胸有成竹一路领先？在电子上我们已经做出最先进的芯片ARM CPU、AI芯片，在光子的交换上，我们也是世界最领先的。在量子方面，我们在跟随，至少在研究别人的量子计算机出来后，我们怎么用。 我们在电子、光子、量子这三者之中，有两者是走在人类社会前面的，在量子计算是跟在后面的。所以开展基础研究，才可能有超额利润，才有钱做战略投入，才能领导社会前进。外面的科学家欢迎我们，因为我们就是把他们当作灯塔，我们不侵犯他们的任何利益。美国有一个拜杜法案，赋予大学和非盈利研究机构对于联邦政府资助的发明创造可以享有专利申请权和专利权，从而产生了促进科研成果转化的强大动力。我们也按照拜杜法案，我们没有什么私心，但我们不是和学校合作，主要是和教授合作，必须有这个领军人物我才跟你合作。 9、记者：如果您来评价华为目前的基础研究，华为处于什么样的技术水平？您个人的目标是什么？我记得两年前您参加国家科技大会时，您说华为进入了无人区，现在是不是还是这样一个水平？任正非：总体来说，我们对自己的基础研究评价应该还不够满意，为什么呢？这30年，其实我们真正的突破是数学，手机、系统设备是以数学为中心，但是在物理学、化学、神经学、脑学……其他学科上，我们才刚刚起步，还是落后的，未来的电子科学是融合这些科学的，还没有多少人愿意投奔我们。所以，我们在科学构建未来信息社会的结构过程中，我们还是不够的。 关于无人区，当时最主要是讲“时延”问题，比如现在无人驾驶等都是时延问题。前段时间，我太太和我小女儿在欧洲乘坐德国无人驾驶汽车在高速公路狂奔了两个多小时，欧洲已经在进入L3阶段的无人驾驶。大家也看到我们和奥迪在无人驾驶领域的合作，也是L3阶段。无人驾驶最高是L5阶段，达到L5阶段5G开始起作用，但是还有时延问题。 所以，现在真正无人区的探索就是降低时延，任何电路都一定有电容、电阻，一定会产生时延，人类社会要求无时延的时代是不存在的。时代发展进入饱和曲线阶段，我们刚好在这个曲线的平顶上，新公司很容易追上我们。这就是我们认为未来的风险。你们看，现在做一个电子产品多简单，买几个芯片一搭就出来了。我们的优势慢慢也不再是优势，这个领域里，我们担忧也跑不动了。 这次总理去比利时参观了IMEC的一个设计平台，总理看到这个平台能把人类电子带宽提高到3纳米和1纳米。如果到了极限，还满足不了人类的需求，石墨烯这时也还不能替代硅，怎么办？我们就把芯片叠起来，但最大的问题是要把这两个芯片中间的热量散出来，这也是尖端技术。所以说，热学将是电子工业中最尖端的科学，这方面我们的研究也是领先的，就是太抽象了。所以，应对未来的挑战，我们都在找路，但如果慢慢找来找去找不到，追兵也很快到了。 10、记者：之前与一位企业家做交流，他说过一句话“每天都战战兢兢，如履薄冰，担心被别人追赶上，担心用户抛弃自己的公司。”我想知道您有没有这样的担心？任正非：这个“战战兢兢、如履薄冰”，就是形容词，我们也天天说。如果真是这样子，就根本跑不动了。我们还是胸有成竹的，但是说话总是要夸大一点，好像自己真的是很担忧，大家不要听那些形容词。 记者：那“下一个倒下的会不会是华为”？ 任正非：一定。 记者：但不一定是“下一个”？ 记者：其他公司都在说要做百年老店，要做传承。 任正非：做百年老店是非常困难的，最主要的是要去除惰怠。曾经有首长说要总结一下华为公司的机制，我说首长您别总结，前20年是积极进步的，这10年是退步的，为什么？就是人们有钱就开始惰怠了，派他去艰苦地方不愿意去，艰苦工作也不愿意干了。如何能够祛除惰怠，对我们来说是挑战。所以我们强调自我批判，就是通过自我批判来逐渐祛除自我惰怠，但我认为并不容易，革自己的命比革别人的命要难得多得多。 11、记者：去年华为人力资源研讨会,大家给您提了一堆意见，总结成十宗罪。您觉得大家提的这些意见是否有道理，您按照这些意见去改进了吗？任正非：十宗罪，我们把它都贴心声社区的网上了，让18万员工去批判，大家就讨论应该怎么改。这样会形成一种文化，这种文化会使我们的一些内部的机制逐步地转变。我看心声社区一般只看批评，说好话的我就过滤过去。因为我要看到底基层发生了什么情况，管理层做得对不对。发现后，再找个人去调查一下是不是存在这样的问题。 12、记者：您谈了很多基础研究的内容，您年轻时有没有想过自己将来当一个科学家？您现在是不是觉得自己的人生走错路了？第二个问题，您刚才也讲到华为现在钱很多，不知道往哪花。华为的产品做得非常好，前段时间有个传言，说“华为要跟袁隆平合作搞海水稻”，很快华为就声明这是个假新闻，但是在这个传言背后，可能反映了很多人希望华为能够做更多、更好的产品，请问华为有没有跨界的想法？任正非：第一，华为公司几百人的时候，对准一个“城墙口”冲锋，几千人、几万人、十几万人冲锋还是对着同一个“城墙口”，并没有转变，而且我们每年对一个“城墙口”的炮击量已经超过150-200亿美金，这还仅仅是研发费用，其他部门也在冲锋，加起来大大超过这个量了。我们只有集中在一个点上突破，才能在人类社会中立足。当我们要拖上很多“拖斗车”、“马车”、“黄包车”……的时候，我们这个“高铁”也跑不动了。 钱多得花不出去，那只是一个说法，我们都是加大对未来的投资，要把钱花出去、花好也是不容易。每个部门要花钱，预算审查也是极其严格的。比如我们拨了36.8亿美金战略费用，他们怎么花没有压力吗？还有，我们有一个华为大学，培训的大多数是读了博士、硕士，包括还有很多海外名校毕业，实践几年很成功的员工，回来受再教育，然后再出去，再教育、再出去。这费用高得不可想象。华为大学现在还没有修好，下次欢迎你们再来参观。 13、记者：任总，您讲过“接下来的智能世界可能会有非常非常多的机会”，华为在多个领域已经成为了领导者，从芯片到服务器、云端，在全球也没有一家可以对标的企业了。华为在业务上有没有边界，边界在哪里？因为不少合作伙伴担心华为抢了他们的生意。任正非：其实我们做的就是“管道”，给信息流提供一种机会。我们做的服务器存储不就是“管道”中的一个“水池”吗？终端不就是“水龙头”吗？所有这些技术都是一脉相通的。为什么华为终端的技术进步那么快？是因为我们在管道技术上的战略储备很多，我们用不完，就把这些部门划给终端，科学家都为它们服务，所以很快就跃上来了。因此，跨界这个问题，我们是永远都是不会做的。前天西方记者也问我“你们会不会造汽车？”我说，我们永远不会造汽车。我们是做车联网的模块，汽车中的电子部分——边缘计算是我们做的，我们可能会是全世界做得最好的。但是它不是车，我们要和车配合起来，车用我们的模块进入自动驾驶。决不会造车的。因此，我们不会跨界，我们是有边界的，以电子流为中心的领域，非这个领域的都要砍掉。 14、记者：最近我看到很多报告或演讲，包括美国智库，提到未来在全球科技领域可能会有中美两个阵营。您对于未来科技行业的走势是怎么看的？因为华为从来不站队，但是现在这种大国博弈的情况下，华为还有可能独善其身吗？任正非：如果将来会出现中美博弈，中国首先还得重视教育。我们在海外派遣员工有4万多名，为什么大多数员工都不愿意回来？孩子上学问题，回来以后怎么插班，教育方式完全不一样。这样一系列问题，让我们的员工流动不起来，孩子回不来。即使在非洲，孩子可以上最好的学校，但是回到深圳就进不去学校。因此教育是我们国家最紧迫的问题，要充分满足孩子受教育的权利。每个家长最操心就是孩子。因此，盲目的人口红利化是错误的，因为社会的生产方式是走向人工智能。 东风汽车的竺总问我，我说“中国无人驾驶可以从拖拉机做起”，我们不与西方同一个轨道竞争，就把拖拉机做到24小时耕地，不怕蚊子，不怕下大雨，不怕爬高山，农业生产效率不就提高了吗？ 15、记者：您在采访中多次提到人工智能，我现在看到很多公司已经把人工智能当成一个主要的目标，言必称人工智能。您担心这个趋势会导致人工智能形成一个泡沫么？任正非：人工智能有可能是泡沫。但别害怕这个泡沫破灭，那些失败的专家工程师，我们招聘，为什么？我们需要改变我们的生产结构，改变我们在全世界的服务结构，我们需要这些人。为什么我要失败的人呢？失败的人就是理想太大，平台太小。但是我的平台很大，能够容纳你跳舞。为什么人工智能会出现泡沫化？就是同一个东西，这个世界实际上只需要一家公司，比如说办公系统，谁还能取代微软？真正的机器人出来后，90%的机器人公司就困难了。因此，我很难解释人工智能是不是有泡沫。我们公司在工程上，比如新疆高山上的基站，是京东快递小哥骑着摩托上了山，把设备按照我们的说明装好以后，我们人在西安调测，调测通过就验收了，报告、发票就出来了，钱就付给你了。如果我们不是采用人工智能的方法提升生产效率，我们公司就不可能实现低成本，不可能获得高利润，也不可能加大对未来的战略投入。 16、记者： 您认为华为当前主要是什么困难？任正非：我们觉得除了困难，都是困难，没有不困难。 17、记者：请您讲一讲国际业务，接下来华为在国际业务拓展方面还有哪些规划？任正非：没有变化，过去怎么做还怎么做。 记者：打算继续在哪些领域重点做？ 任正非：不改变现在的方向，不进入不熟悉的领域。 18、记者：虽然西方媒体也问过了，但是我们还是希望了解孟女士这个话题，希望您作为父亲来回答。您第一次听说女儿被加拿大扣留的时候是在什么场合？您现在与她沟通渠道顺畅吗，现在情况如何？1月29日是美国正式引渡的最后期限，有没有困难?任正非：孟晚舟和我本来是去阿根廷开同一个会议，而且她还是会议的主要主持者。她是在加拿大转机，不幸就被扣留了。我晚她两天才出发的，是从另外的地方转机的。我们会通过法律程序来解决这件事情。作为孟晚舟的父亲，首先感谢中国政府维护孟晚舟作为中国公民的权益，为她提供了领事保护。我也感谢社会各界人士对孟晚舟所表达的支持、关心和关注。 我与女儿现在就是打打电话，电话上也仅仅是讲讲笑话，晚舟也很坚强。 19、记者：您是反对封闭式的自主创新的，对不对？然后，您又提到最先发明量子计算机的一定是IBM或者微软。任正非：这是我个人的看法。 记者：华为可能不是第一个。 任正非：肯定不是。 记者：那我想问一下，一方面每年我们投入这么多钱在研究与创新，另一方面我要站在前人的肩膀上，关于技术创新的共享和自主研究，这两者的平衡点是什么？ 任正非：在精神上我是支持自主创新的。所有科学家的创新都是自主的，它是一种精神。我认为在尖端的未知上更多的强调自主创新是可以的，比如嫦娥4号，人家不给你，那你得自主。但是我们不能在低层面上强调自主创新，一个螺丝钉你也要自主？日本、德国的中小企业很了不起，日本一个企业几十年就做一个螺丝钉，这个螺丝钉最大的特点就是永不松动，全世界到处高速设备、高铁、飞机全部都用这家螺丝钉。我去过莱卡，莱卡就是一个乡村工厂，一个老太太，35年就做涂外层油漆的工作，说机器不能代替，做不到她那么精细，所以她还在做。我觉得踏踏实实做好一件事是可以的，但不要说人家已经做好了，我非要重复做一下才证明自己是光荣伟大的。我认为只有开放才可能快速的实现目标。 20、记者：这次很多事情可能都是因为美国而起。如果想要借这个平台对美国政府或者美国社会说一些话，您特别希望讲什么？任正非：我认为，美国发出不同声音的可能也是少量政客，他不能代表美国人民，也不能代表美国工业界、美国企业、美国科技界。美国的工业界和企业界还是坚定不移支持我们，坚定不移加强与我们合作。所以，少数政客的声音是会有很大的噪音，但是起到多大作用，最终还是要看结果。 21、记者：您为什么说特朗普是一个伟大的总统？这好像引起了很大的讨论。任正非：因为特朗普把税率降得非常低，有利于产业发展，对美国来说，这就具有了百年的竞争力。但是，如果他一天到晚去跟这个国家吵，吓唬那个国家，而且乱抓人，大家都不敢去投资，那么他减掉的税就没有人去补起来，美国经济就会开始大幅度下滑。但是下一位总统不会改变低税制度，他会到处去改善关系，他会说“你来投资吧，美国条件好，税低、土地便宜，什么都便宜”，也许美国真就振兴了。就降税这一条评价他高水平。邓小平挖了一块“洼地”，大量水往那里流，中国经济就崛起了。所以，是从这点来评价他是一个伟大的总统。但另外一点不是批评他吗？现在没人敢去美国投资。所以，他具有两面性。 我在英国，听卡梅伦、奥斯本讲过，要把税率降下来，同时把福利也减掉一些，正好对冲，经济是平衡的。福利怎么减呢？所有要领救济金的人首先要去申请就业，没有就业就去做社区服务，比如照顾孤寡老人，帮做家务，打扫街道，你不做，就不能领救济金。英国在不断推行降税，现在已经降到了17%了，英国重新恢复投资这个机会窗。 22、记者：刚才提到未来五年，华为将投入1000亿美元用于重构网络，那么能不能具体谈一下，这个重构包含哪些体系的调整？有没有具体的时间表？您的这种重构肯定不是对市场国际环境或者国际舆论做出的改变，一定是包含对于未来机会的战略判断，您认为世界的通信市场包含着哪些重大的机会点？任正非：我们所说的计划就是要把网络做到极简，把网络交易模式做到极简，把网络做到极安全，隐私保护遵从欧洲GDPR标准。达到这四个点，我们就依然会有增长。 记者：那未来的机会点呢？ 任正非：网络架构的重构，还有未来人类社会对于图像的需求，都会给我们带来巨大的空间。大家参观展厅的时候看了8K的电视画面，看了会喜欢吧？中国的北京、上海、广州、深圳经济已经具备这种条件了，那么为啥不可以做到位呢？ 23、记者：华为业务前景这么光明，为什么说华为下一步可能会倒下呢？任正非：早晚的事情，这是个哲学命题，不是一个现实命题。 24、记者：华为是世界上几乎唯一做B2B业务成功，做消费者B2C业务也非常成功的企业，你们是怎么做到的？任正非：我们把做网络的技术能力也应用到了手机业务。比如，手机的图像系统很好，就是来自我们网络的图像系统对数学的研究。下一步，我们网络连接业务会更成功，会是全世界最好、最智能化的连接，这些领域其实都是相关的。 25、记者：消费者业务的成功是偶然的吗？任正非：大家知道，世界会变成一个智能社会，智能社会怎么感知呢？必须要靠终端，终端的感知要靠传感器、显示器。所以，未来终端的路很宽广，包括物联网……，手机只是终端的一个领域。 26、记者：前两天您接受外媒采访，提到“隐私保护方面要学习苹果”，之前华为业务也说过“学习爱立信”。以华为目前的业务结构和体量，现在还有一个学习的榜样吗？或者说您觉得华为现在应该怎么做，在大方向上有哪些需要去布局的？任正非：第一，亚马逊的开发模式值得我们学习，一个卖书的书店突然成为全世界电信营运商的最大竞争对手，也是全世界电信设备商的最大竞争对手。第二，谷歌也很厉害，大家也看到“谷歌军团”的作战方式。第三，微软也很厉害。怎么没有学习榜样呢？到处都是老师，到处都可以学习。 27、记者：现在苹果也陷入了一个创新的困境，业绩、股市也在下滑的，您怎么看？任正非：苹果是一个伟大的公司，因为苹果推动了移动互联网的发展，使这个社会发生了天翻地覆的结构性改变。 28、记者：您希望中国的网友怎么来看待华为，您希望华为在海外能树立一个怎样的形象？任正非：我觉得呢，就是网友要更多的宽容心。大家也看到,有些科学家因为发布了一些不同的科学见解，然后被网友们骂得狗血淋头。科学家就像哥白尼一样，日心说在当时就是胡说八道，人还敢跟神做斗争，你比神还伟大了吗？那我们就要宽容一下今天的“哥白尼”，这样我们国家将来才有新东西。科学家会提出很多新东西，可能是莫名其妙的，千奇百怪的想法，我们要宽容他。 29、记者：任总，您是军队出身的背景，我们了解到您也是一名党员，这样的身份，对于您作为一个大型跨国企业的掌门人来说，是一种财富，还是一种负担？任正非：这两者没有必然的相关性，大家不要把商业模式和意识形态混淆起来。比如，西方的宗教是相信上帝的、相信神的，但火车是他们设计的，是靠煤炭推动的。所以，我们今天进入商业社会，不能因为我们是共产党员，就要去做雷锋无私奉献，就不要去搞商业模式，那为什么要搞市场经济呢？我们要用经济规律来对付经济规律。 30、记者：你们把网络安全和隐私保护作为今年的最高纲领，这是基于什么原因？任正非：这是永久的要求，不是今年的。为什么呢？过去我们是普通的传输和交换时代，任何病毒都进不去，所以最早80年代使用的通信系统没有网络安全问题。后来由于IP的出现，IP绕来绕去，可能会多几个缺口。未来时代是云时代，到处都是缺口，谁把网络安全做好了，客户就会买谁的。我们把网络安全提升了这样的高度来认识，是因为我们面临未来要支撑云时代。不是今年，是永远的。]]></content>
      <categories>
        <category>优秀文章</category>
      </categories>
      <tags>
        <tag>华为</tag>
        <tag>任正非</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取Geohash当前区域周围8个区域编码]]></title>
    <url>%2Farchives%2F7b922444.html</url>
    <content type="text"><![CDATA[由于GeoHash是用的Peano空间填充曲线实现的，因此会存在突变。如下图所示,很近的两个点分布在不同矩形区域，而两个较远的点缺分布在相同的区域，为了解决这问题，我们需要计算出该hash值附近的8个区域，再计算距离。参考 Geohash这种方式比较好理解，贴下例子就行了。[116.3967,44.9999]和[116.3967,45.0009]分别出现在各自附近的区域中，周围8个区域的Geohash怎么计算得到呢？很简单，当Geohash长度是8时，对应的每个最小单元 12double latUnit = (Max_Lat - Min_Lat) / (1 &lt;&lt; 20);double lngUnit = (Max_Lng - Min_Lng) / (1 &lt;&lt; 20); 其中20是因为二进制拆分了20次，对应长度为8. 这样可以计算出8个分别分布在周围8个区域的地点，根据地点便可以计算出周围8个区域的Geohash. 12345678[lat + latUnit, lng][lat - latUnit, lng][lat, lng + lngUnit][lat, lng - lngUnit][lat + latUnit, lng + lngUnit][lat + latUnit, lng - lngUnit][lat - latUnit, lng + lngUnit][lat - latUnit, lng - lngUnit] 参考资料 Geohash当前区域周围8个区域编码]]></content>
      <categories>
        <category>技术开发</category>
        <category>Map</category>
      </categories>
      <tags>
        <tag>GeoHash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GeoHash算法，实现快速查找附近的点]]></title>
    <url>%2Farchives%2F87e9c296.html</url>
    <content type="text"><![CDATA[做任何跟地理位置相关的服务，位置如何表示及存储是绝对绕不开的问题之一。位置的表示倒是可以用经纬度，但是索引和检索的时候，经纬度这种二维表示法就比较麻烦了，这时我们就可以利用 GeoHash 进行『降维攻击』来解决这个问题了。 Geohash介绍应用场景 POI（Point of Interest）：查找某个坐标附近的支部，餐厅等常见需求 热点分析：统计某个地图区域的热度；Geohash算法地图上一般是使用经度和纬度两个维度来唯一的确定一个点，而geohash采用经纬度二维值转为一维的值。 优点： 只需要对一个字段进行索引，提高性能、降低复杂度 可转成可排序，可比较的字符串，满足灵活的需求 具体详细的介绍参考 维基百科： https://en.wikipedia.org/wiki/Geohash 以下文章转自：http://www.cnblogs.com/LBSer/p/3310455.html 引子机机是个好动又好学的孩子，平日里就喜欢拿着手机地图点点按按来查询一些好玩的东西。某一天机机到北海公园游玩，肚肚饿了，于是乎打开手机地图，搜索北海公园附近的餐馆，并选了其中一家用餐。 饭饱之后机机开始反思了，地图后台如何根据自己所在位置查询来查询附近餐馆的呢？苦思冥想了半天，机机想出了个方法：计算所在位置P与北京所有餐馆的距离，然后返回距离&lt;=1000米的餐馆。小得意了一会儿，机机发现北京的餐馆何其多啊，这样计算不得了，于是想了，既然知道经纬度了，那它应该知道自己在西城区，那应该计算所在位置P与西城区所有餐馆的距离啊，机机运用了递归的思想，想到了西城区也很多餐馆啊，应该计算所在位置P与所在街道所有餐馆的距离，这样计算量又小了，效率也提升了。 机机的计算思想很朴素，就是通过过滤的方法来减小参与计算的餐馆数目，从某种角度上讲，机机在使用索引技术。 一提到索引，大家脑子里马上浮现出B树索引，因为大量的数据库（如MySQL、oracle、PostgreSQL等）都在使用B树。B树索引本质上是对索引字段进行排序，然后通过类似二分查找的方法进行快速查找，即它要求索引的字段是可排序的，一般而言，可排序的是一维字段，比如时间、年龄、薪水等等。但是对于空间上的一个点（二维，包括经度和纬度），如何排序呢？又如何索引呢？解决的方法很多，下文介绍一种方法来解决这一问题。 思想：如果能通过某种方法将二维的点数据转换成一维的数据，那样不就可以继续使用B树索引了嘛。那这种方法真的存在嘛，答案是肯定的。目前很火的GeoHash算法就是运用了上述思想，下面我们就开始GeoHash之旅吧。 一、感性认识GeoHash首先来点感性认识，http://openlocation.org/geohash/geohash-js/ (已失效，换成 http://geohash.gofreerange.com/ )提供了在地图上显示geohash编码的功能。 1）GeoHash将二维的经纬度转换成字符串，比如下图展示了北京9个区域的GeoHash字符串，分别是WX4ER，WX4G2、WX4G3等等，每一个字符串代表了某一矩形区域。也就是说，这个矩形区域内所有的点（经纬度坐标）都共享相同的GeoHash字符串，这样既可以保护隐私（只表示大概区域位置而不是具体的点），又比较容易做缓存，比如左上角这个区域内的用户不断发送位置信息请求餐馆数据，由于这些用户的GeoHash字符串都是WX4ER，所以可以把WX4ER当作key，把该区域的餐馆信息当作value来进行缓存，而如果不使用GeoHash的话，由于区域内的用户传来的经纬度是各不相同的，很难做缓存。 2）字符串越长，表示的范围越精确。如图所示，5位的编码能表示10平方千米范围的矩形区域，而6位编码能表示更精细的区域（约0.34平方千米） 3）字符串相似的表示距离相近（特殊情况后文阐述），这样可以利用字符串的前缀匹配来查询附近的POI信息。如下两个图所示，一个在城区，一个在郊区，城区的GeoHash字符串之间比较相似，郊区的字符串之间也比较相似，而城区和郊区的GeoHash字符串相似程度要低些。 通过上面的介绍我们知道了GeoHash就是一种将经纬度转换成字符串的方法，并且使得在大部分情况下，字符串前缀匹配越多的距离越近，回到我们的案例，根据所在位置查询来查询附近餐馆时，只需要将所在位置经纬度转换成GeoHash字符串，并与各个餐馆的GeoHash字符串进行前缀匹配，匹配越多的距离越近。 二、GeoHash算法的步骤下面以北海公园为例介绍GeoHash算法的计算步骤： 2.1. 根据经纬度计算GeoHash二进制编码地球纬度区间是[-90,90]， 北海公园的纬度是39.928167，可以通过下面算法对纬度39.928167进行逼近编码: 1）区间[-90,90]进行二分为[-90,0),[0,90]，称为左右区间，可以确定39.928167属于右区间[0,90]，给标记为1； 2）接着将区间[0,90]进行二分为 [0,45),[45,90]，可以确定39.928167属于左区间 [0,45)，给标记为0； 3）递归上述过程39.928167总是属于某个区间[a,b]。随着每次迭代区间[a,b]总在缩小，并越来越逼近39.928167； 4）如果给定的纬度x（39.928167）属于左区间，则记录0，如果属于右区间则记录1，这样随着算法的进行会产生一个序列1011100，序列的长度跟给定的区间划分次数有关。 根据纬度算编码 同理，地球经度区间是[-180,180]，可以对经度116.389550进行编码。根据经度算编码 2.2. 组码通过上述计算，纬度产生的编码为10111 00011，经度产生的编码为11010 01011。偶数位放经度，奇数位放纬度，把2串编码组合生成新串：11100 11101 00100 01111。 最后使用用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，首先将11100 11101 00100 01111转成十进制，对应着28、29、4、15，十进制对应的编码就是wx4g。同理，将编码转换成经纬度的解码算法与之相反，具体不再赘述。 三、GeoHash Base32编码长度与精度下表摘自维基百科：http://en.wikipedia.org/wiki/Geohash 可以看出，当geohash base32编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据数据情况进行选择。 四、GeoHash算法上文讲了GeoHash的计算步骤，仅仅说明是什么而没有说明为什么？为什么分别给经度和维度编码？为什么需要将经纬度两串编码交叉组合成一串编码？本节试图回答这一问题。 如图所示，我们将二进制编码的结果填写到空间中，当将空间划分为四块时候，编码的顺序分别是左下角00，左上角01，右下脚10，右上角11，也就是类似于Z的曲线，当我们递归的将各个块分解成更小的子块时，编码的顺序是自相似的（分形），每一个子快也形成Z曲线，这种类型的曲线被称为Peano空间填充曲线。 这种类型的空间填充曲线的优点是将二维空间转换成一维曲线（事实上是分形维），对大部分而言，编码相似的距离也相近， 但Peano空间填充曲线最大的缺点就是突变性，有些编码相邻但距离却相差很远，比如0111与1000，编码是相邻的，但距离相差很大。 除Peano空间填充曲线外，还有很多空间填充曲线，如图所示，其中效果公认较好是Hilbert空间填充曲线，相较于Peano曲线而言，Hilbert曲线没有较大的突变。为什么GeoHash不选择Hilbert空间填充曲线呢？可能是Peano曲线思路以及计算上比较简单吧，事实上，Peano曲线就是一种四叉树线性编码方式。 五、使用注意点1）由于GeoHash是将区域划分为一个个规则矩形，并对每个矩形进行编码，这样在查询附近POI信息时会导致以下问题，比如红色的点是我们的位置，绿色的两个点分别是附近的两个餐馆，但是在查询的时候会发现距离较远餐馆的GeoHash编码与我们一样（因为在同一个GeoHash区域块上），而较近餐馆的GeoHash编码与我们不一致。这个问题往往产生在边界处。 解决的思路很简单，我们查询时，除了使用定位点的GeoHash编码进行匹配外，还使用周围8个区域的GeoHash编码，这样可以避免这个问题。2）我们已经知道现有的GeoHash算法使用的是Peano空间填充曲线，这种曲线会产生突变，造成了编码虽然相似但距离可能相差很大的问题，因此在查询附近餐馆时候，首先筛选GeoHash编码相似的POI点，然后进行实际距离计算。 geohash只是空间索引的一种方式，特别适合点数据，而对线、面数据采用R树索引更有优势（可参考：深入浅出空间索引：为什么需要空间索引）。 六、应用了解了具体的 GeoHash 算法之后，我们可以来看看具体在实际应用中可能遇到的各种问题： GeoHash 编码对应的是矩形区域，在边界处需要处理临近区域，但是具体区域的编码并不完全跟 hash 之后的字符串一致（参考前面 0111 和 1000的例子）。为此，我们需要使用周围八个区域的 GeoHash 编码，通过有限扩大搜索范围的方法来解决这个问题 如果是用传统关系型数据库，可以直接利用 GeoHash 的前缀进行检索，比方说 select * from locations where geohash like ‘ws03%’ 如果需要兼顾速度与精确度，那么同时保存经纬度和 GeoHash 即可，利用 GeoHash 来缩小范围，再利用经纬度进行精确计算 计算周围 8 个矩形区域，利用原始的 GeoHash 字符串显然是不行的（考虑分别处于赤道两边且很相近的两个点）对于经度一个维度来说，无论切分几次，它的左邻和右邻都只会和它相差1。画一下就知道它是一棵有序的01满二叉树。根据当前矩形的经度串，很容易就获得了它的两个东西邻接经度串。同理，可以根据其纬度串获取南北邻接纬度串。连同当前矩形的经度串和纬度串，就能组合得到周边的8个矩形的二进制串了。Base32 编码后的到 geohash 值，即是所需要的8个索引了 Base32 是一种简单的加密算法，详情请参考后文链接 参考文献 http://en.wikipedia.org/wiki/Geohash http://geohash.gofreerange.com/ GeoHash Java实现 https://my.oschina.net/shipley/blog/704964 GeoHash存储过过程实现 Base32 - From Wikipedia, the free encyclopedia GeoHash 指南]]></content>
      <categories>
        <category>技术开发</category>
        <category>Map</category>
      </categories>
      <tags>
        <tag>GeoHash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RecyclerView根据内容多少动态设置高度]]></title>
    <url>%2Farchives%2Fed7c431b.html</url>
    <content type="text"><![CDATA[在项目开发中我们经常会遇到需要RecyclerView和ScrollViewq嵌套的情况，一般我们都需要把RecyclerView中的内容全部显示，然后设置RV的高度为所有内容的高度+RV Padding+item 之间的Divider。原理很简单，实现起来也很简单。 创建RV ViewHolder 1234567891011121314public abstract class MyViewHolder extends RecyclerView.ViewHolder &#123; TextView tv_item; ImageView img_delete_item; public MyViewHolder(View itemView) &#123; super(itemView); tv_item = (TextView) itemView.findViewById(R.id.tv_single); img_delete_item = (ImageView) itemView.findViewById(R.id.img_toprecycle_delete); &#125; public abstract void setFixedHeight();&#125; 实现自定义VH 1234567891011121314151617public MyViewHolder onCreateViewHolder(final ViewGroup parent, int viewType) &#123; View view = mInflater.inflate(R.layout.item_useview, parent, false); MyViewHolder viewHolder = new MyViewHolder(view)&#123; @Override public void setFixedHeight() &#123; // magic happening here ViewGroup.LayoutParams parentParams = parent.getLayoutParams(); parentParams.height = ((RecyclerView) parent).computeVerticalScrollRange() + parent.getPaddingTop() + parent.getPaddingBottom(); parent.setLayoutParams(parentParams); &#125; &#125;; return viewHolder; &#125; 设置RV高度 1234//绑定viewholder public void onBindViewHolder(MyViewHolder holder, final int position) &#123; holder.setFixedHeight(); &#125;]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android P使用私有API弹出warning(转载)]]></title>
    <url>%2Farchives%2Ff2a632a2.html</url>
    <content type="text"><![CDATA[转自：https://huangyu.github.io/archives/35fd3a81.html 最近手头的Mix2s接收到MIUI官方开发版的推送，可以升级为Android P，很开心，然后升级后，部分应用就打不开或者挂了，比如某奇艺（买了VIP看剧都看不了，强烈吐槽）。于是顺手检查了一下公司的应用，发现都能正常启动和使用，但是最近在做SDK的接入Demo，一打开发现弹出了warning对话框 起初以为是targetAPI的问题，升级到28问题依旧，于是Google了一下，发现是从Android P开始，系统会限制非SDK的接口调用，也就是如果App通过反射使用系统隐藏的API，则会弹出提示。 具体的细节可参考：https://developer.android.com/about/versions/pie/restrictions-non-sdk-interfaces?hl=zh-cn Android P中，将所有API分为以下几类： 白名单：SDK的API，正常使用； 浅灰名单（light greylist）会在logcat弹出提示：Accessing hidden field Landroid/os/Message;-&gt;flags:I (light greylist, JNI)； 深灰名单（dark greylist）则debug版本在会弹出dialog提示框，在release版本会有Toast提示，均提示为”Detected problems with API compatibility”。； 黑名单(darklist)则会引发异常。 看了logcat日志，项目中许多地方使用到了系统私有API，直接全部修改工作量比较大，于是寻找解决方案。 最后发现原因是在SDK 28版本中Activity中的performStart有这个警告，只要在调用performStart前，ActivityThread的mHiddenApiWarningShown变量的值为true，产生这个警告的条件就无法满足。 1234567891011121314151617181920212223boolean isAppDebuggable = (mApplication.getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != 0;// This property is set for all non-user builds except final releaseboolean isApiWarningEnabled = SystemProperties.getInt(&quot;ro.art.hiddenapi.warning&quot;, 0) == 1;if (isAppDebuggable || isApiWarningEnabled) &#123; if (!mMainThread.mHiddenApiWarningShown &amp;&amp; VMRuntime.getRuntime().hasUsedHiddenApi()) &#123; // Only show the warning once per process. mMainThread.mHiddenApiWarningShown = true; String appName = getApplicationInfo().loadLabel(getPackageManager()) .toString(); String warning = &quot;Detected problems with API compatibility\n&quot; + &quot;(visit g.co/dev/appcompat for more info)&quot;; if (isAppDebuggable) &#123; new AlertDialog.Builder(this) .setTitle(appName) .setMessage(warning) .setPositiveButton(android.R.string.ok, null) .setCancelable(false) .show(); &#125; else &#123; Toast.makeText(this, appName + &quot;\n&quot; + warning, Toast.LENGTH_LONG).show(); &#125; &#125;&#125; 具体是在Application OnCreate加入以下代码：（通过反射私有变量来解决私有API的warning，也是有趣） 1234567891011try &#123; Class&lt;?&gt; cls = Class.forName(&quot;android.app.ActivityThread&quot;); Method declaredMethod = cls.getDeclaredMethod(&quot;currentActivityThread&quot;); declaredMethod.setAccessible(true); Object activityThread = declaredMethod.invoke(null); Field mHiddenApiWarningShown = cls.getDeclaredField(&quot;mHiddenApiWarningShown&quot;); mHiddenApiWarningShown.setAccessible(true); mHiddenApiWarningShown.setBoolean(activityThread, true);&#125; catch (Exception e) &#123; e.printStackTrace();&#125; 最终warning框不再弹出，但是logcat依旧，在Logcat中看到，修改mHiddenApiWarningShown本身就是dark greylist，估计后续该办法会给官方禁用。 最好的解决方式是根据logcat的warning提示，对使用darklist的地方必须进行修改，尽量避免使用dark greylist方法。]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android P</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cookie 的路径以及 Cookie 域，设置同一域名下多个Tomcat共享Cookie]]></title>
    <url>%2Farchives%2F6d1addbc.html</url>
    <content type="text"><![CDATA[Cookie 路径cookie 一般都是由于用户访问页面而被创建的，可是并不是只有在创建 cookie 的页面才可以访问这个cookie。在默认情况下，出于安全方面的考虑，只有与创建 cookie 的页面处于同一个目录或在创建cookie页面的子目录下的网页才可以访问。那么此时如果希望其父级或者整个网页都能够使用cookie，就需要进行路径的设置。 让这个设置的cookie 能被其他目录或者父级的目录访问的方法：1document.cookie = &quot;userName = 独行冰海; path=/&quot;; Cookie 域路径能解决在同一个域下访问 cookie 的问题，那么如何解决同一个主域下的访问问题呢？我们可以通过指定可访问cookie的主机名来进行设置。 document.cookie=”name=value; domain=cookieDomain”; 例如 “www.baidu.com&quot; 与 “mp3.baidu.com” 公用一个关联的域名”baidu.com”，我们如果想让 “www.baidu.com&quot; 下的cookie被 “mp3.baidu.com” 访问，我们就需要用到 cookie 的domain属性，并且需要把path属性设置为 “/“ 这里需要注意一点：一定的是同域之间的访问，不能把domain的值设置成非主域的域名。 默认cookie的域是当前域名，默认的路径的设置cookie时的当前页面的目录路径。如果想要跨域或者在其他的路径下访问cookie就必须要重新设置这两个属性，domain和path。 www.baidu.com/content/example/3.jsp则域domain为www.baidu.com, 路径path为/content/example 1document.cookie = &quot;username=独行冰海; path=/; domain=baidu.com&quot;]]></content>
      <categories>
        <category>技术开发</category>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用百度地图API解决区县级以下行政区划轮廓问题]]></title>
    <url>%2Farchives%2F9b175123.html</url>
    <content type="text"><![CDATA[我们在项目开发中经常会遇到在地图上显示区划轮廓的情况，所幸现在各大地图服务商都提供了获取区划边界（县区以上）的功能（有时候边界不准，但总比没有强），例如百度提供的显示区划的边界。百度地图demo例子： http://lbsyun.baidu.com/jsdemo.htm#c1_10 以及基于高德地图的区划显示：http://webapi.amap.com/ui/1.0/ui/geo/DistrictExplorer/examples/index.html?guide=1 但是改功能只能展示区级及以上范围行政区划。 研究了一下百度地图行政区划的实现方式，其实就是存储了行政区划的边界点集合，显示时候其实是显示的点的多边形的集合。12345678910111213141516171819function getBoundary()&#123; var bdary = new BMap.Boundary(); bdary.get(&quot;北京市海淀区&quot;, function(rs)&#123; //获取行政区域 map.clearOverlays(); //清除地图覆盖物 var count = rs.boundaries.length; //行政区域的点有多少个 if (count === 0) &#123; alert(&apos;未能获取当前输入行政区域&apos;); return ; &#125; var pointArray = []; for (var i = 0; i &lt; count; i++) &#123; var ply = new BMap.Polygon(rs.boundaries[i], &#123;strokeWeight: 2, strokeColor: &quot;#ff0000&quot;&#125;); //建立多边形覆盖物 map.addOverlay(ply); //添加覆盖物 pointArray = pointArray.concat(ply.getPath()); &#125; map.setViewport(pointArray); //调整视野 addlabel(); &#125;); &#125; 那我们自己也可以按照这个逻辑来实现乡镇行政区划的展示，那现在的问题就是如何来获取行政区边界的点集,从百度地图api V1.1版本，polygon类提供了enableEditing()功能，我们可以在地图上拖动编辑边界点，然后，再通过polygon类提供的getPath()方法返回边界点数组，将我们自己编辑过的边界点数组存储起来，就实现了行政区划的数字化工作。 整体实现见文件：地图经纬度描点工具 关键代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445# 显示所有区划function showMyArea() &#123; var areas = []; //铁西区 var siping_tiexiqu = &quot;124.394261,43.200225;124.363162,43.14644;124.359246,43.131221;124.342686,43.13835;124.327579,43.153527;124.299905,43.163609;124.292776,43.176343;124.281179,43.184908;124.286515,43.199605;124.2953,43.209288;124.28495,43.235119;124.301071,43.234313;124.30711,43.23646;124.309022,43.250198;124.313187,43.255563;124.320604,43.254237;124.328298,43.256463;124.332289,43.255015;124.335821,43.24598;124.349095,43.244098;124.356816,43.248521;124.369427,43.248006;124.374714,43.243444;124.390598,43.244364;124.399349,43.239998;124.410266,43.243724;124.415474,43.238964;124.425377,43.239837;124.423989,43.235824;124.42865,43.236023;124.43232,43.232498;124.438555,43.233977;124.438702,43.228258;124.452916,43.225358;124.446783,43.218094;124.435393,43.215793;124.423932,43.203086;124.403633,43.203134;124.394261,43.200225&quot;;// var siping_lishu = &quot;124.717877,43.184866;124.66483,43.180224;124.643888,43.1635;124.634191,43.151678;124.628805,43.15007;124.61549,43.165761;124.599496,43.167858;124.578632,43.183615;124.572448,43.184601;124.569519,43.182571;124.571261,43.188129;124.531548,43.186809;124.525446,43.196129;124.494772,43.206798;124.488282,43.215329;124.476199,43.222616;124.438702,43.228258;124.438555,43.233977;124.43232,43.232498;124.42865,43.236023;124.423989,43.235824;124.425377,43.239837;124.415474,43.238964;124.410266,43.243724;124.399349,43.239998;124.390598,43.244364;124.374714,43.243444;124.369427,43.248006;124.356816,43.248521;124.349095,43.244098;124.340037,43.245237;124.335821,43.24598;124.331431,43.255935;124.320604,43.254237;124.314992,43.256494;124.309022,43.250198;124.30853,43.237342;124.294073,43.234175;124.283577,43.235176;124.28107,43.239702;124.269164,43.237759;124.266655,43.245038;124.259782,43.238071;124.257449,43.24366;124.251762,43.243022;124.249587,43.239765;124.241543,43.242631;124.235055,43.241337;124.231932,43.248111;124.225847,43.247806;124.229393,43.251877;124.22312,43.252848;124.222754,43.262281;124.208845,43.25729;124.205514,43.252726;124.201234,43.253584;124.198692,43.24972;124.195014,43.252969;124.184336,43.249269;124.183183,43.25468;124.179313,43.255896;124.175818,43.250119;124.164593,43.257501;124.157209,43.254853;124.147483,43.258949;124.134178,43.254178;124.121673,43.255854;124.119411,43.2828;124.108225,43.299548;124.051683,43.295149;124.041668,43.289664;124.03353,43.289105;124.007062,43.311549;124.001684,43.312088;123.956243,43.356327;123.941881,43.359869;123.928481,43.366864;123.904879,43.363339;123.899711,43.377361;123.907784,43.386242;123.902929,43.392938;123.897976,43.396915;123.877266,43.40022;123.853355,43.425646;123.875252,43.444157;123.872991,43.459346;123.847204,43.476725;123.837107,43.474812;123.799451,43.498242;123.791182,43.483941;123.784907,43.483314;123.772711,43.495354;123.778534,43.513874;123.784022,43.516719;123.785764,43.522433;123.792631,43.522182;123.798089,43.525946;123.799205,43.542823;123.809716,43.552573;123.830938,43.55756;123.842469,43.55425;123.852855,43.557246;123.868418,43.555772;123.886379,43.56175;123.890321,43.565408;123.892139,43.586177;123.899506,43.590187;123.900722,43.594354;123.910263,43.597505;123.927287,43.597878;123.931247,43.604624;123.936321,43.601905;123.944076,43.602656;123.952315,43.619391;123.96463,43.620919;123.976669,43.63034;123.985999,43.628109;123.987383,43.632232;123.997123,43.635666;124.003678,43.650564;124.015595,43.649861;124.02115,43.662984;124.033997,43.665187;124.045211,43.662798;124.055615,43.667878;124.067245,43.693561;124.084376,43.70277;124.105542,43.707627;124.10714,43.714171;124.115462,43.711159;124.141787,43.715909;124.136447,43.710529;124.151598,43.709754;124.155335,43.713911;124.181124,43.713578;124.183484,43.719179;124.195015,43.718619;124.204286,43.736224;124.210587,43.7382;124.211798,43.748612;124.219898,43.751659;124.214398,43.761009;124.224091,43.764159;124.293399,43.768221;124.363848,43.776467;124.408229,43.767412;124.417658,43.770994;124.415863,43.766106;124.435428,43.762663;124.465599,43.765999;124.468391,43.768789;124.487087,43.756202;124.489668,43.758576;124.503633,43.754509;124.536092,43.759688;124.541466,43.752034;124.55246,43.749835;124.560309,43.737036;124.581525,43.727615;124.605665,43.695414;124.63191,43.687309;124.669728,43.666632;124.685555,43.634384;124.681797,43.610145;124.68706,43.595558;124.697827,43.582857;124.698733,43.560558;124.691779,43.5354;124.681796,43.520622;124.683705,43.512157;124.716562,43.448648;124.735872,43.428534;124.744233,43.400559;124.763803,43.386218;124.762479,43.372668;124.768286,43.361576;124.766678,43.354669;124.773502,43.350665;124.780015,43.332178;124.771381,43.320117;124.773549,43.314083;124.766845,43.311227;124.761519,43.303088;124.76599,43.284148;124.779824,43.279007;124.789961,43.262506;124.806291,43.249429;124.804008,43.245594;124.780772,43.238268;124.789005,43.225899;124.785969,43.220874;124.781806,43.221451;124.766526,43.214592;124.749493,43.214538;124.742382,43.211513;124.731807,43.203054;124.722254,43.187024;124.717877,43.184866&quot;; var siping_shuangliao = &quot;124.042873,43.790715;124.051277,43.786682;124.052739,43.778252;124.058225,43.772763;124.077469,43.763807;124.088468,43.748916;124.080787,43.7408;124.08685,43.736531;124.081597,43.725383;124.085757,43.719901;124.065518,43.700331;124.067245,43.693561;124.055615,43.667878;124.045211,43.662798;124.033997,43.665187;124.02115,43.662984;124.015595,43.649861;124.003678,43.650564;123.997123,43.635666;123.987383,43.632232;123.985999,43.628109;123.976669,43.63034;123.96463,43.620919;123.952315,43.619391;123.944076,43.602656;123.936321,43.601905;123.931247,43.604624;123.927287,43.597878;123.902776,43.59565;123.892139,43.586177;123.890321,43.565408;123.886379,43.56175;123.868418,43.555772;123.852855,43.557246;123.842469,43.55425;123.828592,43.557384;123.81302,43.554498;123.802316,43.547013;123.798628,43.54067;123.798672,43.526677;123.792631,43.522182;123.785764,43.522433;123.774051,43.504054;123.772711,43.495354;123.777268,43.489891;123.752252,43.476509;123.759203,43.469826;123.757652,43.459991;123.751933,43.457362;123.750169,43.452679;123.755332,43.445024;123.715638,43.422409;123.716833,43.418282;123.709243,43.409574;123.711438,43.402334;123.705994,43.396928;123.715997,43.391705;123.703311,43.388443;123.712092,43.382062;123.710983,43.377456;123.62133,43.373124;123.598131,43.379545;123.522193,43.444011;123.512911,43.45786;123.500463,43.465142;123.494028,43.477091;123.483002,43.473455;123.472841,43.462331;123.461033,43.456747;123.459223,43.446648;123.447419,43.42816;123.433992,43.428351;123.43603,43.439693;123.427419,43.450086;123.379298,43.47231;123.362449,43.485943;123.34236,43.493273;123.332469,43.503763;123.327763,43.511364;123.33164,43.523684;123.310911,43.540146;123.320041,43.557667;123.348534,43.561271;123.378195,43.570561;123.389297,43.568752;123.389387,43.571749;123.396067,43.572015;123.463797,43.557764;123.460202,43.566822;123.46838,43.577293;123.452914,43.587256;123.441784,43.587736;123.432856,43.605675;123.44679,43.60626;123.467166,43.599959;123.471532,43.591476;123.480863,43.597734;123.49698,43.594172;123.517193,43.599177;123.519948,43.610441;123.513174,43.617549;123.51985,43.621579;123.515464,43.626076;123.520978,43.628135;123.517585,43.631613;123.529982,43.635857;123.53534,43.631656;123.53848,43.632349;123.536687,43.635355;123.543916,43.640053;123.539329,43.647914;123.5444,43.652612;123.525798,43.687287;123.532239,43.696493;123.531603,43.702222;123.525847,43.706869;123.52596,43.718158;123.516232,43.722883;123.505241,43.739671;123.496774,43.737758;123.487567,43.745904;123.483789,43.77504;123.494444,43.776501;123.501559,43.78545;123.499407,43.803716;123.481611,43.840772;123.482287,43.856787;123.452258,43.893516;123.430365,43.93139;123.419071,43.936521;123.402802,43.96007;123.388592,43.958376;123.384068,43.964666;123.378099,43.962544;123.373771,43.965703;123.373577,43.969303;123.383861,43.979299;123.395591,43.981438;123.395565,43.984415;123.364993,44.016265;123.356972,44.0382;123.34751,44.051899;123.342118,44.073228;123.35943,44.077181;123.399417,44.077001;123.473648,44.087508;123.545063,44.082973;123.564344,44.089648;123.594181,44.095005;123.615549,44.087754;123.644973,44.083419;123.654037,44.093894;123.664629,44.097616;123.671401,44.111337;123.687419,44.112253;123.690863,44.110459;123.700227,44.083833;123.708153,44.082213;123.722556,44.071261;123.72776,44.061455;123.742862,44.052214;123.760658,44.047782;123.774276,44.035587;123.778164,44.027963;123.772542,44.021461;123.772747,44.016087;123.758252,44.00863;123.762618,44.006331;123.945659,43.99816;124.015917,44.00685;124.024136,44.011349;124.029537,43.97389;124.043655,43.935458;124.068589,43.904531;124.071157,43.896849;124.084317,43.887286;124.093782,43.873998;124.086758,43.860948;124.086314,43.847292;124.077004,43.81536;124.066149,43.803093;124.049835,43.798838;124.042873,43.790715&quot;;// var siping_tiedong = &quot;124.705676,43.066287;124.694906,43.059818;124.693465,43.043515;124.683754,43.033515;124.676525,43.008178;124.660432,42.99986;124.6669,42.98847;124.665799,42.981285;124.662003,42.979528;124.651681,42.981089;124.641698,42.97714;124.638527,42.965856;124.643466,42.960056;124.636521,42.955115;124.627582,42.953923;124.626315,42.947049;124.610895,42.942614;124.608754,42.929016;124.590857,42.911976;124.576528,42.905436;124.566758,42.896293;124.556547,42.896736;124.548121,42.892854;124.544029,42.874418;124.540939,42.873835;124.537413,42.877992;124.521088,42.879005;124.5037,42.868654;124.483558,42.863731;124.471792,42.85312;124.478175,42.837632;124.475871,42.830389;124.469195,42.828292;124.456918,42.832002;124.457914,42.858621;124.454402,42.869513;124.442829,42.874664;124.442411,42.885941;124.435814,42.886351;124.430807,42.880584;124.415876,42.886135;124.378219,42.886463;124.373799,42.888743;124.37172,42.90827;124.385047,42.918898;124.394206,42.916099;124.401643,42.921126;124.402872,42.926244;124.416546,42.927711;124.424387,42.935146;124.434587,42.936012;124.439488,42.944455;124.448357,42.948497;124.450013,42.952171;124.444542,42.958783;124.443686,42.969251;124.432745,42.974805;124.42448,42.983304;124.416905,42.983039;124.403225,42.976022;124.378916,42.976809;124.372223,42.981688;124.361067,42.98421;124.353018,42.995196;124.340034,43.005225;124.342607,43.009178;124.355846,43.014961;124.407003,43.057656;124.432235,43.085352;124.402742,43.098544;124.374603,43.125785;124.359246,43.131221;124.363162,43.14644;124.397274,43.202349;124.423932,43.203086;124.435393,43.215793;124.446783,43.218094;124.452916,43.225358;124.469939,43.224055;124.488282,43.215329;124.495937,43.2062;124.525446,43.196129;124.531548,43.186809;124.571261,43.188129;124.569519,43.182571;124.572448,43.184601;124.578632,43.183615;124.599496,43.167858;124.61549,43.165761;124.628805,43.15007;124.634191,43.151678;124.643888,43.1635;124.66483,43.180224;124.720662,43.185079;124.731807,43.203054;124.742382,43.211513;124.749493,43.214538;124.766526,43.214592;124.781806,43.221451;124.785969,43.220874;124.784753,43.215893;124.789283,43.207608;124.797406,43.202439;124.802947,43.202128;124.862577,43.152095;124.882296,43.146951;124.889477,43.140778;124.876792,43.130429;124.865065,43.125194;124.847178,43.132478;124.82973,43.13089;124.817815,43.124223;124.803436,43.128672;124.792125,43.123213;124.789136,43.109875;124.765721,43.093879;124.756951,43.077764;124.750536,43.075246;124.7301,43.075588;124.705676,43.066287&quot;;// var siping_yitong = &quot;125.69856,43.159455;125.71094,43.145087;125.715378,43.134793;125.725056,43.129752;125.763785,43.135943;125.789178,43.103631;125.761329,43.092263;125.738352,43.092162;125.744211,43.081889;125.738983,43.071085;125.715416,43.063864;125.688822,43.065002;125.668908,43.083287;125.666393,43.082402;125.665934,43.066856;125.670723,43.061151;125.641169,43.076562;125.615797,43.073263;125.591668,43.076397;125.565144,43.096881;125.549985,43.102503;125.500886,43.106488;125.485028,43.155521;125.485218,43.169048;125.496754,43.187553;125.490238,43.201717;125.485311,43.207353;125.470036,43.209848;125.463224,43.221474;125.453818,43.22573;125.453798,43.229729;125.443863,43.2291;125.440123,43.236465;125.427152,43.2392;125.416982,43.235636;125.408221,43.225987;125.379634,43.230478;125.374088,43.225064;125.379629,43.207776;125.377206,43.192683;125.362836,43.168997;125.3726,43.158892;125.407072,43.153791;125.408958,43.146091;125.395757,43.12682;125.395028,43.114575;125.391863,43.112176;125.381653,43.116718;125.371812,43.116471;125.344108,43.133751;125.319669,43.140772;125.276322,43.15996;125.272872,43.167332;125.253068,43.181747;125.239981,43.198245;125.21615,43.217362;125.211327,43.231127;125.205531,43.235003;125.16428,43.23562;125.150824,43.22971;125.107542,43.227699;125.099243,43.221878;125.090661,43.223222;125.076187,43.220885;125.065525,43.22201;125.05915,43.226496;125.048656,43.228347;125.025351,43.216848;125.018896,43.20533;125.011608,43.202528;124.976874,43.19961;124.971733,43.196297;124.969075,43.181092;124.918465,43.151707;124.901196,43.1482;124.889477,43.140778;124.877749,43.148854;124.870447,43.14839;124.862577,43.152095;124.842464,43.171445;124.852617,43.177367;124.853677,43.187482;124.843309,43.20094;124.831637,43.208099;124.820906,43.219624;124.83584,43.228332;124.877815,43.289829;124.886845,43.293606;124.888399,43.298172;124.897124,43.295972;124.904027,43.303007;124.912078,43.303009;124.919277,43.309617;124.919458,43.315532;124.923375,43.315199;124.92827,43.321344;124.936342,43.322942;124.935973,43.335351;124.925159,43.34244;124.925775,43.352215;124.922243,43.356684;124.890738,43.364948;124.885908,43.393101;124.87681,43.399868;124.873441,43.408268;124.866809,43.411792;124.876704,43.425816;124.892119,43.431498;124.899424,43.428337;124.904153,43.429498;124.921021,43.444102;124.918788,43.455558;124.921218,43.464337;124.914027,43.467923;124.900909,43.488901;124.928123,43.507321;124.969738,43.516282;124.992504,43.524596;125.009992,43.545531;125.010452,43.551151;125.018159,43.555221;125.041166,43.587235;125.071844,43.604529;125.078096,43.60678;125.083693,43.604684;125.100051,43.608944;125.103832,43.600358;125.126387,43.617435;125.161214,43.628554;125.208127,43.638346;125.232633,43.640178;125.242586,43.647241;125.255591,43.651664;125.288208,43.654382;125.305187,43.651056;125.307064,43.617477;125.298133,43.607041;125.300814,43.601659;125.297212,43.591908;125.278473,43.570437;125.288777,43.548713;125.286467,43.5447;125.27214,43.541249;125.265632,43.530071;125.275272,43.505202;125.266315,43.496397;125.252066,43.49415;125.244318,43.484082;125.251525,43.459845;125.257241,43.454801;125.293229,43.450238;125.306601,43.454738;125.315699,43.462179;125.331495,43.465616;125.360209,43.481921;125.371211,43.484638;125.383976,43.48194;125.391019,43.484364;125.389952,43.491028;125.383666,43.494887;125.385964,43.501981;125.375229,43.507436;125.375993,43.510695;125.372066,43.5125;125.374911,43.515425;125.365494,43.51901;125.377152,43.532367;125.3936,43.538578;125.383847,43.558537;125.395543,43.563925;125.407299,43.591817;125.435137,43.59508;125.455112,43.608795;125.459521,43.597839;125.456925,43.592145;125.459064,43.582223;125.465409,43.567734;125.462613,43.5485;125.453487,43.536558;125.463749,43.529068;125.469338,43.50595;125.48315,43.489724;125.493123,43.487568;125.498716,43.478667;125.494589,43.461839;125.508285,43.457884;125.514947,43.450957;125.522522,43.448737;125.50991,43.437685;125.504573,43.424785;125.512976,43.423616;125.519705,43.418771;125.540831,43.41729;125.55511,43.410032;125.58243,43.413632;125.589968,43.400564;125.588601,43.385648;125.587758,43.38331;125.568671,43.37834;125.553565,43.371051;125.551648,43.363071;125.560871,43.350705;125.577136,43.342083;125.602444,43.32027;125.614131,43.318399;125.626853,43.312196;125.634414,43.301839;125.679284,43.285987;125.689942,43.278994;125.694405,43.258222;125.682035,43.247226;125.675024,43.245323;125.668861,43.234842;125.660065,43.230828;125.655326,43.221257;125.660673,43.20562;125.672175,43.204562;125.677828,43.193732;125.693738,43.177593;125.691426,43.17047;125.69856,43.159455&quot; var shuangliao_maolin = &quot;123.441047,43.91511;123.45657,43.913032;123.458869,43.91511;123.461169,43.91802;123.461744,43.919682;123.463469,43.923007;123.469793,43.925915;123.474392,43.926746;123.483016,43.929655;123.486465,43.931317;123.491065,43.932564;123.494514,43.935888;123.496814,43.937549;123.501413,43.939627;123.508312,43.94295;123.511761,43.944612;123.514061,43.946273;123.512911,43.942535;123.516936,43.941288;123.52096,43.940458;123.526134,43.942119;123.526134,43.944196;123.530159,43.94295;123.533033,43.946689;123.534758,43.945858;123.556605,43.952504;123.562929,43.955411;123.564079,43.959149;123.566953,43.95998;123.567528,43.962472;123.564079,43.962887;123.560629,43.966624;123.564079,43.967039;123.564654,43.971192;123.562929,43.974514;123.564654,43.986138;123.570403,43.985723;123.583051,43.986553;123.586501,43.986553;123.59225,43.986553;123.595124,43.986968;123.606048,43.988629;123.62272,43.990289;123.72678,43.99942;123.733679,43.999005;123.737703,43.99776;123.741728,43.9961;123.744027,43.9961;123.748627,43.996515;123.752076,43.99942;123.75725,44.002325;123.7584,44.00274;123.762425,44.0044;123.772198,44.00606;123.767671,44.006177;123.762658,44.00641;123.758328,44.008641;123.772755,44.016058;123.772576,44.021464;123.778181,44.027933;123.778199,44.027985;123.774309,44.035581;123.764365,44.044517;123.760673,44.047835;123.745087,44.051696;123.742887,44.052253;123.727786,44.061479;123.722603,44.071259;123.708185,44.08223;123.700253,44.083868;123.691926,44.107531;123.690893,44.110463;123.687443,44.112282;123.679987,44.111874;123.671372,44.111376;123.669962,44.108535;123.668112,44.10478;123.666908,44.102307;123.665264,44.098993;123.66459,44.097633;123.654008,44.093917;123.644962,44.083467;123.615561,44.087786;123.594181,44.09505;123.569118,44.090544;123.564375,44.089696;123.55294,44.085733;123.545053,44.083014;123.517942,44.08473;123.509516,44.085267;123.478192,44.087248;123.473664,44.087546;123.431435,44.08157;123.39941,44.077036;123.371428,44.077153;123.359409,44.077211;123.342081,44.073248;123.34747,44.051897;123.356948,44.038199;123.364969,44.016271;123.39553,43.984419;123.395548,43.981461;123.383834,43.979334;123.37353,43.96931;123.373737,43.965703;123.378076,43.962536;123.38404,43.964652;123.388586,43.958371;123.402779,43.960064;123.419047,43.936517;123.43033,43.931389;123.439601,43.915364;123.439646,43.915299;123.441038,43.91513&quot;// var shuangliao_bolishanzhen = &quot;123.482297,43.856902;123.487471,43.85607;123.489771,43.857734;123.491496,43.85607;123.492646,43.859398;123.49782,43.85607;123.500119,43.856486;123.498395,43.861478;123.500694,43.862726;123.501844,43.862726;123.503569,43.863974;123.507593,43.865638;123.509893,43.868966;123.516792,43.871461;123.519667,43.871045;123.524266,43.872293;123.524841,43.873957;123.53289,43.875204;123.534614,43.873957;123.539214,43.876868;123.542663,43.877284;123.544388,43.878531;123.557036,43.875204;123.579458,43.86855;123.582907,43.868966;123.582907,43.866886;123.585782,43.866054;123.593256,43.867718;123.613378,43.852326;123.622576,43.845252;123.617977,43.843172;123.612228,43.83693;123.609353,43.837346;123.603604,43.833184;123.59728,43.831935;123.593831,43.832768;123.589231,43.829022;123.589806,43.826941;123.587507,43.82486;123.581757,43.826524;123.561635,43.821113;123.561635,43.817783;123.561061,43.815701;123.557611,43.815701;123.554736,43.811954;123.549562,43.810289;123.543238,43.80904;123.540938,43.80904;123.536339,43.812371;123.53174,43.811954;123.527715,43.80904;123.522541,43.807374;123.516217,43.805709;123.512768,43.805709;123.506444,43.801961;123.502994,43.800712;123.501269,43.801129;123.499545,43.801545;123.499257,43.803705;123.481399,43.840779;123.482189,43.856746;123.482297,43.856902&quot; var shuangliao_bolishanzhen = &quot;123.482297,43.856902;123.487471,43.85607;123.489771,43.857734;123.491496,43.85607;123.492646,43.859398;123.49782,43.85607;123.500119,43.856486;123.498395,43.861478;123.500694,43.862726;123.501844,43.862726;123.503569,43.863974;123.507593,43.865638;123.509893,43.868966;123.516792,43.871461;123.519667,43.871045;123.524266,43.872293;123.524841,43.873957;123.53289,43.875204;123.534614,43.873957;123.539214,43.876868;123.542663,43.877284;123.544388,43.878531;123.557036,43.875204;123.579458,43.86855;123.582907,43.868966;123.582907,43.866886;123.585782,43.866054;123.593256,43.867718;123.613378,43.852326;123.622576,43.845252;123.617977,43.843172;123.612228,43.83693;123.609353,43.837346;123.603604,43.833184;123.59728,43.831935;123.593831,43.832768;123.589231,43.829022;123.589806,43.826941;123.587507,43.82486;123.581757,43.826524;123.582117,43.815345;123.561635,43.817783;123.561061,43.815701;123.557611,43.815701;123.554736,43.811954;123.549562,43.810289;123.543238,43.80904;123.540938,43.80904;123.536339,43.812371;123.53174,43.811954;123.527715,43.80904;123.522541,43.807374;123.516217,43.805709;123.512768,43.805709;123.506444,43.801961;123.502994,43.800712;123.501269,43.801129;123.499545,43.801545;123.499257,43.803705;123.481399,43.840779;123.482189,43.856746;123.482297,43.856902&quot; areas.push(siping_shuangliao); areas.push(shuangliao_maolin); areas.push(shuangliao_bolishanzhen);// areas.push(siping_lishu);// areas.push(siping_tiexiqu);// areas.push(siping_shuangliao);// areas.push(siping_tiedong);// areas.push(siping_yitong); colors = [&quot;#fff492&quot;, &quot;#fff492&quot;, &quot;#98d057&quot;, &quot;#e19ee6&quot;, &quot;#1ad3da&quot;, &quot;#ffc11d&quot;, &quot;#98e800&quot;, &quot;#b95817&quot;, &quot;#03a9f4&quot;, &quot;#39d0a4&quot;, &quot;#8bbb53&quot;]; var pointArray = []; for (var i = 0; i &lt; areas.length; i++) &#123; var ply = new BMap.Polygon(areas[i], &#123;strokeWeight: 2, strokeColor: &quot;#ff0000&quot;&#125;); //建立多边形覆盖物 ply.setFillColor(colors[i]) //设置多边形的填充颜色 ply.setFillOpacity(0.35);// ply.enableEditing(); //范围可编辑 【编辑的时候开启】 if (i == 2) &#123; polygons.push(ply); //加入多边形数组，以之后获取多边形边界点集 ply.enableEditing(); //范围可编辑 【编辑的时候开启】 &#125; map.addOverlay(ply); //添加覆盖物 pointArray = pointArray.concat(ply.getPath()); &#125; map.setViewport(pointArray); //调整视野 &#125; 123456789101112131415161718//获取编辑后的边界点集【编辑完后，可以通过 button 来触发这个方法】 function getpoints() &#123; for (var j = 0; j &lt; polygons.length; j++) &#123; var polyline = polygons[j]; var pts = polyline.getPath(); var sss = &quot;&quot;; for (var i = 0; i &lt; pts.length; i++) &#123; sss += pts[i].lng + &quot;,&quot; + pts[i].lat + &quot;;&quot;; &#125; document.getElementById(&quot;info&quot;).innerHTML = &quot;&quot;; document.getElementById(&quot;info&quot;).innerHTML += sss; //输出数组里的经纬度 console.log(sss); //【将点集输出到控制台】 &#125; alert(&apos;已输出边界点集合!&apos;); &#125; 参考资料 天地图 百度地图 百度地图api 区级以下行政区划]]></content>
      <categories>
        <category>技术开发</category>
        <category>地图</category>
      </categories>
      <tags>
        <tag>Baidu Map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android修改全局Window窗口大小]]></title>
    <url>%2Farchives%2F2c02c669.html</url>
    <content type="text"><![CDATA[在项目开发过程中，如果屏幕宽高比过于悬殊，例如电视大小的安卓设备（定制），在显示应用的时候需要居中显示，两边留白，按照手机大小显示应用。怎么实现呢？思路是通过修改应用的window大小来实现。但是window是绑定activity的，所以需要修改所有界面的window大小。 实现效果如下：实现方式如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546# 定义activity生命周期监听private ActivityLifecycleCallbacks mActivityLifecycleCallbacks = new ActivityLifecycleCallbacks() &#123; @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) &#123; if (Build.MODEL.equalsIgnoreCase(&quot;3280&quot;) &amp;&amp; Build.MANUFACTURER.equalsIgnoreCase(&quot;rockchip&quot;)) &#123; //特殊设备，设置宽度 WindowManager m = activity.getWindowManager(); Display d = m.getDefaultDisplay(); //为获取屏幕宽、高 android.view.WindowManager.LayoutParams p = activity.getWindow().getAttributes(); //获取对话框当前的参数值 p.height = (int) (d.getHeight() * 1); //高度设置为屏幕的0.6 p.width = (int) (d.getWidth() * 0.50); //宽度设置为屏幕的0.95 activity.getWindow().setAttributes(p); //设置生效 &#125; &#125; @Override public void onActivityStarted(Activity activity) &#123; &#125; @Override public void onActivityResumed(Activity activity) &#123; &#125; @Override public void onActivityPaused(Activity activity) &#123; &#125; @Override public void onActivityStopped(Activity activity) &#123; &#125; @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) &#123; &#125; @Override public void onActivityDestroyed(Activity activity) &#123; &#125;&#125;; 在application中注册12345@Overridepublic void onCreate() &#123; super.onCreate(); registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks);&#125; application注销的时候取消注册12345@Overridepublic void onTerminate() &#123; super.onTerminate(); unregisterActivityLifecycleCallbacks(mActivityLifecycleCallbacks);&#125;]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Window</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 pyenv 管理 Python 版本]]></title>
    <url>%2Farchives%2F739fa792.html</url>
    <content type="text"><![CDATA[转自使用 pyenv 管理 Python 版本 ,略有修改。 前言在使用python的时候，我们经常被python项目混乱的版本以及复杂的包依赖搞得头晕脑胀，但是自从有了pyenv和anaconda(python包虚拟环境，包依赖)，一切都清晰明了了。 pyenv 是 Python 版本管理工具。 pyenv 可以改变全局的 Python 版本，安装多个版本的 Python， 设置目录级别的 Python 版本，还能创建和管理 virtual python environments 。所有的设置都是用户级别的操作，不需要 sudo 命令。 pyenv 主要用来管理 Python 的版本，比如一个项目需要 Python 2.x ，一个项目需要 Python 3.x 。 而 anaconda 主要用来管理 Python 包的依赖，不同项目需要依赖的包版本不同，则需要使用虚拟环境。 pyenv 通过系统修改环境变量来实现 Python 不同版本的切换。而 anaconda 通过将 Python 包安装到一个目录来作为Python 包虚拟环境，通过切换目录来实现不同包环境间的切换。 pyenv 的美好之处在于，它并没有使用将不同的 PATH 植入不同的Shell这种高耦合的工作方式，而是简单的在 PATH 的最前面插入了一个垫片路径（shims）：~/.pyenv/shims:/usr/local/bin:/usr/bin:/bin。所有对 Python 可执行文件的查找都会首先被这个 shims 路径截获，从而使后方的系统路径失效。 pyenv安装具体的安装方式参照 官网我这里是Mac，推荐使用brew安装。安装成功之后，在.bashrc 或者 .bash_profile 中添加三行来开启自动补全.123export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot; pyenv 常用命令使用 pyenv commands 显示所有可用命令 查看本机安装 Python 版本 1pyenv versions 查看可安装 Python 版本 1pyenv install -l python 安装与卸载 12$ pyenv install 2.7.3 # 安装python$ pyenv uninstall 2.7.3 # 卸载python python切换 12$ pyenv global 2.7.3 # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。$ pyenv local 2.7.3 # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。 python优先级 shell &gt; local &gt; global pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。1234$ pyenv shell 2.7.3 # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。–unset 参数可以用于取消当前 shell 设定的版本。$ pyenv shell --unset$ pyenv rehash # 创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/*/bin/*，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）]]></content>
      <categories>
        <category>技术开发</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Pandas Merge替代Excel Vlookup]]></title>
    <url>%2Farchives%2F651663e0.html</url>
    <content type="text"><![CDATA[事情起因是媳妇儿在处理excel数据的时候，用VLookup查找查找数据的时候，发现经常出现查找错误，折腾了好几天，也没找到规律，所以我决定用Python Pandas替换Excel的VLookup函数。 假设我们有这样一个Excel文件：Sheet1为：Sheet2为：其中Sheet2数据比Sheet1数据多一条，我们要实现的目标是把Sheet1中人员对应的年龄放到Sheet2对应的人员上，如果人员在Sheet1中不存在，则不用处理。预期结果如下图所示：正常我们可以用Excel的VLookup实现这个功能，但是不知道为啥，VLookup在数量大的时候经常查询错乱，所以这里用Pandas的merge功能实现VLookup。1What is vlookup? Vlookup is essentially combining two different tables using a shared column. 实现代码如下:(我这里用的是Aconda配置的Python环境)12345678910111213#!/usr/bin/env python3# _*_ coding: utf-8 _*_import pandas as pddf1 = pd.read_excel(&quot;/Users/daren/Downloads/1.xlsx&quot;, sheet_name=0)df2 = pd.read_excel(&quot;/Users/daren/Downloads/1.xlsx&quot;, sheet_name=1)c = df1.merge(df2, on=&quot;Name&quot;, how=&quot;right&quot;)# c=pd.merge(a,b,how=&apos;right&apos;)# print(c.head())c.to_excel(&apos;3.xlsx&apos;, sheet_name=&apos;result&apos;) 现在让我们逐行分析。第5行：引入pandas library第7-8行：使用pandas.read_excel方法导入excel表格的两个Sheet页面，作为dataframe对象。第10行：执行merge操作，也就是实现VLookup函数的地方。 基于共有的“Name”列merge df1和df2，生成一个新的dataframe，然后生成excel。c = df1.merge(df2, on=”Name”, how=”left”)其中df1作为left dataframe，df2作为right dataframe。 how有4中选择生成新的dataframe： left，以左侧表格共享列为基准 right，以右侧表格共享列为基准 inner，以两侧共有表格共享列为基准(取交集) outer，取两侧表格共享列最大区间为基准（取并集） 下载1.xlsx 参考资料 Common Excel Task in Python: Vlookup with Pandas Merge Vlookup功能的另类实现（VBA,Python,Access）－当数据量较大时 Common Excel Tasks Demonstrated in Pandas]]></content>
      <categories>
        <category>技术开发</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>VLookup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android项目在Gitlab-CI上的使用]]></title>
    <url>%2Farchives%2Fb732e7e5.html</url>
    <content type="text"><![CDATA[Setting up GitLab CI for Android projects搭建Android环境下载JDK下载Android Sdk由于我们安装的Runner环境一般都是在服务器上，是没有界面操作的，所有需要我们通过无ui 的方式下载更新安卓sdk，先下载android sdk tools12- wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip- unzip -q android-sdk.zip -d android-sdk-linux 要使用sdk tools下载sdk首先需要接受安卓sdk的协议123- mkdir android-sdk-linux/licenses- printf &quot;8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e&quot; &gt; android-sdk-linux/licenses/android-sdk-license- printf &quot;84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; android-sdk-linux/licenses/android-sdk-preview-license 下载sdk123456/home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager --update &gt; update.log# SDK检查更新/home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager &quot;platforms;android-$&#123;ANDROID_COMPILE_SDK&#125;&quot; &quot;build-tools;$&#123;ANDROID_BUILD_TOOLS&#125;&quot; &quot;extras;google;m2repository&quot; &quot;extras;android;m2repository&quot; &gt; installPlatform.log#下载sdk，support包等/home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager &quot;extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2&quot; &gt; installPlatform.log# 下载constrain包 但是由于众所周知的GFW的问题，在国内下载安卓sdk的速度着实让人崩溃，所以一般需要配置上国内镜像，如下：1sdkmanager --proxy=http --proxy_host=mirrors.neusoft.edu.cn --proxy_port=80 --update 具体镜像可以从网上找一下。 配置环境变量1234567# vim /home/gitlab-runner/.bash_profileexport JAVA_HOME=/home/gitlab-runner/CI_runner/jdk1.8.0_181export ANDROID_HOME=/home/gitlab-runner/CI_runner/android-sdk-linuxexport PATH=$PATH:$JAVA_HOME/binexport PATH=$PATH:$ANDROID_HOME/tools/binexport PATH=$PATH:$ANDROID_HOME/platform-tools/ 编写Gitlab CI脚本配置完环境之后，就需要编写CI脚本完成自动打包，测试，部署等工作。 简介配置好 Runner 之后，我们要做的事情就是在项目根目录中添加 .gitlab-ci.yml 文件了。当我们添加了 .gitlab-ci.yml 文件后，每次提交代码或者合并 MR 都会自动运行构建任务了。 还记得 Pipeline 是怎么触发的吗？Pipeline 也是通过提交代码或者合并 MR 来触发的！那么 Pipeline 和 .gitlab-ci.yml 有什么关系呢？其实 .gitlab-ci.yml 就是在定义 Pipeline 而已拉！ 基本写法我们先来看看 .gitlab-ci.yml 是怎么写的：12345678910111213141516# 定义 stagesstages: - build - test# 定义 jobjob1: stage: test script: - echo &quot;I am job1&quot; - echo &quot;I am in test stage&quot;# 定义 jobjob2: stage: build script: - echo &quot;I am job2&quot; - echo &quot;I am in build stage&quot; 写起来很简单吧！用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的 script 关键字是最关键的地方了，也是每个 job 中必须要包含的，它表示每个 job 要执行的命令。 回想一下我们之前提到的 Stages 和 Jobs 的关系，然后猜猜上面例子的运行结果？ 1234I am job2I am in build stageI am job1I am in test stage 根据我们在 stages 中的定义，build 阶段要在 test 阶段之前运行，所以 stage:build 的 jobs 会先运行，之后才会运行 stage:test 的 jobs。 常用的关键字下面介绍一些常用的关键字，想要更加详尽的内容请前往 官方文档 stages定义 Stages，默认有三个 Stages，分别是 build, test, deploy。 before_script定义任何 Jobs 运行前都会执行的命令。 after_script定义任何 Jobs 运行完后都会执行的命令。 variables &amp;&amp; Job.variables定义环境变量。如果定义了 Job 级别的环境变量的话，该 Job 会优先使用 Job 级别的环境变量。 我自己在项目中用到的例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566image: openjdk:8-jdkcache: paths: - .m2/ - .gradle/variables: ANDROID_COMPILE_SDK: &quot;27&quot; ANDROID_BUILD_TOOLS: &quot;27.0.3&quot; ANDROID_SDK_TOOLS: &quot;27.1.1&quot; APP_NAME: &quot;长白山先锋&quot;before_script:# - apt-get --quiet update --yes# - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1## - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip# - unzip -q android-sdk.zip -d android-sdk-linux# - mkdir android-sdk-linux/licenses# - printf &quot;8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e&quot; &gt; android-sdk-linux/licenses/android-sdk-license# - printf &quot;84831b9409646a918e30573bab4c9c91346d8abd&quot; &gt; android-sdk-linux/licenses/android-sdk-preview-license - echo $PATH - whoami - echo $PWD - /home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager --update &gt; update.log - /home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager &quot;platforms;android-$&#123;ANDROID_COMPILE_SDK&#125;&quot; &quot;build-tools;$&#123;ANDROID_BUILD_TOOLS&#125;&quot; &quot;extras;google;m2repository&quot; &quot;extras;android;m2repository&quot; &gt; installPlatform.log - /home/gitlab-runner/CI_runner/android-sdk-linux/tools/bin/sdkmanager &quot;extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2&quot; &gt; installPlatform.log# - export ANDROID_HOME=$PWD/android-sdk-linux# - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/ - chmod +x ./gradlewstages: - build# - test - deploybuild: stage: build only: - v3_0502 script:# - ./gradlew assembleRelease - ./gradlew assembleRelease artifacts: paths: - $PWD/apk/#unitTests:# stage: test# script:# - ./gradlew testdeploy: stage: deploy script: - echo $PATH - rm -rfv /data/apps/$&#123;APP_NAME&#125; - mkdir /data/apps/$&#123;APP_NAME&#125; - cp $PWD/apk/*.apk /data/apps/$&#123;APP_NAME&#125; - lftp -u ftpuser_name,passwd -p port -e &quot;mirror -R --delete --only-newer /data/apps/$&#123;APP_NAME&#125; /ftp/apk ;quit;&quot; sftp://xxx.xxx.xxx.xxx # 把本地/data/apps/$&#123;APP_NAME&#125;目录的文件拷贝到服务器/ftp/apk目录下，并且删除服务器/ftp/apk目录下的其他文件 问题 1如果在代码提交之后,CI在下载代码的时候，报以下错误：12Peer&apos;s certificate issuer has been marked as not trusted by the user.ERROR: Job failed: exit status 1 只需要在runner服务器上修改如下就行1234# vim /etc/profile#在最后一行加入export GIT_SSL_NO_VERIFY=1 问题 2在build结束的时候，runner会把生成的包当成artifacts上传到CI服务器上，如下所示文件123artifacts: paths: - $PWD/apk/ 但是gitlba 默认只给每个项目100M的附件空间，所以如果你项目生成的文件比较多，有可能会报一下错误12ERROR: Uploading artifacts to coordinator... too large archive id=1004 responseStatus=413 Request Entity Too Large status=413 Request Entity Too Large token=y9oZhbeXFATAL: Too large 这时候只需调整如图所示图片即可 问题 3修改runner 任务artifacts上传存储路径123456vim /etc/gitlab/gitlab.rb### For storing GitLab application uploads, eg. LFS objects, build artifacts###! Docs: https://docs.gitlab.com/ce/development/shared_files.html# gitlab_rails[&apos;shared_path&apos;] = &apos;/var/opt/gitlab/gitlab-rails/shared&apos;gitlab_rails[&apos;shared_path&apos;] = &apos;/data/gitlab_shared&apos; 然后执行1然后执行sudo gitlab-ctl reconfigure 参考资料 Android SDK 国内镜像 Setting up GitLab CI for Android projects Setting up GitLab CI for Android projects androiddevtools]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建GitLab CI服务器]]></title>
    <url>%2Farchives%2Fd45e8871.html</url>
    <content type="text"><![CDATA[写在前面之前已经用Bitnami-gitlab一体包已经在虚拟机上搭建了Git服务器，在项目开发过程中，经常面临频繁打包的问题，搞得软件研发人员很疲惫，之前就听说过可以使用“持续集成”的思路解决这样的问题，并且能够提高工作效率，所在才有了今天在持续集成上的尝试。 什么是“持续集成”持续集成（Continuous Integration）指的是，频繁地（一天多次）将代码集成到主干。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。 使用GitLab CI进行持续集成我这里因为已经使用了Gitlab作为代码服务器，而Gitlab本身已经支持了CI，所以我这里就选择了使用Gitlab CI进行持续集成。 在开始之前先了解一些持续集成的相关概念。 Pipeline一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下图所示：12345+------------------+ +----------------+| | trigger | || Commit / MR +----------&gt;+ Pipeline || | | |+------------------+ +----------------+ StagesStages 表示构建阶段，说白了就是上面提到的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点： 所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始 只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功 如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败 因此，Stages 和 Pipeline 的关系就是：123456789+--------------------------------------------------------+| || Pipeline || || +-----------+ +------------+ +------------+ || | Stage 1 |----&gt;| Stage 2 |-----&gt;| Stage 3 | || +-----------+ +------------+ +------------+ || |+--------------------------------------------------------+ JobsJobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点： 相同 Stage 中的 Jobs 会并行执行 相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功 如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败 所以，Jobs 和 Stage 的关系图就是： 123456789+------------------------------------------+| || Stage 1 || || +---------+ +---------+ +---------+ || | Job 1 | | Job 2 | | Job 3 | || +---------+ +---------+ +---------+ || |+------------------------------------------+ GitLab Runner简介理解了上面的基本概念之后，有没有觉得少了些什么东西 —— 由谁来执行这些构建任务呢？答案就是 GitLab Runner 了！ 想问为什么不是 GitLab CI 来运行那些构建任务？一般来说，构建任务都会占用很多的系统资源 (譬如编译代码)，而 GitLab CI 又是 GitLab 的一部分，如果由 GitLab CI 来运行构建任务的话，在执行构建任务的时候，GitLab 的性能会大幅下降。 GitLab CI 最大的作用是管理各个项目的构建状态，因此，运行构建任务这种浪费资源的事情就交给 GitLab Runner 来做拉！因为 GitLab Runner 可以安装到不同的机器上 ，所以在构建任务运行期间并不会影响到 GitLab 的性能. 我这里采用的是：git服务器地址为：192.168.1.113，Gitlab runner地址为192.168.1.120 安装GitLab Runner参照官网,选择一种方式进行安装：12345# For RHEL/CentOS/Fedoracurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash# For RHEL/CentOS/Fedorasudo yum install gitlab-runner 注册 Runner安装好 GitLab Runner 之后，我们只要启动 Runner 然后和 CI 绑定就可以了。 打开你 GitLab 中的项目页面，在项目设置中找到 runners 运行 sudo gitlab-ci-multi-runner register 输入 CI URL 输入 Token 输入 Runner 的名字 输入 gitlab-ci tags 完成 当注册好 Runner 之后，可以用 sudo gitlab-runner list 命令来查看各个 Runner 的状态：123# sudo gitlab-runner listListing configured runners ConfigFile=/etc/gitlab-runner/config.tomllocalhost.localdomain Executor=shell Token=2a627041123ff25c490629d80f0834 URL=https://192.168.1.113/ Register问题1这一步比较坑，因为bitnami-gitlab一体包采用的是https的访问方式，所以在注册Runner的过程，一直报如下错误：12ERROR: Registering runner... failed runner=5nuRqxMY status=couldn&apos;t execute POST against https://192.168.1.113/api/v4/runners: Post https://192.168.1.113/api/v4/runners: x509: cannot validate certificate for 192.168.1.113 because it doesn&apos;t contain any IP SANsPANIC: Failed to register this runner. Perhaps you are having network problems 解决方式参考如下地址，gitlab-ci-runner-ignore-self-signed-certificate First edit ssl configuration on the GitLab server (not the runner) 1234vim /opt/gitlab/embedded/ssl/openssl.cnf[ v3_ca ]subjectAltName=IP:192.168.1.1 &lt;---- Add this line. 192.168.1.1 is your GitLab server IP. Re-generate self-signed certificate 1234cd /etc/gitlab/sslsudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/gitlab/ssl/192.168.1.1.key -out /etc/gitlab/ssl/192.168.1.1.crtsudo openssl dhparam -out /etc/gitlab/ssl/dhparam.pem 2048sudo gitlab-ctl restart Copy the new CA to the GitLab CI runner 1scp /etc/gitlab/ssl/192.168.1.113.crt root@192.168.1.120:/etc/gitlab-runner/certs 这样就解决Https证书问题了。 Register问题2在mac端配置Runner的时候，会遇到如下问题：1x509: certificate signed by unknown authority 主要是mac对git代码服务器的证书不信任，在注册的时候加上ca证书就行了。1sudo gitlab-runner register --tls-ca-file 192.168.1.113.crt unregister Runner 所有runners 1gitlab-runner unregister --all-runners By URL and token: 1gitlab-runner unregister --url http://gitlab.example.com/ --token t0k3n By name: 1gitlab-runner unregister --name test-runner 完毕！ 如果想知道如何用Gitlab-CI设置Android项目，请参考我下一篇文章Android项目在Gitlab-CI上的使用; 参考资料 GitLab Runner 用 GitLab CI 进行持续集成]]></content>
      <categories>
        <category>技术开发</category>
        <category>CI</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android实现毛玻璃效果(高斯模糊)]]></title>
    <url>%2Farchives%2Fa0439c.html</url>
    <content type="text"><![CDATA[在项目开发过程，有时候为了界面效果美观，需要在背景处用到毛玻璃效果，但是在 Android 上也能实现毛玻璃效果？性能如何？ 在网上看到这篇文章，大家可以参考一下 一种快速毛玻璃虚化效果实现 主要思想就是， 对要进行模糊的图片和界面（需要获取屏幕截图）进行压缩。 对压缩后的图片进行模糊处理。主要采用 StackBlur 模糊算法，这种算法应用非常广泛，能得到非常良好的毛玻璃效果。在这里，使用是它的 Java 实现代码FastBlur.java。 1public static Bitmap doBlur(Bitmap sentBitmap, int radius, boolean canReuseInBitmap) 可以看出，使用方法非常简单，传入待虚化的 bitmap、虚化程序(一般为 8)、和是否重用 flag。 相关资料 android-stackblur]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>StackBlur</tag>
        <tag>毛玻璃</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android WebView实现全屏播放的一种方法]]></title>
    <url>%2Farchives%2Fd3b6c7a6.html</url>
    <content type="text"><![CDATA[用过WebView的开发者们肯定都知道这里面的坑数不胜数，加载缓慢，内存泄露，文件选择…… 最近在项目中遇到了对接小鱼易联直播的情况，因为小鱼本身提供了直播功能，采用的是网页方式，所以在手机端直接进行对接网页，然后在进行全屏播放视频，又遇到了一个大坑。一个没有修饰过的原生WebView几乎不可能在某一个主流视频网站实现全屏播放，倘若在客户端自己实现简单的播放器，链接拿过来，摆个VideoView，想怎么全屏怎么全屏，放在WebView上，一切就悲剧了，大多数情况下点击“全屏按钮”是没有反应的，或者无法实现横屏全屏。今天来介绍一种简单易行粗暴的方式来实现WebView的视频全屏播放。 当你无从下手的时候，照例先看一下官方文档，很多常见的问题官方文档都给我们提供思路。你会发现下面这样一段话，发现官方已经提供了实现全屏展示html content的方式。 应用如果需要支持HTML5的video标签，必须打开硬件加速。我们只需要在Application标签或者相应Activity标签下添加android:hardwareAccelerated=”true”即可。接着为了支持全屏，需要重写WebChromeClient的onShowCustomView()和onHideCustomView()方法，这两个方法缺一不可。先来看一下onShowCustomView（）: 当前页面进入全屏模式的时候会调用这个方法，并且返回了两个参数。第一个是我们要在全屏模式时显示的View，第二个是一个CustomViewCallBack接口，可以调用这个接口请求关闭全屏模式。再看一下onHideCustomView()方法： 通知应用当前页面已经关闭全屏模式，我们需要做的操作是隐藏之前onSHowCustomView()方法中取到的View。了解这两个方法之后，我们就可以进行一些操作来实现简单的全屏播放了。 下面我们以实际例子说明如何实现。 布局文件中我们增加一个和WebView同层级的Framelayout， 123456789101112131415161718192021222324252627&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;!-- View that will be hidden when video goes fullscreen --&gt; &lt;RelativeLayout android:id=&quot;@+id/nonVideoLayout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;com.daren.app.html.fullscreen_webview.VideoEnabledWebView android:id=&quot;@+id/webView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;/RelativeLayout&gt; &lt;!-- View where the video will be shown when video goes fullscreen --&gt; &lt;RelativeLayout android:id=&quot;@+id/videoLayout&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; &gt; &lt;/RelativeLayout&gt;&lt;/RelativeLayout&gt; 自定义WebChromeClient关键代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104@Override public void onShowCustomView(View view, CustomViewCallback callback) &#123; if (view instanceof FrameLayout) &#123; // A video wants to be shown FrameLayout frameLayout = (FrameLayout) view; View focusedChild = frameLayout.getFocusedChild(); // Save video related variables this.isVideoFullscreen = true; this.videoViewContainer = frameLayout; this.videoViewCallback = callback; // Hide the non-video view, add the video view, and show it activityNonVideoView.setVisibility(View.INVISIBLE); activityVideoView.addView(videoViewContainer, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)); activityVideoView.setVisibility(View.VISIBLE); if (focusedChild instanceof android.widget.VideoView) &#123; // android.widget.VideoView (typically API level &lt;11) android.widget.VideoView videoView = (android.widget.VideoView) focusedChild; // Handle all the required events videoView.setOnPreparedListener(this); videoView.setOnCompletionListener(this); videoView.setOnErrorListener(this); &#125; else &#123; // Other classes, including: // - android.webkit.HTML5VideoFullScreen$VideoSurfaceView, which inherits from android.view.SurfaceView (typically API level 11-18) // - android.webkit.HTML5VideoFullScreen$VideoTextureView, which inherits from android.view.TextureView (typically API level 11-18) // - com.android.org.chromium.content.browser.ContentVideoView$VideoSurfaceView, which inherits from android.view.SurfaceView (typically API level 19+) // Handle HTML5 video ended event only if the class is a SurfaceView // Test case: TextureView of Sony Xperia T API level 16 doesn&apos;t work fullscreen when loading the javascript below if (webView != null &amp;&amp; webView.getSettings().getJavaScriptEnabled() &amp;&amp; focusedChild instanceof SurfaceView) &#123; // Run javascript code that detects the video end and notifies the Javascript interface String js = &quot;javascript:&quot;; js += &quot;var _ytrp_html5_video_last;&quot;; js += &quot;var _ytrp_html5_video = document.getElementsByTagName(&apos;video&apos;)[0];&quot;; js += &quot;if (_ytrp_html5_video != undefined &amp;&amp; _ytrp_html5_video != _ytrp_html5_video_last) &#123;&quot;; &#123; js += &quot;_ytrp_html5_video_last = _ytrp_html5_video;&quot;; js += &quot;function _ytrp_html5_video_ended() &#123;&quot;; &#123; js += &quot;_VideoEnabledWebView.notifyVideoEnd();&quot;; // Must match Javascript interface name and method of VideoEnableWebView &#125; js += &quot;&#125;&quot;; js += &quot;_ytrp_html5_video.addEventListener(&apos;ended&apos;, _ytrp_html5_video_ended);&quot;; &#125; js += &quot;&#125;&quot;; webView.loadUrl(js); &#125; &#125; // Notify full-screen change if (toggledFullscreenCallback != null) &#123; toggledFullscreenCallback.toggledFullscreen(true); &#125; &#125; &#125; @Override @SuppressWarnings(&quot;deprecation&quot;) public void onShowCustomView(View view, int requestedOrientation, CustomViewCallback callback) // Available in API level 14+, deprecated in API level 18+ &#123; onShowCustomView(view, callback); &#125; @Override public void onHideCustomView() &#123; // This method should be manually called on video end in all cases because it&apos;s not always called automatically. // This method must be manually called on back key press (from this class&apos; onBackPressed() method). if (isVideoFullscreen) &#123; // Hide the video view, remove it, and show the non-video view activityVideoView.setVisibility(View.INVISIBLE); activityVideoView.removeView(videoViewContainer); activityNonVideoView.setVisibility(View.VISIBLE); // Call back (only in API level &lt;19, because in API level 19+ with chromium webview it crashes) if (videoViewCallback != null &amp;&amp; !videoViewCallback.getClass().getName().contains(&quot;.chromium.&quot;)) &#123; videoViewCallback.onCustomViewHidden(); &#125; // Reset video related variables isVideoFullscreen = false; videoViewContainer = null; videoViewCallback = null; // Notify full-screen change if (toggledFullscreenCallback != null) &#123; toggledFullscreenCallback.toggledFullscreen(false); &#125; &#125; &#125; 最后别忘记处理屏幕旋转，否则横竖屏切换会重新走一遍生命周期. 12345&lt;activity android:name=&quot;.html.ZbtWebViewActivity&quot; android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot; android:configChanges=&quot;orientation&quot;&gt; &lt;/activity&gt; 隐藏网页中的广告 1234567@Overridepublic void onPageFinished(WebView view, String url) &#123; String js = &quot;javascript:function hideAd()&#123;document.getElementsByClassName(&apos;mobile__live--title&apos;)[0].style.display=&apos;none&apos;&#125;&quot;; webView.loadUrl(js); webView.loadUrl(&quot;javascript:hideAd();&quot;); //调用js方法，隐藏广告 super.onPageFinished(view, url);&#125; 代码地址：可全屏的webview 参考链接： https://segmentfault.com/a/1190000007561455]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Webview Video FullScreen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[港岛妹妹的西班牙馅饼长什么样]]></title>
    <url>%2Farchives%2F337a9148.html</url>
    <content type="text"><![CDATA[作者：西班牙馅饼链接：https://www.zhihu.com/question/26876220/answer/102255551来源：知乎 志说他不后悔做过的这些事情，但有点后悔把它写出来。不是因为怕暴露自己的品行，而是因为可能对文中人物带来困扰。我不知道我把它贴出来是否也是一种不道德。 港岛妹妹 你献给我的西班牙馅饼甜蜜地融化了我 天空之城在哭泣港岛妹妹 我们曾拥有的甜蜜的爱情疯狂地撕裂了我 天空之城在哭泣逼哥在夜话里回答过关于港岛妹妹，是一个朋友从西班牙寄来一张贺卡，贺卡上是个馅饼。 李志曾经在逼逼的艺术人生里写的事情是这样的：上个世纪我在西祠鬼混的时候认识了I，原因是I要找一首歌，正好我手头有，于是I就和我有了联系，夏日炎炎的某天中午I戴着蓝色头巾顶着炙热的风穿过稻田和小卖部找到我的住处，咦，“蓝色头巾”这个词好熟悉啊……后来在我的房间，我们做了一些装逼的交流，主要是我在装逼。因为事先在西祠我已经见识了I小姐的才华和学识。不瞒您说，就我认识的无数女性中，要说才华和学识，还真没有一个能超越I小姐的——尽管I把超男和肥皂电视剧当心头肉。那天短暂的见面I小姐保持她一贯的典雅作风，笑不露齿，不笑也不露齿。 这是开头，结尾是前些天我刚把一个月的工资打入I指定账户，从而结束了我们之间长达一年的债务关系。说来惭愧，这欠款是为我侄子买钢琴而借的。完事之后我给I发去短信说，以后在你面前我终于可以抬头了。I则用一贯的语气回我：在我面前你什么时候低过头啊。 和I的再次联系是在去年。再往前就是某年我路过汉口路，看见一个女性面容熟悉。我色迷迷的盯着她从身前到身后，绞尽脑汁想名字，终于在一分钟之后我快步追上，对伊说：我想起来了，我认识你。I一贯的语气说：认识就认识呗，认识我的人可多了。后来I承认当天她没有认出我来。因为我实在是太胖了，同时那天距我们之前的一次联系大约已经过了七八年。 再回到上个世纪吧，I在G大学历史系，我在鬼混。操，烦的一笔。我直接说了，G大学就是南京大学！！！是我较鄙视的大学之一。 在早期的交往中我对I没什么要死要活的心仪，更多的是仰慕其才华和学识。尤其是有一次我用麻袋装着几块在我村随处可见的石头送给I做学术研究之用之后。我发现I的领域实在是我全然陌生之地。鄙人有个特点，就是对于那些擅长我不擅长同时我又有兴趣的事务的人非常有兴趣。I是一个很好的例子。但是如果让I看到我说她是例子，她一定会用一贯的口气对我说：你才是例子，你全家都是例子。 这短短的一段我居然用了三次“才华和学识”。诶，书到用时方恨少啊。要是I写，她肯定可以用不同词句来描述。这就是I的才华和学识！ 刚认识那会我对I说，十年后鄙人会是中国最好的吉他手。对此I不置可否的典雅着微笑，这种微笑让我感到紧张和害臊。你看，时间很快就过去了，现在大家知道李逼是个蹩脚的吉他手。他把原本属于练琴的时间投入到了伟大的射精事业中。当然，就算他是天阉之人，就算他一日廿小时的不停练习也成不了伟大的吉他手。因为他没有天赋。 现在我已经想不起来和I是怎么失去联系的了。但十年后再次收到I的邮件时，我一眼就看了出来。我们用邮件聊了不少天。I在这十年里行走正常：念完本科念硕士，念完硕士念博士。虽然江湖都称女博士为灭绝师太，但I肯定是个例外。十年前I是典雅清纯的，十年后I是典雅知性的。 一个长期和古典文学打交道的人和一个长期和泡妞射精打交道的人搅合在一起，这感觉很奇妙。我们之所以有交集是因为在骨子里I有奔放的一面，我有文艺的一面。 我在I的宿舍里住过三天。她有一个面朝大海的阳台，飞机不停的从校园上空飞过，黄昏时经常下雨。回来后我写了一首歌。我们还去过一个岛屿，我们吃过芒果冰，我们做爱很少戴套。我一直怀疑她偷偷的流产过，但I坚决否认。我们冲动的决定谈恋爱，然后很快我又冲动的终止了恋爱。她去意大利帮我看了圣西罗球场，她在普林斯顿给我拍了很多照片，她从罗浮宫给我寄来彩色的明星片，她跑到天河城只为了和我喝杯咖啡，她做了我喜欢吃的红烧肉，结束的时候她又一个人默默承受。 我呢，除了精液似乎什么都没留下。 对于I我是忏悔的。对于I我的内心非常纠葛。我曾经幻想着我在沙发上看书，她在做家务，有个孩子在弹钢琴。我曾经幻想过婚姻，我曾经幻想过郊游，而这一些在今天看来只是可笑和卑鄙的故事。 我和I的父亲通过电话，这是唯一一次和女性朋友的家人说话。电话的缘由是他写了首歌，和我探讨一下编曲录音。事后I和我说她父亲对我印象不错，我也对他印象也挺好。 我和I之间断断续续的若即若离的关系导致我找不到一个书写I的好办法。时间错综复杂，事件隐隐约约。I用藏珠于渊来表达她的心情。 我呢？我相信如果以后的生活或者人们说的来世存在报应的话，那里面一定有I的一份——就算我再次对神明的娜姐发誓我爱过I。]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何提高Android Studio构建速度]]></title>
    <url>%2Farchives%2F35dc888d.html</url>
    <content type="text"><![CDATA[Tips：自从切换到AS开发安卓应用以来，一直被AS蜗牛般的构建速度困扰着，特别是在构建大型项目的时候如果构建变种很多的话，速度更是慢的够呛，所以最近研究一下如何提高编译速度，在网上找到这样一篇文章，供大家参考。 文章来源： 优化您的构建速度 | Android Developers 几个小改动，将Android 构建速度提升10倍以上！ 下面提取文章重点，以做备忘。在我们谈论优化措施之前，我们先来看看优化之前项目的build性能12gradlew clean //执行干净构建gradlew --profile --recompile-scripts --offline --rerun-tasks assembleFlavorDebug profile：启用分析。 recompile-scripts：在绕过缓存时强制重新编译脚本。 offline：禁止 Gradle 提取在线依赖项。这样可以确保 Gradle 在尝试更新依赖项时引起的任何延迟都不会干扰您的分析数据。您应当已将项目构建一次，以便确保 Gradle 已经下载和缓存您的依赖项。 rerun-tasks：强制 Gradle 重新运行所有任务并忽略任何任务优化。我们使用这个命令执行full-build(从头创建)的过程，来衡量build的性能。优化您的构建配置按照下面的提示操作，提升您的 Android Studio 项目的构建速度。保持工具处于最新状态Android 工具几乎在每一次更新中都会获得构建优化和新功能，本页介绍的一些提示假设您正在使用最新版本。要充分利用最新优化，请保持以下工具处于最新状态.避免Legacy MultidexGoogle针对64k方法数的问题推出了MultiDex的解决方法，但是不同的api版本上，multidex的做法是不一样的，在api21以上，因为Android采用了新的运行时ART，会在安装的时候将所有的classesN.dex合并成一个.oat包。你需要做的就是在编译脚本中加一行 multiDexEnabled true。但是在api以下，你需要引入multidex support library. 而且在编译过程中，编译脚本要话很长时间决定哪些class要放入primary dex中，哪些放入secondary dex中。在api21以下，这叫做legacy multidex。 开发中，我们可以避免legacy multidex带来的编译性能消耗.123456789101112131415productFlavors&#123; dev &#123; minSdkVersion 21 applicationIdSuffix &apos;.dev&apos; applicationId &quot;com.daren.dbuild_province&quot; versionName &quot;2.7.0&quot; versionCode 20180619 resConfigs (&quot;cn&quot;,&quot;xxhdpi&quot;) dimension &quot;default&quot; &#125;&#125; 避免编译不必要的资源这样我们在开发环境下只引入英文资源和xxhdpi下的资源，减小打包时间.123456789101112android &#123; ... productFlavors &#123; dev &#123; ... // The following configuration limits the &quot;dev&quot; flavor to using // English stringresources and xxhdpi screen-density resources. resConfigs &quot;en&quot;, &quot;xxhdpi&quot; &#125; ... &#125;&#125; 为您的调试构建停用 Crashlytics(用的比较少)如果您不需要运行 Crashlytics 报告，请按以下步骤操作来停用插件，以便加快您的调试构建的速度.1234567android &#123; ... buildTypes &#123; debug &#123; ext.enableCrashlytics = false &#125;&#125; 如果您想要将 Crashlytics 与调试构建结合使用，仍可以通过以下方式来加快增量构建的速度：在每个构建期间阻止 Crashlytics 使用它自己的独特构建 ID 更新应用资源。要阻止 Crashlytics 不断更新其构建 ID，请将以下代码添加到您的 build.gradle 文件中：1234567android &#123; ... buildTypes &#123; debug &#123; ext.alwaysUpdateBuildId = false &#125;&#125; 对进入AndroidManifest.xml 的配置进行静态构建配置值与调试构建结合使用为进入AndroidManifest.xml 的配置值考虑进行动态配置和静态配置，因为如果您的 manifest 文件或应用资源中的值需要随着每一个构建更新，Instant Run 将无法执行代码交换 - 它必须构建和安装新的 APK。 例如，在您每次想要运行更改时，使用动态版本代码、版本名称、资源或任何其他可以更改 manifest 文件的构建逻辑都需要一个完整的 APK 构建 - 即使实际更改仅需要一个热交换，也是如此。如果您的构建配置需要此类动态属性，那么将其隔离到您的发布构建变体中并让值对您的调试构建保持静态，如下面的 build.gradle 文件所示。 1234567891011121314151617181920212223242526int MILLIS_IN_MINUTE = 1000 * 60int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTEandroid &#123; ... defaultConfig &#123; // Making either of these two values dynamic in the defaultConfig will // require a full APK build and reinstallation because the AndroidManifest.xml // must be updated (which is not supported by Instant Run). versionCode 1 versionName &quot;1.0&quot; ... &#125; // The defaultConfig values above are fixed, so your incremental builds don&apos;t // need to rebuild the manifest (and therefore the whole APK, slowing build times). // But for release builds, it&apos;s okay. So the following script iterates through // all the known variants, finds those that are &quot;release&quot; build types, and // changes those properties to something dynamic. applicationVariants.all &#123; variant -&gt; if (variant.buildType.name == &quot;release&quot;) &#123; variant.mergedFlavor.versionCode = minutesSinceEpoch; variant.mergedFlavor.versionName = minutesSinceEpoch + &quot;-&quot; + variant.flavorName; &#125; &#125;&#125; 使用静态依赖项版本在 build.gradle 文件中声明依赖项时，您应当避免在结尾将版本号与加号一起使用，例如 ‘com.android.tools.build:gradle:2.+’。使用动态版本号可能导致意外版本更新和难以解析版本差异，并因 Gradle 检查有无更新而减慢构建速度。您应改为使用静态/硬编码版本号。例如：1compile &apos;com.squareup.okhttp3:okhttp-urlconnection:3.7.0&apos; 而不要用1compile &apos;com.squareup.okhttp3:okhttp-urlconnection:3.7.+&apos; 启用离线模式如果你的网络环境不好，链接速度比较慢，那么在Gradle尝试使用网络下载依赖包的时候，构建速度会变慢，所以如果您的依赖包都已经被缓存之后，可以打开“Offline work”模式。 增加 Gradle 的堆大小并启用修改gradle.properties文件，将 Gradle 的堆大小设置为 2048 MB1org.gradle.jvmargs=-Xmx4608m -XX:MaxPermSize=1024m 停用 PNG 处理1234567android &#123; ... aaptOptions &#123; cruncherEnabled false &#125;&#125;由于在productFlover和buildtype中不定义此属性，在构建正式版本的应用时，您需要将此属性手动设置为 true。 禁用动态的BuildConfig(开发环境)1buildConfigField &quot;long&quot;, &quot;BUILD_TIMESTAMP&quot;, getTimeStamp() + &quot;L&quot; 我们对BuildConfig中的一项输入做了动态变化，getTimeStamp会获取当前的时间，导致每次build时这个值都会发生变化。当然在release环境下，这个值确实有用，但是在开发中，就没必要了。它会导致重新生成BuildConfig.java, 继而导致 javac, dex, package，sign等一系列的任务重新执行，需要对其优化123buildConfigField &quot;long&quot;, &quot;BUILD_TIMESTAMP&quot;, project.hasProperty(&quot;devBuild&quot;)?&quot;000000000&quot;:getTimeStamp() + &quot;L&quot; 这样如果是开发环境，每次这个值都是一样的。再来看看优化之后的profile]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令整理]]></title>
    <url>%2Farchives%2Ff42d2759.html</url>
    <content type="text"><![CDATA[Yum 如何配置Yum代理123vim /etc/yum.conf# 添加如下：proxy=http://10.1.65.6:1080/ lftp]]></content>
  </entry>
  <entry>
    <title><![CDATA[在Centos7上安装docker]]></title>
    <url>%2Farchives%2F5368ee28.html</url>
    <content type="text"><![CDATA[安装docker参照官方网址：https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce docker支持多种安装方式，我这里是用了最常见的安装方式yum进行安装。Install using the repository SET UP THE REPOSITORY(配置) 安装所需依赖Install required packages 123sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 使用稳定的docker yum 源 123sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 安装docker 安装最新版本的docker 1sudo yum install docker-ce 启动docker 1sudo systemctl start docker 检测docker是否正确安装 1sudo docker run hello-world 使用docker加载本地镜像如果你的镜像没有发不到仓库上，可以通过docker的加载本地镜像来加载。1docker load --input docker_image_ezb_20180302.tar 导出镜像1sudo docker save -o xxx.tar xxx ## xxx 镜像名称 通过已有镜像创建新的镜像 编写Dockerfile 12345#使用 # 来注释# FROM 指令告诉 Docker 使用哪个镜像作为基础FROM xxx ## 镜像名称COPY catalina.sh /tomcat/bin/ ## 拷贝本地文件到容器文件CMD [&quot;/run.sh&quot;] ## 容器启动的时候运行的脚本 通过名称生成镜像文件 1docker build -t tomcat . ## tomcat是镜像的名称 完成生成镜像。]]></content>
  </entry>
  <entry>
    <title><![CDATA[星云链Nas开发笔记]]></title>
    <url>%2Farchives%2F9e7c4bd8.html</url>
    <content type="text"><![CDATA[学习资料 官方教程 手把手教你星云DApp开发（第一部分) 手把手教你星云DApp开发（第二部分) nebPay 介绍 NAS星云链DAPP开发之宠物养成游戏 开源成熟网站 面试经历网网站地址： https://duanyugit.github.io/interview/index.htmlgithub地址：https://github.com/duanyuGit/interview合约地址：https://explorer.nebulas.io/#/address/n1uqMB4GSXudXCp5KuMo3LxbgvoNTHJSYiw 我的星云查看gate io 钱包nas数量https://explorer.nebulas.io/#/address/n1dnerPW8iQRgu5mCcwHeJVaQaxdigaCyAX 查看本地钱包 nas数量https://explorer.nebulas.io/#/address/n1Z1WRfKxRV3Hae4emF43m8J3GgDKn51PUZ]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>Nas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用bitnami-gitlab一体包搭建git代码服务器]]></title>
    <url>%2Farchives%2Fc2439d6c.html</url>
    <content type="text"><![CDATA[最近git代码服务器IP变了，需要修改git远程地址的访问ip，以前用gitlab搭建过git服务器，不过时间有点久远了，也没记录下来，这里在这里整理一下gitlab的使用方法，以备后续查找使用。 修改gitlab项目的ip地址1234vim /etc/gitlab/gitlab.rb修改为如下：external_url &apos;https://192.168.1.113&apos; 重启Gitlab1gitlab-ctl restart 完成。]]></content>
      <categories>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio 3.0 Annotation processors Error]]></title>
    <url>%2Farchives%2F33608f55.html</url>
    <content type="text"><![CDATA[升级到Android Studio 3.0之后，当编译项目的时候，如果项目使饮用了Lombok和Butterknifeh这两个开源项目，你就会发现在编译过程中发生以下错误：12345Error:Execution failed for task &apos;:Base:javaPreCompileDebug&apos;.&gt; Annotation processors must be explicitly declared now. The following dependencies on the compile classpath are found to contain annotation processor. Please add them to the annotationProcessor configuration. - butterknife-7.0.1.jar (com.jakewharton:butterknife:7.0.1) Alternatively, set android.defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true to continue with previous behavior. Note that this option is deprecated and will be removed in the future. See https://developer.android.com/r/tools/annotation-processor-error-message.html for more details. 错误日志已经告诉我们了，在Android Studio 3.0 之后 annotationProcessor必须由我们开发者显示声明了，添加annotationProcessor之后即可解决此问题。12compile &apos;com.jakewharton:butterknife:7.0.1&apos;annotationProcessor &apos;com.jakewharton:butterknife:7.0.1&apos; 参考链接： https://stackoverflow.com/a/44084804]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android开发中如何匹配各种layout资源（layout-sw480dp layout-sw600dp）]]></title>
    <url>%2Farchives%2F8b7fb8fa.html</url>
    <content type="text"><![CDATA[在做安卓开发过程中，经常会遇到需要适配各种奇形怪状的屏幕的情况，例如下面这位大哥： 宽：67.5cm高：120cm但是他的实际像素才1080(w)x1872(h)，density：1.0，densityDpi：160。在这种情况下我们知道应该用values-sw600dp这种类型的文件夹存放这种屏幕的资源，但是如何确认屏幕应该用什么样尺寸的文件夹呢，也就是应该如何确认是600，还是700，还是480呢？这里有一个算法： sw-xxxx-dp的计算公式是 xxxx = sw *160/dpi其中sw为屏幕分辨率中最小的那个值。在这里就是1080 dpi为屏幕密度，在这里就是160 。 也可以用如下方式获取： 1adb shell getprop ro.sf.lcd_density 所以这个屏幕所使用的最小宽度应该为：1080 * 160 / 160 = 1080，也就是sw-1080dp。 提供一个获取安卓设备信息的开源项目： https://github.com/menny/android-device-info 下面是一些常用范例： 参考资料： Android开发中如何匹配layout资源（layout-sw480dp layout-sw600dp-land layout-sw720dp-port）]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>屏幕适配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Burp和sqlmap进行自动化sql注入]]></title>
    <url>%2Farchives%2Ff38a06d2.html</url>
    <content type="text"><![CDATA[Tips：本文主要用于sql注入攻击自查，请不要做犯法的事情。 之前已经讲过如何用Burp和Sqlmap配合进行sql注入攻击，但是使用起来特别麻烦，对有大量接口调用的项目如何自动化的进行检测便变得重要，本篇注重介绍如何使用Burp以及sqlmap的批量注入来完成自动化注入攻击。 整体流程为： 使用BurpSuite保存request记录log 因为BurpSuite的日志记录了所有走代理的流量，包括静态资源啊，重复的提交啊，这些都会影响SqlMap的分析效率，所以对Request日志进行过滤。 对过滤后的日志文件进行批量注入攻击。 使用BurpSuite保存request记录log使用的BurpSuite版本为1.7.26进行的操作，各个版本有可能不一样，请注意。 勾选BurpSuite输出日志输入要保存为的文件名称 对日志进行过滤强大的SqlMap支持使用BurpSuite的日志进行批量分析，但是BurpSuite的日志记录了所有走代理的流量，包括静态资源啊，重复的提交啊，这些都会影响SqlMap的分析效率，所以需要对访问日志进行过滤，只筛选出我们需要的。 使用burplogfilter.py过滤日志，点击下载介绍：12345678910Usage: python3 burplogfilter.py [options]Options: -h Show this showHelp -f filepath The BurpSuite log to analyze --host keyword, --host=keyword Host name filter -v Show debug messageExamples: python3 burplogfilter.py -f /tmp/burp.log --host=&apos;google.com&apos; &gt; burp-proxy.log 参考本文BurpSuite日志分析过滤工具，加快SqlMap进行批量扫描的速度git地址使用：12python3 burplogfilter.py -f ~/temp/burp/sql_map_log --host=xxxx &gt; ~/temp/burp/sql_map_log_proxy# 保存过滤日志到新的文件 在使用burplogfilter过程中，发现报以下错误“TypeError: cannot use a string pattern on a bytes-like object”修改burplogfilter.py以下位置即可1234567891011121314151617def scrapBlocks(filename): global DEBUG if DEBUG: print(&quot;Try to anayze file %s&quot;%filename) blocks=None with open(filename, &apos;rb&apos;) as f: content=f.read() content = content.decode(&apos;ISO-8859-1&apos;) #添加这句话 blocks = re.findall(r&apos;======================================================&apos; r&apos;.*?======================================================&apos; r&apos;.*?======================================================&apos;, content, re.S) if DEBUG: print(&quot;The file contains %s block(s)&quot;%len(blocks)) return blocks 对过滤后的日志文件进行批量注入攻击进入sqlmap.py所在目录，1234python sqlmap.py -l /Users/daren/temp/burp/sql_map_log_1_filter --batch -smart --dbms=oracle# -l 访问日志文件# batch：自动选yes。# smart：启发式快速判断，节约时间。 到此完成自动化批量注入攻击。 参考资料 BurpSuite日志分析过滤工具，加快SqlMap进行批量扫描的速度 python 编码问题 UnicodeDecodeError: ‘utf8’ codec can’t decode byte 0xb4 in position 0: invalid start byt BurpSuite导出log配合SQLMAP批量扫描注入点 如何使用Burp Suite代理]]></content>
      <categories>
        <category>技术开发</category>
        <category>SQLMAP</category>
      </categories>
      <tags>
        <tag>SQLMAP</tag>
        <tag>BURP</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信公众号-网页开发 开发入门]]></title>
    <url>%2Farchives%2F75c2257b.html</url>
    <content type="text"><![CDATA[Tips：本文章主要基于微信JS-SDK和jQuery WeUI 进行的微信公众号网页开发。前提需要1.微信公众号已经完成开发者认证。2.在“基本配置”中设置IP白名单。3.提供一个能支持80或者443的服务。 微信官方文档 https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115 绑定域名先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 引入JS文件在需要调用JS接口的页面引入如下JS文件，（支持https）：http://res.wx.qq.com/open/js/jweixin-1.2.0.js 获取access_tokenaccess_token 用户获取jsapi_ticket，有效期7200秒，开发者必须在自己的服务全局缓存access_token。建议开发者建立自己的access_token中控服务器统一获取和刷新，其他业务逻辑服务器所使用的access_token均来自于该中控服务器。 微信获取access_token接口文档 接口调用说明前提调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。 12https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET 我这里使用了shell脚本获取access_token。123a_url=`curl https://api.weixin.qq.com/cgi-bin/token\?grant_type\=client_credential\&amp;appid\=xxx\&amp;secret\=xxxx`access_token=`echo $a_url|jq -r &apos;.access_token&apos;`echo $access_token tips: jq 是linux下shell进行json处理的工具，很强大。 可以使用这个地址测试该接口 使用网页调试工具调试该接口 获取jsapi_ticket获取jsapi_ticket需要用到上一步的access_token，轻重jsapi_ticket有效期7200秒，开发者必须在自己的服务全局缓存jsapi_ticket。123456789https请求方式: GET# https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi&#123;&quot;errcode&quot;:0,&quot;errmsg&quot;:&quot;ok&quot;,&quot;ticket&quot;:&quot;bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA&quot;,&quot;expires_in&quot;:7200&#125; 我这里使用了shell脚本来获取，并且保存到文件。123t_url=`curl https://api.weixin.qq.com/cgi-bin/ticket/getticket\?access_token\=$access_token\&amp;type\=jsapi`ticket=`echo $t_url | jq -r &apos;.ticket&apos;`echo $ticket &gt; /opt/tomcat/darenweb_8087/webapps/wx/ticket.txt 我这里为了方便使用了crontab定时器每两个小时同步一次access_token和ticket，在生产环境中最好根据expires_in过期时间进行同步。定时脚本如下：100 */2 * * * /bin/bash /server/scripts/get_wx_ticket.sh 至此完成了access_token和ticket的获取。 网页开发 通过js config接口注入权限验证配置12345678wx.config(&#123; debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: &apos;&apos;, // 必填，公众号的唯一标识 timestamp: , // 必填，生成签名的时间戳 nonceStr: &apos;&apos;, // 必填，生成签名的随机串 signature: &apos;&apos;,// 必填，签名 jsApiList: [] // 必填，需要使用的JS接口列表&#125;); 所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用。在config之前需要对config所需参数进行签名，获取config方法网页端如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495function getWxTicket()&#123; $.ajax(&#123; // url: &quot;http://localhost:8080/aa/sign?originUrl=http://localhost:8080/login.html&quot;, url: &quot;http://xxxx/sign?originUrl=&quot;+window.location.href, type: &quot;GET&quot;, dataType: &apos;json&apos;,// crossDomain: true,// jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)// jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据 success: function (response) &#123; // alert(&quot;11111111&quot;); wxConfig = response; if (isDebug)&#123; // window.access_token = response.access_token; alert(wxConfig.timestamp); alert(wxConfig.nonce); alert(wxConfig.jsapi_ticket); &#125; Wx_config(); &#125; &#125;); &#125; function Wx_config() &#123; wx.ready(function () &#123; // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。 if (isDebug) &#123; alert(&quot;ready&quot;); &#125; //在微信网页端 隐藏不需要的功能按钮 wx.hideMenuItems(&#123; menuList: [&apos;menuItem:share:appMessage&apos;, &apos;menuItem:share:timeline&apos;, &apos;menuItem:share:qq&apos;, &apos;menuItem:share:weiboApp&apos;, &apos;menuItem:share:facebook&apos;, &apos;menuItem:share:QZone&apos;, &apos;menuItem:editTag&apos;, &apos;menuItem:delete&apos;, &apos;menuItem:copyUrl&apos;, &apos;menuItem:originPage&apos;, &apos;menuItem:openWithQQBrowser&apos;, &apos;menuItem:openWithSafari&apos;, &apos;menuItem:share:email&apos;, &apos;menuItem:favorite&apos;], // 要隐藏的菜单项，只能隐藏“传播类”和“保护类”按钮，所有menu项见附录3 success: function (res) &#123; &#125; &#125;); &#125;); /* * 注意： * 1. 所有的JS接口只能在公众号绑定的域名下调用，公众号开发者需要先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。 * 2. 如果发现在 Android 不能分享自定义内容，请到官网下载最新的包覆盖安装，Android 自定义分享接口需升级至 6.0.2.58 版本及以上。 * 3. 完整 JS-SDK 文档地址：http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html */ wx.error(function (res) &#123; if (isDebug) &#123; alert(&quot;error&quot;); alert(res); &#125; &#125;); wx.config(&#123; debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。 appId: &apos;wx040138c462be4cb0&apos;, // 必填，公众号的唯一标识 timestamp: wxConfig.timestamp, // 必填，生成签名的时间戳 nonceStr: wxConfig.nonce, // 必填，生成签名的随机串 signature: wxConfig.signature,// 必填，签名 jsApiList: [ &apos;hideMenuItems&apos;, &apos;showMenuItems&apos;, &apos;hideAllNonBaseMenuItem&apos;, &apos;showAllNonBaseMenuItem&apos;, &apos;chooseImage&apos;, &apos;previewImage&apos;, &apos;uploadImage&apos;, &apos;downloadImage&apos;, &apos;getNetworkType&apos;, &apos;openLocation&apos;, &apos;getLocation&apos;, &apos;hideOptionMenu&apos;, &apos;showOptionMenu&apos;, &apos;closeWindow&apos;, &apos;scanQRCode&apos;, &apos;chooseWXPay&apos;, &apos;openProductSpecificView&apos;, &apos;addCard&apos;, &apos;chooseCard&apos;, &apos;openCard&apos;] // 必填，需要使用的JS接口列表 &#125;); &#125; 后台进行签名，签名算法如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061/** * * @param originUrl 需要加密的URL * @param request * @param response * @return */ @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot;, &quot;null&quot; &#125;) @RequestMapping(value = &quot;/sign&quot;, method = RequestMethod.GET) @ResponseBody public HashMap getSignature(String originUrl , HttpServletRequest request, HttpServletResponse response) &#123; File file = new File(&quot;/opt/tomcat/darenweb_8087/webapps/wx/ticket.txt&quot;); StringBuilder ticket = new StringBuilder(); BufferedReader reader = null; try &#123; reader = new BufferedReader(new FileReader(file)); String tempString = null; int line = 1; // 一次读入一行，直到读入null为文件结束 while ((tempString = reader.readLine()) != null) &#123; // 显示行号 ticket.append(tempString); &#125; reader.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; //2、获取Ticket String jsapi_ticket = ticket.toString(); //3、时间戳和随机字符串 String noncestr = UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;).substring(0, 16);//随机字符串 String timestamp = String.valueOf(System.currentTimeMillis() / 1000);//时间戳 //4、获取url String url= originUrl; String string1 = &quot;jsapi_ticket=&quot; + jsapi_ticket + &quot;&amp;noncestr=&quot; + noncestr + &quot;&amp;timestamp=&quot; + timestamp + &quot;&amp;url=&quot; + url; MessageDigest crypt = null; try &#123; crypt = MessageDigest.getInstance(&quot;SHA-1&quot;); crypt.reset(); crypt.update(string1.getBytes(&quot;UTF-8&quot;)); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; String signature = byteToHex(crypt.digest()); HashMap&lt;String,String&gt; map = new HashMap&lt;&gt;(); map.put(&quot;signature&quot;,signature); map.put(&quot;timestamp&quot;,timestamp); map.put(&quot;jsapi_ticket&quot;,jsapi_ticket); map.put(&quot;nonce&quot;,noncestr); return map; &#125; 至此完成了微信号网页开发的配置和授权。 参考资料 jQuery WeUI 官方 微信公众号官方]]></content>
      <categories>
        <category>技术开发</category>
        <category>WeChat</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 使用Burp Suite进行手机端代理抓包]]></title>
    <url>%2Farchives%2Fc4bd228f.html</url>
    <content type="text"><![CDATA[在做开发的工程中经常会遇到需要进行抓包的情况，自己经常使用的有Fiddler和Charles，其中Fiddler用在Windows平台，在Mac电脑上因为没有Fiddler，只能用Charles，但是Charles还是收费的，没有找到破解版本。今天在使用sqlmap进行自动化注入的时候，发现一款在mac电脑上不错的工具，Burp Suite。 介绍Burp Suite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。在渗透测试中，我们使用Burp Suite将使得测试工作变得更加容易和方便，即使在不需要娴熟的技巧的情况下，只有我们熟悉Burp Suite的使用，也使得渗透测试工作变得轻松和高效。Burp Suite是由Java语言编写而成，而Java自身的跨平台性，使得软件的学习和使用更加方便。Burp Suite不像其他的自动化测试工具，它需要你手工的去配置一些参数，触发一些自动化流程，然后它才会开始工作。我这目前只用了代理抓取手机端接口功能。可以直接从官方网站下载免费版本使用：https://portswigger.net/ 也可以直接下载破解版本，功能更多，可以保存工程，不用每次都配置。下载地址 链接: https://pan.baidu.com/s/1ohVEExupkhnBvs3Yo08krA 密码: 3svt在此感谢 https://github.com/Hehe-Zhc/BurpUnlimited 作者，让我们可以用上免费的Burp，原价$349.00啊 吓人。 配置1.下载完成之后，直接解压缩下载文件，然后打开“BurpUnlimited.jar”即可。 Temporary project 创建一个临时工程。不会保存此工程的任何配置。 New project on disk 创建的工程保存到本地，会保存对此工程的配置。（免费版本没有此功能，破解版本包含） Open existing project 打开之前创建好的工程 2.选择相应的配置 Use Burp defaults 使用burp自带的默认配置 Use options saved with project 使用工程所包含的配置 load from configuration file点击“Start Burp”开始使用Burp 3.配置Burp监听手机端 最后在手机端设置wifi代理即可。 参考资料 Burp Suite 实战指南]]></content>
  </entry>
  <entry>
    <title><![CDATA[从《万历十五年》看企业文化和制度]]></title>
    <url>%2Farchives%2Ff74614ff.html</url>
    <content type="text"><![CDATA[之前看明朝那些事的时候，就耳闻过万历十五年这本书，最近有机会拜读黄仁宇的这本“大失败的总记录”，深感本书的深奥，自己知识和能力着实有限，尽自己最大努力从公司管理运营角度揣摩一下。 明朝官僚体系中的道德和法制的问题与企业文化和制度。 中国两千年来是以道德代替法制，至明代而极。以礼法约束从皇上到臣子再到底层平民，皇帝作为一国之君，是礼法的引导和表率，是不能逾越礼法的，所以9岁就登基的皇上在礼法面前也深感无力。 礼法从上到下约束着每一层的人。整个国家的运行是依靠“礼”来进行行为规范和约束，通过道德来管理国家，让整个文官精英团队有效的工作，来管理和控制国家。这就像是公司文化对每个人的影响一样，如果文化一旦形成，即使老板也要在这个庞然大物之下按照礼法行事，充当表率，员工认同文化，然后增强文化，通过归属感和统一战线来增加公司凝聚力。 那为什么明明是把道德发展到极致的明，道德治国发展到极致的时候反而问题更严重了呢？物极必反，忽视了体制上技术上的发展。而这就对英语公司制度的制定和遵守，例如薪酬制度，奖惩制度，加班制度，项目开发制度等一系列科学的管理方式。这就是西方的管理方式，私有制以及资本主义的管理方式。 因为明礼法根深蒂固，制度改革难以行之有效。官僚集团互相麻木，自我催眠，都是在既有思维和体系下行事。也许崇祯皇帝所说的“诸臣误我”是由其历史原因的。 在公司内不仅要通过公司文化、道德来教育员工，还要通过相关的制度来激励员工，文化是产生雷锋的土壤，而制度是能够激励更多雷锋的养分。 就像华为“不让雷锋吃亏”一样，完善制度，所有人都追求高效，把文化和制度结合起来，拧成一股绳，公司产生的效益才能更进一步。而不是让文化阻挡了我们改革的脚步。 最后，平淡的“万历十五年”如何造成几十年后明朝的覆灭的，又给我们怎样的教训。也许这一周是平淡的，和以前一样，太阳照常升起，但公司未来三到五年的发展也许就决定在这一周，这一天。]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[为Hexo icarus添加版权说明]]></title>
    <url>%2Farchives%2Fead2b478.html</url>
    <content type="text"><![CDATA[网上很多为hexo next主题添加版权说明的文章，但是几乎没找到怎么为icarus主题设置版权说明的文章，可见还是Next主题多啊。 下面介绍如何为icarus主题添加版权说明。 Icarus添加版权说明 修改blog目录下”/themes/icarus/_config.yml” 这个文件，在文件最后添加版权说明配置，如下: 1234567#版权信息copyright: enable: true # img: http://ostu98x74.bkt.clouddn.com/copyright/copyright.png #版权信息图片 site: http://www.inicb.com #版权信息所属网址 siteName: Ini&apos;s Blog #版权信息网站名字 siteAuthor: &apos;王建磊&apos; #版权归属人 修改icarus主题下的layout/common/article.ejs文件，修改如下部分 12345678910111213141516171819202122232425262728&lt;% if (!index) &#123; %&gt; &lt;%- partial(&apos;post/nav&apos;) %&gt;&lt;% &#125; %&gt;# 改为如下&lt;% if (!index) &#123; %&gt; &lt;div&gt; &lt;ul class=&quot;post-copyright&quot;&gt; &lt;li class=&quot;post-copyright-author&quot;&gt; &lt;strong&gt;本文作者：&lt;/strong&gt;&lt;%= theme.copyright.siteAuthor%&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;本文链接：&lt;/strong&gt; &lt;a href=&quot;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;发布时间：&lt;/strong&gt; &lt;a href=&quot;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&lt;%= post.date.format(&quot;YYYY年M月D日 - HH时MM分&quot;) %&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;post-copyright-license&quot;&gt; &lt;strong&gt;版权声明： &lt;/strong&gt; 本博客所有文章除特别声明外，均采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！ &lt;/li&gt; &lt;/ul&gt; &lt;div&gt; &lt;%- partial(&apos;post/nav&apos;) %&gt;&lt;% &#125; %&gt; 为版权说明添加样式修改themes/icarus/source/css/_partial/article.styl 文件，在文件末尾添加如下样式。 1234567891011121314// Custom styles.//版权声明.post-copyright &#123; margin: 2em 0 0; padding: 0.5em 1em; border-left: 3px solid #FF1700; background-color: #F9F9F9; list-style: none;&#125;.post-copyright li &#123; //设置行高 line-height: 30px;&#125; 至此，完成了为icarus添加版权声明的功能。 参考资料 Hexo持续优化-在文章尾部添加版权声明信息 hexo进阶之自定义material主题添加赞赏功能，版权信息，Gitment评论模块]]></content>
      <categories>
        <category>技术开发</category>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>ICARUS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从一个代码服务器同步代码到另一个代码服务器]]></title>
    <url>%2Farchives%2Fa4db9902.html</url>
    <content type="text"><![CDATA[最近因为工作需要，需要把源代码提交到甲方git服务器上，因为没必要把每次的更新日志也提交到甲方服务器上，并且考虑每次提交都很琐碎麻烦，所以自己写了个自动化脚本来自动完成提交工作。如下1234567891011121314151617181920212223#!/bin/bash# 记录同步时间BAK_TIME=`date +%Y%m%d%H%M`echo &quot;开始同步android=================================start&quot;cd /Users/daren/source/cbsxf/dbuild_provincegit pullecho &quot;下载代码完成&quot;echo &quot;拷贝到甲方代码目录，忽略隐藏目录&quot;cp -R /Users/daren/source/cbsxf/dbuild_province/* /Users/daren/source/cbsxf/dbuild_province_unicom/echo &quot;拷贝代码完成&quot;cd /Users/daren/source/cbsxf/dbuild_province_unicomecho &quot;切换到甲方代码目录&quot;git add .git commit -m &quot;提交代码$BAK_TIME&quot;echo &quot;commit代码成功&quot;#git push origin mastergit push -u origin masterecho &quot;推送代码到服务器&quot;echo &quot;同步android结束=================================end&quot;]]></content>
      <categories>
        <category>技术开发</category>
        <category>工具箱</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[新时代e支部后台创作的故事]]></title>
    <url>%2Farchives%2Ffdfa2529.html</url>
    <content type="text"><![CDATA[新时代e支部大事记对于吉林省的广大党员来说，对“新时代e支部”App肯定不陌生，不过使用了这么长时间的新时代e支部，您知道e支部背后的故事吗？下面由小编为大家整理一下新时代e支部诞生记。 “新时代e支部”的诞生主要经历了两个阶段，从2017年1月1日到2018年3月11日为第一阶段，那时候叫“长白山先锋e支部”，2018年3月11日到现在是第二阶段，经吉林省委领导决定，正式上线“新时代e支部”。 2017年1月-2017年2月。“长白山先锋e支部”项目由吉林省委组织部发起，由吉林联通公司，吉林省达仁科技有限公司负责承建。在这段时间是主要是确认需求，规划建设内容，设计效果图，初步规划“长白山先锋e支部”建设方案。 2017年3月10日经过一个多月的研发和需求确认，完成了第一个安卓版本的上线，并且交付梅河口试用。 2017年4月20日苹果第一个版本研发完成，发布到苹果市场。 2017年4月28日苹果第一个企业版本研发完成，发布到梅河口试用。版本号码为1.0。 2017年5月15日在经过了历时三个月的驻地和封闭开发，经过了中间30余次的迭代发布，终于在5月15日完成了第一个正式全省版本的发布，版本号码为2.1.5。 2017年5月24日正式修改W支部7大领域为12大领域，添加了行政村，社区，非公有制企业，社会组织，国有企业，高等院校(含大中专)，机关单位，中小学校(含幼儿园)，医疗卫生机构，科研院所，乡镇街道，其他领域。此时版本号码为2.2.0。 2017年6月6日添加W支部中视频监控功能。此时版本号码为2.2.0。此时版本号码为2.2.4。 2017年6月27日在发布厅中增加干部任免和干部公示功能。此时版本号码为2.3.1。 2017年8月7日添加两学一做考试模块，提供给全省党员检验学习的地方。此时版本号码为2.3.6。 2017年8月31日添加手机端维护支部信息模块，方便了广大农村党员没有电脑，无法编辑支部信息的问题。此时版本号码为2.3.7。 2017年9月从9月份开始正式开始了e支部积分系统的需求调研，系统设计。 2017年10月25日在梅河口版本和全省版本添加红色影视功能。此时版本为2.4.4。 2017年11月15日积分制系统经过了2月的反复迭代，最终于11月15日在梅河口进行积分制系统的试运行。此时梅河口版本号码为3.0.1。 2018年1月19日新版W支部领域主页面上线。全省版本号码为2.5.1。 2018年3月11日2018年3月11日 全省积分制管理系统正式上线。版本号码为2.5.3 2018年3月11日“新时代e支部”正式上线。版本号码为2.5.3。 2018年3月11日“新时代e支部” 党员会议室 正式上线。版本号码为2.5.3。 2018年3月19日新时代传习所上线，并且融合新时代传习所和新时代e支部。版本号码为2.5.5。 2018年3月21日新增通知公告功能，增加市州通知模块。 2018年4月2日新增“新时代传习所”宣讲员之家模块，版本号码为2.5.9。 “e支部”从创立之初到目前位置，总共跌打发布版本达百余次，支撑了全省9万个党支部、160万党员的日常使用，为全省9万多基层党组织和160万党员提供了掌上红色精神家园。 对于我们的技术团队您也一定很感兴趣吧，感谢他们所作出的努力和奉献。 创作团队 项目团队我们可爱的团队 可爱的支撑小姐姐主力研发工程师，与党结缘，进入了红色浪漫的世界 开发现场 自力更生，艰苦奋斗的精神 发布会现场2017/05/15 发布会现场]]></content>
      <tags>
        <tag>新时代e支部</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用FreeSSL生成免费SSL证书，并为Nginx配置Https访问]]></title>
    <url>%2Farchives%2Ff19cae66.html</url>
    <content type="text"><![CDATA[本文主要介绍了如何创建一个免费的并且被各大浏览器默认认可的ssl证书，并且介绍了如何用Nginx配置证书，以及重定向Http到Https。 FreeSSL免费SSL证书FreeSSL.org 是一个提供免费HTTPS证书申请的网站 ，目前支持通过这两家CA机构TrustAsia，Let’s Encrypt生成SSL证书。我们这里选择TrustAsia，创建一个一年期限的ssl证书。 输入对应的域名，选择Ca机构，点击“创建免费的SSL证书”输入邮箱地址1在证书快到期的时候，Freessl会发邮件提醒你。 选择证书类型，验证类型为“File”，CSR生成为“浏览器生成”（为了安全，最好是选择我有CSR），点击生成，会弹出如下界面在服务器项目根目录下新建.well-known/pki-validation/fileauth.txt文件，复制“201804190313215v2qzo2quee1emf9z180awofxk4ju12koqxbaw1d531n0jv030”到fileauth文件中，点击“点击验证”如果CA生成证书成功，直接下载下来就行。至此 完成ssl证书的创建。 配置Nginx支持Https把上一步生成的证书以及私钥上传到服务器上，然后配置Nginx支持https访问，如下：12345678910111213141516171819202122232425262728293031# vim /etc/nginx/nginx.conf添加支持https的serverserver &#123; listen 443 ssl; server_name localhost; root /data/blog; # root /usr/share/nginx/html; ssl_certificate &quot;/data/chain/full_chain.pem&quot;; ssl_certificate_key &quot;/data/chain/private.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; Http请求重定向到Https修改Nginx配置文件如下,在Http server中添加重定向语句：123456server&#123; listen 80 default_server; listen [::]:80 default_server; server_name _; rewrite ^(.*)$ https://$host$1 permanent; &#125; Freessl 相关 关于CSR生成的说明1、浏览器生成在浏览器支持 Web Cryptography 的情况下，我们默认使用浏览器根据用户的信息生成CSR文件（关于 Web Cryptography 的浏览器支持情况可点击 这里 了解详情）。 2、后端服务器生成在浏览器不支持CSR文件生成的时候，我们会根据用户所填的信息，在后端服务器生成一个CSR文件。 3、上传自己的CSR文件如果你有自己的CSR文件，并且想使用自己的CSR文件，那么可以点击上方表单中点击生成下方的文字，通过粘贴，使用自己的CSR文件。 关于域名验证的说明CA 需要对您是否拥有该域名进行验证，这样才能给您颁发证书。这里有多种验证方式，您可以采用对您较为方便的方式进行。在进行下一步的同时，你将同意 Lets Encrypt service agreement 或 TrustAsia。如果您的网站有防火墙，请对 66.133.109.36 开放。如果您收到 504 网关超时，无法连接等其它错误， 请刷新页面重试；如果您有自己的CSR文件，可上传CSR文件之后进行手动验证。1、手动验证（文件）CA 将通过访问特定 URL 地址来验证您是否有改域名的所有权。因此，您需要下载给顶的验证文件，并上传到您的服务器 2、手动验证（DNS）CA 将通过查询 DNS 的 TXT 记录来确定您对该域名的所有权。您只需要在域名管理平台将生成的 TXT 记录名与记录值添加到该域名下，等待大约 1 分钟即可验证成功 3、如果你有自己的CSR文件，可手动上传验证文件到您的域以验证所有权CA 将通过查询 DNS 的 TXT 记录来确定您对该域名的所有权。您只需要在域名管理平台将生成的 TXT 记录名与记录值添加到该域名下，等待大约 1 分钟即可验证成功 参考资料 https://freessl.org/ nginx配置http强制跳转https Nginx 配置 HTTPS 服务器]]></content>
      <categories>
        <category>技术开发</category>
        <category>NGINX</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>HTTPS</tag>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FastDFS Tracker及Storage节点添加及删除]]></title>
    <url>%2Farchives%2F31b33e7a.html</url>
    <content type="text"><![CDATA[fastdfs七种状态1234567# FDFS_STORAGE_STATUS：INIT :初始化，尚未得到同步已有数据的源服务器# FDFS_STORAGE_STATUS：WAIT_SYNC :等待同步，已得到同步已有数据的源服务器# FDFS_STORAGE_STATUS：SYNCING :同步中# FDFS_STORAGE_STATUS：DELETED :已删除，该服务器从本组中摘除# FDFS_STORAGE_STATUS：OFFLINE :离线# FDFS_STORAGE_STATUS：ONLINE :在线，尚不能提供服务# FDFS_STORAGE_STATUS：ACTIVE :在线，可以提供服务 正常状态必须是ACTIVE12345fdfs_monitor /etc/fdfs/client.conf | grep ip_addr ip_addr = 192.168.1.120 ACTIVE ip_addr = 192.168.1.121 ACTIVE ip_addr = 192.168.1.122 ACTIVE 增加Storage节点（通过配置，自动加入）123456789# 安装Storage并配置mod_fastdfs.conf及storage.conf，设置fdfs_storaged及nginx自启动# vim /etc/fdfs/storage.conftracker_server=192.168.1:22122# 启动新加的storage节点（会自动同步相同group的内容）fdfs_storaged /etc/fdfs/storage.conf#vim /etc/fdfs/mod_fastdfs.conf# 在track机器上执行执行fdfs_monitor /etc/fdfs/client.conf查看集群同步情况（会看到新增的storage节点） 删除Storage节点及删除后重新加入（通过fdfs_monitor删除）1234567# 停止某个storage节点/etc/init.d/fdfs_storage stopfdfs_monitor /etc/fdfs/client.conf delete group1 192.168.1.121# 查看集群情况 fdfs_monitor /etc/fdfs/client.conf 可以到对应的storage节点状态为DELETEDfdfs_monitor /etc/fdfs/client.conf 重新加入storage节点12345# 启动被删除的storage节点，查看集群状态，一开始会是 OFFILINE状态fdfs_monitor /etc/fdfs/client.conf# 过一会儿再查看集群状态，显示为ACTIVE状态fdfs_monitor /etc/fdfs/client.conf 增加Tracker节点1234567# 在所有storage节点的storage.conf, mod_fastdfs.conf 中配置多条tracker_server记录tracker_server=192.168.1.120:22122tracker_server=192.168.1.125:22122# 在client.conf中也配置多条tracker_server记录执行 fdfs_monitor /etc/fdfs/client.conf 查看集群情况，可以看到tracker_serve_count变为2另外可以指定tracker，进行集群监控 fdfs_monitor /etc/fdfs/client.conf -h 192.168.1.120 list 删除Tracker节点1去掉配置文件中不需要的tracker_server的记录，停止对应服务器上的tracker进程 参考资料 http://www.cnblogs.com/sunmmi/articles/7209308.html]]></content>
      <categories>
        <category>技术开发</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo由next主题切换为Icarus主题]]></title>
    <url>%2Farchives%2Ff056a4d4.html</url>
    <content type="text"><![CDATA[见如下链接： https://blog.peiyingchi.com/2017/03/10/hexo-icarus-settings/]]></content>
  </entry>
  <entry>
    <title><![CDATA[孩子-纪伯伦]]></title>
    <url>%2Farchives%2F71762251.html</url>
    <content type="text"><![CDATA[你的儿女，其实并不是你的儿女他们的诞生源自于你的情欲以及自身对于生命的渴望他们借助你来到这个世界，却非为了你而来他们在你身旁，然而并不是你的私人物品你可以给予他们的是你的爱，不是你的想法你可以庇护的是他们的身体，不是他们的灵魂因为他们的灵魂属于明天属于你做梦也无法到达的明天你可以拼尽全力，变得像他们一样你不能绞尽脑汁，让他们变得和你一样因为生命不会后退，时间也不在过去停留你是弓，儿女是箭弓箭手望着未来之路上的箭靶他用尽力气将你拉开，使他的箭射得又快又远所以怀着快乐的心情，在弓箭手的手中弯曲吧因为他爱一路飞翔的箭，也爱无比稳定的弓 ——————《孩子》 纪伯伦]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Nginx配置proxy_pass转发的/路径问题]]></title>
    <url>%2Farchives%2F82fd99c.html</url>
    <content type="text"><![CDATA[在日常使用Nginx过程中，经常会遇到对路径进行映射的问题，有时候会为路径添加前缀，例如访问 http://localhost:80/file/group1/M00/00/00/zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO.png, 通过Nginx映射之后，其实访问的是 http://localhost:80/group1/M00/00/00/zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO.png, 对file路径进行了重定向。 实现方法如下： 在Nginx中配置proxy_pass时，如果是按照^~匹配路径时,要注意proxy_pass后的url最后的/,当加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;如果没有/，则会把匹配的路径部分也给代理走。 location ^~ /static_js/{proxy_cache js_cache;proxy_set_header Host js.test.com;proxy_pass http://js.test.com/;} 如上面的配置，如果请求的url是http://servername/static_js/test.html会被代理成http://js.test.com/test.html 而如果这么配置 location ^~ /static_js/{proxy_cache js_cache;proxy_set_header Host js.test.com;proxy_pass http://js.test.com;} 则会被代理到http://js.test.com/static_js/test.htm 参考资料：http://blog.51cto.com/wangwei007/1103734]]></content>
      <categories>
        <category>技术开发</category>
        <category>NGINX</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式文件系统FastDFS部署搭建]]></title>
    <url>%2Farchives%2Fb182ce5c.html</url>
    <content type="text"><![CDATA[简介 FastDFS是一款类Google FS的开源分布式文件系统，它用纯C语言实现，支持Linux、FreeBSD、AIX等UNIX系统。它只能通过专有API对文件进行存取访问，不支持POSIX接口方式，不能mount使用。准确地讲，Google FS以及FastDFS、mogileFS、HDFS、TFS等类Google FS都不是系统级的分布式文件系统，而是应用级的分布式文件存储服务。 FastDFS的架构 下图显示的是FastDFS的系统架构。 图1 FastDFS的系统架构 从图1可以看出，Tracker server之间相互独立，不存在直接联系。客户端和Storage server 主动 连接Tracker server。包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。Storage server会连接集群中所有的Tracker server，向他们报告自己的状态。Storage server启动一个单独的线程来完成对一台Tracker server的连接和定时报告。需要说明的是，一个组包含的Storage server不是通过配置文件设定的，而是通过Tracker server获取到的。不同组的Storage server之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步。 Storage server采用binlog文件记录文件上传、删除等更新操作。binlog中只记录文件名，不记录文件内容。 文件同步只在同组内的Storage server之间进行，采用push方式，即源头服务器同步给目标服务器。只有源头数据才需要同步，备份数据并不需要再次同步，否则就构成环路了。有个例外，就是新增加一台Storage server时，由已有的一台Storage server将已有的所有数据（包括源头数据和备份数据）同步给该新增服务器。 Storage server中由专门的线程根据binlog进行文件同步。为了最大程度地避免相互影响以及出于系统简洁性考虑，Storage server对组内除自己以外的每台服务器都会启动一个线程来进行文件同步。 文件同步采用增量同步方式，系统记录已同步的位置（binlog文件偏移量）到标识文件中。标识文件名格式：{dest storage IP}_{port}.mark，例如：192.168.1.14_23000.mark。 文件上传和下载的交互过程接下来我们一起看一下文件上传和下载的交互过程。文件上传和下载流程分别如图2、图3所示。文件上传流程的步骤如下： 使用fastdfs上传文件 Client询问Tracker server上传到的Storage server； Tracker server返回一台可用的Storage server，返回的数据为该Storage server的IP地址和端口； Client直接和该Storage server建立连接，进行文件上传，Storage server返回新生成的文件ID，文件上传结束。 使用Fastdfs下载文件 Client询问Tracker server可以下载指定文件的Storage server，参数为文件ID（包含组名和文件名）； Tracker server返回一台可用的Storage server； Client直接和该Storage server建立连接，完成文件下载。 搭建Fastdfs环境这里默认关闭了防火墙，并且开启了tracker和storage所需要的端口。tracker默认端口为22122，Storage默认端口为23000 这里我用了两台机器进行搭建192.168.1.120和192.168.1.121，用与搭建1个tracker和2个storage。其中tracker在120上，Storage搭建在120和121上，并且为同一分组。 192.168.1.120 nginx + Tracker + Storage1 192.168.1.121 Nginx + Storage2 下面开始搭建： 首先在120机器上进行安装（Tracker Server） 安装libfastcommongit下载地址：https://github.com/happyfish100/fastdfs.git解压缩到/data/libfastcommon-master，进入libfastcommon-master，执行12./make.sh./make.sh install 确认make没有错误后，执行安装，64位系统默认会复制到/usr/lib64下。这时候检查/usr/lib/libfastcommon.so是否存在，如果不存在需要设置环境变量或者创建软链接1ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so 安装Fastdfs下载 FastDFS 源程序，git下载地址：https://github.com/happyfish100/fastdfs.git下载之后解压缩到/data/fastdfs-master，然后进入此目录，执行123./make.sh./make.sh install 确认make没有错误后，执行安装，默认会安装到/usr/bin中，并在/etc/fdfs中添加三个配置文件。 修改配置文件默认的配置文件安装到/etc/fdfs目录中，如下： storage.conf.sample Storage的配置文件样例 tracker.conf.sample Tracker的配置文件样例 client.conf.sample Fastdfs客户端的配置文件样例。 tracker.conf修改首先重命名tracker.conf.sample为tracker.conf，修改其中如下：1base_path=/data/fastdfs/tracker #用于存放日志。 注意：确保/data/fastdfs/tracker目录存在 storage.conf修改首先重命名storage.conf.sample为storage.conf，修改其中如下：123base_path=/data/fastdfs/storage #用于存放日志。store_path0=/data/fastdfs/storage #存放数据，若不设置默认为前面那个。tracker_server=192.168.1.120:22122 #指定tracker服务器地址。不能是127.0.0.1 注意：确保/data/fastdfs/storage目录存在 client.conf修改首先重命名storage.conf.sample为storage.conf，修改其中如下：12base_path=/data/fastdfs/client #用于存放日志。tracker_server=192.168.1.120:22122 #指定tracker服务器地址。 启动Tracker和Storage12/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf/usr/bin/fdfs_storaged /etc/fdfs/storage.conf 检查进程,确认是否启动1234# ps -ef | grep fdfsroot 5980 1 0 19:24 ? 00:00:00 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.confroot 6011 1 12 19:24 ? 00:00:00 /usr/bin/fdfs_storaged /etc/fdfs/storage.confroot 6021 5958 0 19:24 pts/0 00:00:00 grep --color=auto fdfs 表示启动ok了，若有错误，可以在/usr/fastdfs/tracker/logs 目录下检查日志。 上传、删除测试 上传文件使用自带的fdfs_test来测试，使用格式如下：12345678910111213# fdfs_testThis is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.Usage: fdfs_test &lt;config_file&gt; &lt;operation&gt; operation: upload, download, getmeta, setmeta, delete and query_servers 使用以下命令上传文件1fdfs_test /etc/fdfs/client.conf upload /data/test.jpeg 输入结果如下：1234567891011121314151617181920212223242526272829This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-13 22:07:03] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: server 1. group_name=, ip_addr=192.168.1.120, port=23000group_name=group1, ip_addr=192.168.1.120, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpegsource ip address: 192.168.1.120file timestamp=2018-04-13 22:07:03file size=165085file crc32=909197101example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpegstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085_big.jpegsource ip address: 192.168.1.120file timestamp=2018-04-13 22:07:03file size=165085file crc32=909197101example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085_big.jpeg 可以看到，上传ok了，这里会生成两个文件，这是fastdfs的主/从文件特性，以后再介绍。example file url是不能在浏览器中直接打开的，除非配合nginx使用，以后再介绍。 删除文件1fdfs_delete_file /etc/fdfs/client.conf group1/M00/00/00/wKgBeFrQuYeAATHaAAKE3TYxPy085.jpeg 至此，我们就已经配置好了120上的 Tracker 和 Storage。 在121上部署 Storage同样的在121服务器上，按照以上步骤进行fastdfs安装，配置，启动。在121上只需要配置和启动 Storage 就行。其中121上的 Storage 配置文件 /etc/fastdfs/storage.conf 中的 group_name设为group1，于120上的 Storage 相同。 在启动之后使用一下命令查看两个 Storage 是否启动成功，显示以下表示同一个group的两个 Storage 都已经启动成功，并且注册到了 Tracker 服务器上。。1234# fdfs_monitor /etc/fdfs/client.conf | grep ip_addr ip_addr = 192.168.1.120 ACTIVE ip_addr = 192.168.1.121 ACTIVE 这时候我们再使用以下命令上传一个文件，会发现有两个 Storage 可用。1fdfs_test /etc/fdfs/client.conf upload /data/1.png 显示如下：123456789101112131415161718192021222324252627282930This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-16 17:04:59] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: &lt;font color=&apos;red&apos;&gt;server 1. group_name=, ip_addr=192.168.1.120, port=23000&lt;/font&gt; server 2. group_name=, ip_addr=192.168.1.121, port=23000group_name=group1, ip_addr=192.168.1.121, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014.pngsource ip address: 192.168.1.121file timestamp=2018-04-16 17:04:58file size=2118file crc32=2538485301example file url: http://192.168.1.121/group1/M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014.pngstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014_big.pngsource ip address: 192.168.1.121file timestamp=2018-04-16 17:04:58file size=2118file crc32=2538485301example file url: http://192.168.1.121/group1/M00/00/00/wKgBeVrUZzqAcggmAAAIRpdONjU014_big.png 默认fastdfs会选择一台机器作为存储，文件上传完毕后，会自动同步到别的 Storage. 到此位置，我们部署了两台位于同一 group的 Storage。 部署Nginx+fastDFS上面我们已经完成了 Tracker 和 Storage 的部署和配置，但是上传到 Storage 的文件还没办法访问，并且文件在同步的过程中，也会出现未同步完成的情况，所以需要配置Nginx。 Nginx安装fastDFS模块，主要是安装在fastDFS，storage存储服务器上，而不是tracker和client上。 这里主要是安装到120，121上。 目的实际是为了，当输入类似http://192.168.1.120/group1/M00/00/00/wKgCbFem0l2ALSbFAAEYXfRAMkc536.pngURL地址，其中192.168.1.120 是一个storage服务器。能够通过nginx的web服务功能，直接返回图片。 注意：全部安装条件在确保之前的fastDFS 的Tracker和storage和client可以正常使用 下载fastdfs-nginx-module下载地址：https://github.com/happyfish100/fastdfs-nginx-module12unzip fastdfs-nginx-module-master.zipcd fastdfs-nginx-module-master 会发现里面有个INSTALL 和 src目录。这个不需要make而是需要重新编译一下storage的Nginx模块 安装和编译Nginx 并添加fastDFS模块1234cd nginx-1.10.1/./configure --prefix=/usr/local/nginx --add-module=/data/fastdfs-nginx-module-master/src/makemake install 其中fastdfs-nginx-module-master是刚才解压的fastdfs模块的绝对路径，就是在编译nginx时候，连同这个模块一起编译。如果在编译安装的时候报一下错误，说明需要安装相应的library1234./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option. 执行以下命令进行安装：1yum -y install pcre-devel openssl openssl-devel 然后重新编译安装。 fastdfs-nginx-module 配置文件将fastdfs-nginx-module/src/mod_fastdfs.conf 拷贝到/etc/fdfs/下1cp /data/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs/ 修改mod_fastdfs.conf，为如下：123456789101112131415161718# 保存日志目录,跟storage.conf一致即可base_path=/data/fastdfs/storage/tracker_server=192.168.1.120:22122 #tracker服务器的IP地址以及端口号,确保跟storage.conf一致即可storage_server_port=23000 #storage服务器的端口号，确保跟storage.conf一致即可group_name=group1 #当前服务器的group名，确保跟storage.conf一致即可url_have_group_name = true #文件url中是否有group名，这个最好设置为true，这样方便nginx服务器解析store_path_count=1 #存储路径个数，需要和store_path个数匹配store_path0=/usr/fastdfs/fastdfs0 #存储路径,跟storage.conf一致即可group_count = 1 #设置组的个数[group1]group_name=group1storage_server_port=23000store_path_count=1store_path0=/usr/fastdfs/fastdfs0#如果group_count =2 ，那就再配置一个 在121上配置nginx这里把120作为负载均衡点，所有的文件访问都是访问120上，然后通过nginx 转发。1vim /usr/local/nginx/conf/nginx.conf 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location ~ /group1/M00 &#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 120 上配置nginx1vim /usr/local/nginx/conf/nginx.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; upstream fdfs_group1 &#123; server 192.168.1.120:8080 weight=1 max_fails=2 fail_timeout=30s; #server 192.168.1.121 weight=1 max_fails=2 fail_timeout=30s; &#125; server &#123; listen 80; server_name localhost; location /group1/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; &#125; #其他配置 location / &#123; root html; index index.html index.htm; &#125; &#125; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location /group1/M00&#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 启动Nginx1# /usr/local/nginx/bin/nginx 观察/usr/local/nginx/logs/errors.log 是否有ERROR存在,如果有类似如下错误:1234ERROR - file: ini_file_reader.c, line: 315, include file &quot;http.conf&quot; not exists, line: &quot;#include http.conf&quot;ERROR - file: /root/Open_Package/fastdfs-nginx-module/src/common.c, line: 155, load conf file &quot;/etc/fdfs/mod_fastdfs.conf&quot; fail, ret code: 22016/08/06 23:51:13 [alert] 12734#0: worker process 12735 exited with fatal code 2 and cannot be respawned 类似这种错误会导致nginx-worker启动失败，致使nginx无法提供web服务。表示/etc/fdfs/下缺少http.conf 和mime.types文件从fastdfs-master/conf/http.conf 拷贝到/etc/fdfs/下 从nginx-1.12.2/conf/mime.types 拷贝到/etc/fdfs/下。12cp /data/fastdfs-master/conf/http.conf /etc/fdfs/cp /data/nginx-1.12.2/conf/mime.types /etc/fdfs/ 测试最后通过上传文件完成测试，如下：1fdfs_test /etc/fdfs/client.conf upload /data/test.jpeg 123456789101112131415161718192021222324252627282930This is FastDFS client test program v5.12Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, which may be found in the FastDFS source kit.Please visit the FastDFS Home Page http://www.csource.org/for more detail.[2018-04-16 18:30:45] DEBUG - base_path=/data/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group: server 1. group_name=, ip_addr=192.168.1.120, port=23000 server 2. group_name=, ip_addr=192.168.1.121, port=23000group_name=group1, ip_addr=192.168.1.120, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpegsource ip address: 192.168.1.120file timestamp=2018-04-16 18:30:45file size=78394file crc32=2720840143example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpegstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852_big.jpegsource ip address: 192.168.1.120file timestamp=2018-04-16 18:30:45file size=78394file crc32=2720840143example file url: http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852_big.jpeg 表示文件上传成功，通过浏览器访问http://192.168.1.120/group1/M00/00/00/wKgBeFrUe1WAc3GuAAEyOqIsuc852.jpeg看到图片显示出来，表示storage已经成功配置nginx服务。如图所示： 完成搭建。 配置第二个group新增一台机器，ip为192.168.1.122，按照以上步骤在122机器上安装 libfastcommon, Storage,fastdfs-nginx-module-master,Nginx。 配置Storage按照第一台Storage配置文件配置/etc/fdfs/storage.conf1vim /etc/fdfs/storage.conf 修改group_name为group21group_name=group2 然后启动Storage。在120上查看是否已经连接到tracker上。12345# fdfs_monitor /etc/fdfs/client.conf | grep ip_addrip_addr = 192.168.1.120 ACTIVEip_addr = 192.168.1.121 ACTIVEip_addr = 192.168.1.122 ACTIVE 配置Nginx参照121机器的nginx配置 配置访问120上的Nginx如下，添加group2的访问123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; upstream fdfs_group2 &#123; server 192.168.1.122 weight=1 max_fails=2 fail_timeout=30s; &#125; upstream fdfs_group1 &#123; server 192.168.1.120:8080 weight=1 max_fails=2 fail_timeout=30s; server 192.168.1.121 weight=1 max_fails=2 fail_timeout=30s; &#125; server &#123; listen 80; server_name localhost; location /group2/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group2; expires 30d; &#125; location /group1/M00 &#123; proxy_next_upstream http_502 http_504 error timeout invalid_header; proxy_pass http://fdfs_group1; expires 30d; &#125; #其他配置 location / &#123; root html; index index.html index.htm; &#125; &#125; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location /group1/M00&#123; root /data/fastdfs/storage/data; ngx_fastdfs_module; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 通过上传文件测试以及通过nginx访问进行测试。 完成多group配置。 后记后来发现有篇博文写的也是很仔细，推荐大家也看一下： 分布式文件系统FastDFS实践 https://t.hao0.me/storage/2016/05/10/fastdfs-practice.html 常见问题Storage WAIT_SYNC 问题正常状态的 Storage 为ACTIVE状态，但有时 Storage 会变为WAIT_SYNC，状态，并且一直不再变化。网上一般是这样处理的，123456#从集群中删除fdfs_monitor /etc/fdfs/client.conf delete group1 10.120.151.114#在114服务器中，删除数据文件夹rm -rf /home/storage1/fastdfs/data#重启114节点fdfs_storaged /etc/fdfs/storage.conf 但是如果同步的文件很多，这样会耗时，一般只需要从集群中删除，然后在重启被删除的 Storage 即可。 参考资料https://aceld.gitbooks.io/project-d-storage/content/12_fastdfsan_zhuang.htmlhttps://blog.csdn.net/pzw_0612/article/details/52610328https://t.hao0.me/storage/2016/05/10/fastdfs-practice.html]]></content>
      <categories>
        <category>技术开发</category>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CentOs7 修改网卡名字为eth0以及修改静态ip]]></title>
    <url>%2Farchives%2Fa7be2108.html</url>
    <content type="text"><![CDATA[修改网卡名称为eth0 在centos7之后，系统网卡的默认名称由以往的Ethx改成了Enox，下面介绍如何将code Centos7 的网卡名称改为Ethx的方法。 首先修改“/etc/sysconfig/grub”文件 1vim /etc/sysconfig/grub 内容大概是这样 12345678GRUB_TIMEOUT=5GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;GRUB_DEFAULT=savedGRUB_DISABLE_SUBMENU=trueGRUB_TERMINAL_OUTPUT=&quot;console&quot;GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;#GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;GRUB_DISABLE_RECOVERY=&quot;true&quot; 其中有一行是GRUB_CMDLINE_LINUX，在这行结尾的引号前面加上这句 1net.ifnames=0 biosdevname=0 修改完成后这行内容为 1GRUB_CMDLINE_LINUX=&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot; 然后用 grub2-mkconfig 命令重新建立 GRUB 的设定值 1grub2-mkconfig -o /boot/grub2/grub.cfg 接着把Eno网卡的名称改为Eth0，如下： 1mv /etc/sysconfig/network-scripts/ifcfg-eno16777736 /etc/sysconfig/network-scripts/ifcfg-eth0 修改网卡名称，并且设置为静态IP 接着编辑/etc/sysconfig/network-scripts/ifcfg-eth0 文件，修改为如下，同时设置为静态ip： 1234567891011121314TYPE=EthernetBOOTPROTO=static //设置为静态IPDEFROUTE=yesPEERDNS=yesPEERROUTES=yesIPV4_FAILURE_FATAL=noIPADDR=192.168.1.120 //ip 地址GATEWAY=192.168.1.1 //网关NETMASK=255.255.255.0 //子网掩码DNS1=8.8.8.8 //DNSNAME=eth0 //网卡名称UUID=bef554bc-0bc9-4234-a896-2c46da01a923DEVICE=eth0 //设备名称ONBOOT=yes //开机自动启动 最后记得重启系统，使配置生效。 参考资料https://www.phpini.com/linux/centos-7-network-interface-name https://blog.csdn.net/johnnycode/article/details/40624403 http://blog.51cto.com/mannerwang/1852712 http://blog.51cto.com/bguncle/957315]]></content>
  </entry>
  <entry>
    <title><![CDATA[xshell端口转发，plsql连接远程oracle]]></title>
    <url>%2Farchives%2F1712872b.html</url>
    <content type="text"><![CDATA[本文主要介绍如何使用XShell建立隧道连接, 让plsql能够直接在本地远程到远程服务器内网中的数据库。 需要前置条件 需要有能够通过ssh链接的中间服务器。例如A 1.先建立一个ssh链接，如下图所示：其中：在主机输入要A的ip，端口号输入A上开发的ssh端口号。2.选择“密码”验证，输入用户名和密码。3.如下图所示：选择“隧道”，然后点击“添加”，在弹出的对话框中输入转移规则，其中：类型（方向）选择“Local(Outgoing)”源主机，输入“localhost”侦听端口，选择本机开发端口，例如：15216如果选中“仅接受本地连接”，表示此隧道只支持本机电脑使用。目标主机，输入服务器真正的数据库内网机器。目标端口，输入服务器数据库端口。点击确定完成隧道创建。4.使用plsql建立数据库远程访问如图所示：]]></content>
      <categories>
        <category>技术开发</category>
        <category>开发工具</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 2017 注册码]]></title>
    <url>%2Farchives%2F95920696.html</url>
    <content type="text"><![CDATA[Intellij Idea 2017注册码 Mac电脑修改idea 2017注册码方式如下： 修改host文件1sudo vim /private/etc/hosts 在host文件最下面添加如下配置 10.0.0.0 account.jetbrains.com 修改idea 2017注册码为如下1EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==]]></content>
      <categories>
        <category>技术开发</category>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华为手机打开log日志的方法]]></title>
    <url>%2Farchives%2F63b4e8a0.html</url>
    <content type="text"><![CDATA[华为 sd 手机默认关闭了ap日志，在开发过程中很不方便。所以需要我们打开app日志，方便调试。 进入拨号界面输入：1*#*#2846579#*#* 依次选择1工程菜单---后台设置----LOG设置---LOG开关 点击打开，完事。]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SSH隧道建立与堡垒机内部机器的连接]]></title>
    <url>%2Farchives%2F769b139d.html</url>
    <content type="text"><![CDATA[在实际项目运维过程中，一般的服务器为了保证安全，都需要通过前置机或者堡垒机的方式才能访问到堡垒机后面的机器，而这给我们的开发部署工作带来很多不便，使用ssh隧道可以帮我们减少很多麻烦。 SSH/plink命令的基本资料：首先，认识下这三个非常强大的命令：1231、ssh -C -f -N -g -L listen_port:DST_Host:DST_port user@Tunnel_Host2、ssh -C -f -N -g -R listen_port:DST_Host:DST_port user@Tunnel_Host3、ssh -C -f -N -g -D listen_port user@Tunnel_Host 相关参数的解释：-f Fork into background after authentication.后台认证用户/密码，通常和-N连用，不用登录到远程主机。 -L port:host:hostport将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport -R port:host:hostport将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport -D port指定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发. -C Enable compression.压缩数据传输。 -N Do not execute a shell or command.不执行脚本或命令，通常与-f连用。 -g Allow remote hosts to connect to forwarded ports.在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。注：这个参数我在实践中似乎始终不起作用。 以上摘录自：http://chenweiguang.blogspot.com/2009/03/ssh.html 使用场景-建立本地SSH隧道例子这里我们主要使用的是第一个场景。在我们计划建立一个本地SSH隧道之前，我们必须清楚下面这些数据：123中间服务器d的IP地址（220.122.122.122）要访问服务器c的IP地址 （内网服务地址10.1.8.1）要访问服务器c的端口 （ssh服务对应端口 22） 以前我们要访问10.1.8.1，必须先通过ssh 连接到220.122.122.122，通过220.122.122.122这台服务器 使用ssh去连接10.1.8.1这台服务器。现在，有了隧道我们可以直接通过ssh 连接10.1.8.1这台服务器。 1231.ssh -C -f -N -g -L 10016:10.1.8.1:22 root@220.122.122.122 -p 210002.ssh root@localhost -p 10016 # 现在通过ssh访问本地10016端口，就能连接10.1.8.1的22端口了 1中 10016是本地监听端口，10.1.8.1是目标服务器，22是目标服务器对应的ssh端口，root@220.122.122.122 -p 21000是中间服务器对应的用户和访问端口。 这里我们用到了SSH客户端的三个参数，下面我们一一做出解释： -N 告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发-f 告诉SSH客户端在后台运行-L 做本地映射端口，被冒号分割的三个部分含义分别是需要使用的本地端口号需要访问的目标机器IP地址（IP: 10.1.8.1）需要访问的目标机器端口（端口: 22)最后一个参数是我们用来建立隧道的中间机器的IP地址以及访问用户和端口(IP: 123.123.123.123)我们再重复一下-L参数的行为。-L X:Y:Z的含义是，将IP为Y的机器的Z端口通过中间服务器映射到本地机器的X端口。 参考资料 http://blog.51cto.com/chenxy/1676772 http://www.zsythink.net/archives/2450 http://blog.creke.net/722.html https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/ http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html]]></content>
      <categories>
        <category>技术开发</category>
        <category>LINUX</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>隧道</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用网站工具箱集合]]></title>
    <url>%2Farchives%2F62b50406.html</url>
    <content type="text"><![CDATA[图片 pexels https://www.pexels.com/ https://unsplash.com/ https://foter.com/ http://www.iconfont.cn/ 生成favicon图片的网站 https://realfavicongenerator.net 存储图片平台 https://cloudinary.com/ 压缩图片 https://tinypng.com/JS layer web弹层组件 http://layer.layui.com/Nginx nginx配置location总结及rewrite规则写法 http://seanlook.com/2015/05/17/nginx-location-rewrite/ 视频音频 you-getYou-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it. RxJava2 学习 https://maxwell-nc.github.io/android/rxjava2-1.html 破解 百度网盘下载破解 百度网盘下载破解2 bootstrap modalhttp://www.runoob.com/bootstrap/bootstrap-modal-plugin.html]]></content>
      <categories>
        <category>技术开发</category>
        <category>工具箱</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[部署Hexo博客到VPS]]></title>
    <url>%2Farchives%2Fefbdc9cb.html</url>
    <content type="text"><![CDATA[前言在本地搭建好Hexo博客后，接下来就是部署到自己的服务器上去了。 运行环境：CentOs 7Nginx 从本地部署到服务器有两种方式一种是通过git hook方式在服务器搭建git环境,通过本地git同步到服务器上,详情见我之前写的一篇文章. git hook 本次要说的是另一种部署方式，通过rsync部署到vps上，这种方式比较简单，比较适合新手和对git不熟悉的同学。 安装rsyncrsync的安装分为两部分：服务器端和本地 服务器端安装1yum install rsync 对于 VPS，大多数的Linux系统已经默认装有 rsync 了，可以运行 rsync 测试下是否已经安装。 本地安装通过npm安装hexo自带的deployer sync 工具1npm install hexo-deployer-rsync --save rsync配置编辑博客文件夹目录下的 _config.yml，找到deploy端添加如下代码：123456deploy: type: rsync host: x.x.x.x user: root root: /data/blog port: 22 配置完毕！在 blog 目录下执行下面一段代码,完成部署。1hexo generate &amp;&amp; hexo deploy 参考资料部署Hexo博客到VPS]]></content>
      <categories>
        <category>技术开发</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx报错403 forbidden (13: Permission denied)的解决办法]]></title>
    <url>%2Farchives%2Faa0e64e5.html</url>
    <content type="text"><![CDATA[引起nginx 403 forbidden通常是三种情况：一是缺少索引文件，二是权限问题，三是SELinux状态. 一、缺少index.html或者默认访问页面，就是配置文件中location下没有默认的index.html。也可以通过index指定 index.htm文件位置。 12345678910111213141516171819202122server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /data/blog; #root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 二、权限问题，如果nginx没有web目录的操作权限，也会出现403错误。 解决办法：1. 修改web目录的读写权限，或者是把nginx的启动用户改成目录的所属用户，重启Nginx即可解决 把文件目录的访问权限分配给nginx用户 使用chown命令可以修改文件或目录所属的用户： chown 用户 目录或文件名 例如：chown qq /home/qq (把home目录下的qq目录的拥有者改为qq用户) 使用chgrp命令可以修改文件或目录所属的组： chgrp 组 目录或文件名 例如：chgrp qq /home/qq (把home目录下的qq目录的所属组改为qq组) 三、SELinux设置为开启状态（enabled）的原因 首先查看本机SELinux的开启状态，如果SELinux status参数为enabled即为开启状态1/usr/sbin/sestatus -v 如果显示disabled 表示SELinux已经关闭了。如果状态为enabled，则需要关闭。1、临时关闭（不用重启）1setenforce 0 2、修改配置文件 /etcselinux/config，将SELINUX=enforcing改为SELINUX=disabled1234vi /etc/selinux/config#SELINUX=enforcingSELINUX=disabled 我这次遇到的就是第三个问题 SELinux(Security-Enhanced Linux): 强制访问控制的实现，是 Linux历史上最杰出的新安全子系统 问题解决资料学习来自：cleey]]></content>
      <categories>
        <category>技术开发</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Farchives%2F4a17b156.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android 多个源码目录和资源目录]]></title>
    <url>%2Farchives%2Fe0c2a9d8.html</url>
    <content type="text"><![CDATA[1.首先你得使用gradle 去构建项目。原理如下： 引用源码目录和资源目录，以及Manifest文件 1234567891011121314sourceSets &#123; main &#123; manifest.srcFile &apos;AndroidManifest.xml&apos; java.srcDirs = [&apos;src&apos;] resources.srcDirs = [&apos;src&apos;] aidl.srcDirs = [&apos;src&apos;] renderscript.srcDirs = [&apos;src&apos;] res.srcDirs = [&apos;res&apos;] assets.srcDirs = [&apos;assets&apos;] &#125; debug.setRoot(&apos;build-types/debug&apos;) release.setRoot(&apos;build-types/release&apos;) &#125; 多个目录配置 12345678910111213sourceSets&#123; main&#123; res.srcDirs = [ &apos;src/main/res/sub_res/base&apos;, &apos;src/main/res/sub_res/notice&apos;, &apos;src/main/res/sub_res/study&apos;, &apos;src/main/res/sub_res/rckq&apos;, &apos;src/main/res/sub_res/associates&apos;, &apos;src/main/res/sub_res&apos;, &apos;src/main/res&apos; ]; &#125; &#125; 如上所示。]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android从布局中快速高效地提取Style]]></title>
    <url>%2Farchives%2Ff11662fe.html</url>
    <content type="text"><![CDATA[为了使用所见即所得的界面布局效果，我们一般都会在Layout xml中边写边调试界面，当写完之后，一般也会把一些重复的，相同的属性写到布局文件中，有时候通过手动去移植，费时费力，下面提供一个简单的方法： 如下图所示布局中的ImageView,需要把其中的属性提取到Style中， 如图所示： 首先，光标放到ImageView属性上，然后使用Android Studio的Refactor功能！首先在Layout中正常编写View的属性，然后点击右键打开菜单，依次选择Refactor -&gt; Extract -&gt; Style。然后在弹出的Style提取对话框中，选择需要的属性。.完事。]]></content>
      <categories>
        <category>技术开发</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在VPS上配置hexo博客]]></title>
    <url>%2Farchives%2Fd887bff1.html</url>
    <content type="text"><![CDATA[0.写在前面从网上看到SpringWon写的关于 在VPS上配置hexo博客，结合自己在Vps上搭建的经历，整理步骤如下。 需要的准备： 一个VPS服务器，这里我使用Vultr提供的服务，VPS服务器为Centos 一台可以上网的Ubuntu电脑或者Mac笔记本，我这里使用的是Ubuntu16.04LTS 基本的命令行操作和基础的计算机网络知识 域名如果没有的话使用ip也行。 其实静态网页完全可以放到Github Page上，大家可以看我的github page主页，效果和个人vps效果是一样的。 1.开始搭建 总体步骤是，在客户机上安装hexo，git。在Vps上安装git，nginx，创建新用户git，以及配置Git Hooks。 1） 在客户机上安装hexo，git。 2） 为vps配置ssh访问。 3） 在服务器上装nginx。 4） 在vps 创建git账户， 5) 在服务器上创建blog.git 路径，并创建/var/www/blog目录，为把此目录赋予git用户相应的操作权限. 1sudo chown git:git /var/www/blog 5） 为Hexo配置deploy路径，修改hexo配置文件_config.yml中的deploy选项， hexo 支持配置多个repo地址。 123456deploy: type: git message: update repo: s1: git@YOURDOMAIN:blog.git,master s2: git@YOURDOMAIN:blog.git,master 5 配置Git Hooks 本地deploy只是把静态文件push到了VPS的git仓库里。使用git hooks在每次push完成后，执行一段脚本，把blog.git里的内容clone出来，再复制到/var/www/blog目录。就可以实现博客的更新了。 123$ cd ~/blog.git/hooks$ touch post-receive$ vi post-receive 使用下面的脚本 12345678 #!/bin/bash -lGIT_REPO=/home/git/blog.gitTMP_GIT_CLONE=/tmp/blogPUBLIC_WWW=/var/www/blogrm -rf $&#123;TMP_GIT_CLONE&#125;git clone $GIT_REPO $TMP_GIT_CLONErm -rf $&#123;PUBLIC_WWW&#125;/*cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125; 更改脚本权限 1chmod +x post-receive 参考资料 Springwon http://www.jianshu.com/p/605c3d32cab9 https://eliyar.biz/code/Hexo/Hexo-on-VPS/]]></content>
      <categories>
        <category>技术开发</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在ubuntu上安装Atom]]></title>
    <url>%2Farchives%2Fccdab178.html</url>
    <content type="text"><![CDATA[首先去官网上下载Atom。 执行以下语句安装Atom1sudo dpkg -i &apos;/home/wjl/下载/atom-amd64.deb&apos; 安装之后，通过如下语句启动1$ atom 如果启动之后，无法切换为中文输入法，执行以下语句： 1$ sudo chown wjl:wjl ~/.atom/ 为atom中的ibus分配权限。其中wjl为您的用户名和用户所在的组。 为Atom切换字体：1.首先查看当前系统支持的字体有哪些：1$ fc-list :lang=zh 然后在设置中，设置“Font Family”为你想要的字体。]]></content>
      <tags>
        <tag>ubntu</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Nginx on Centos]]></title>
    <url>%2Farchives%2F7ef035b3.html</url>
    <content type="text"><![CDATA[The One : Add NGINX yum repository, create a file named /etc/yum.repos.d/nginx.repo. Paste one of the configurations below: CentOS:12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 The Two :第一步，在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo： 123cd /etc/yum.repos.d/vim nginx.repo 填写如下内容：12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 保存，则会产生一个/etc/yum.repos.d/nginx.repo文件。 下面直接执行如下指令即可自动安装好Nginx：1yum install nginx -y 安装完成，下面直接就可以启动Nginx了： Operator1/etc/init.d/nginx start 现在Nginx已经启动了，直接访问服务器就能看到Nginx欢迎页面了的。 如果还无法访问，则需配置一下Linux防火墙。12345iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPTservice iptables saveservice iptables restart Nginx的命令以及配置文件位置： /etc/init.d/nginx start # 启动Nginx服务 /etc/init.d/nginx stop # 停止Nginx服务 /etc/nginx/nginx.conf # Nginx配置文件位置 chkconfig nginx on #设为开机启动 至此，Nginx已经全部配置安装完成。 一台主机上适应多个服务器：在你的nginx通过代理的方式转发请求：配置如下vi /etc/nginx/nginx.conf在http加入下面的内容，参考：http://wiki.nginx.org/FullExamplehttp {…. server { listen 80; server_name www.a.com; charset utf-8; access_log /home/a.com.access.log main; location / { proxy_pass http://127.0.0.1:80; } } server { listen 80; server_name www.b.com; charset utf-8; access_log /home/b.com.access.log main; location / { proxy_pass http://127.0.0.1:81; } }…]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
</search>
